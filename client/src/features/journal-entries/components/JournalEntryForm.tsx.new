import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef,
} from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { JournalEntryStatus, AccountType } from "@shared/schema";
import { useJournalEntry } from "../hooks/useJournalEntry";
import {
  useAttachmentQueries,
  useAddJournalEntryFiles,
  useDeleteJournalEntryFile,
} from "../hooks/attachmentQueries";
import { 
  formatCurrency, 
  formatNumberWithSeparator, 
  safeParseAmount 
} from "../utils/numberFormat";
import { getDebit, getCredit } from "../utils/lineFormat";
import { useDropzone } from "react-dropzone";
import { format } from "date-fns";
import { v4 as uuidv4 } from "uuid";
import { toLocalYMD, formatDisplayDate, ymdToDisplay, getTodayYMD } from "@/utils/dateUtils";
import { 
  ChevronDown, 
  ChevronRight, 
  X, 
  Check, 
  Loader2,
  Info,
  Plus,
  FileText,
  Trash2,
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { toast } from "@/hooks/use-toast";
import { useAuthentication } from "@/hooks/useAuthentication";
import { useHookFormMask } from "use-mask-input";
import { cn } from "@/lib/utils";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

interface JournalEntryResponse {
  id?: number;
  entry?: { id: number };
  [key: string]: any;
}

interface Account {
  id: number;
  accountCode: string; // Use accountCode to match the server schema
  name: string;
  entityId: number;
  type: AccountType;
  description: string | null;
  active: boolean;
  createdAt?: Date;
  subtype?: string | null;
  isSubledger?: boolean;
  subledgerType?: string | null;
  parentId?: number | null;
  [key: string]: any;
}

interface Location {
  id: number;
  name: string;
  code?: string;
  description?: string | null;
  active: boolean;
}

interface Entity {
  id: number;
  name: string;
  code: string;
  description?: string | null;
  active: boolean;
}

interface EntityBalance {
  entityCode: string;
  debit: number;
  credit: number;
  difference: number;
  balanced: boolean;
}

interface JournalEntryFile {
  id: number;
  journalEntryId: number;
  filename: string;
  originalname?: string;
  path: string;
  mimeType: string;
  size: number;
  uploadedBy: number;
  uploadedAt: string | Date;
}

interface ExpandedState {
  [accountId: number]: boolean;
}

interface JournalEntryFormProps {
  entityId: number;
  clientId?: number; // Added clientId support
  accounts: Account[];
  locations?: Location[]; // Kept for interface compatibility but not used
  onSubmit: () => void;
  onCancel: () => void;
  existingEntry?: any;
  entities?: Entity[];
}

interface JournalLine {
  id?: number;
  accountId: string;
  entityCode: string; // Added for intercompany support
  description: string;
  debit: string;
  credit: string;
}

/**
 * AttachmentSection Component
 * Renders file upload, list, and management functionality for journal entries
 * @param props - The component props
 */
interface AttachmentSectionProps {
  entityId: number;
  journalEntryId: number | null | undefined;
  pendingFiles: File[];
  setPendingFiles: React.Dispatch<React.SetStateAction<File[]>>;
  pendingFilesMetadata: Array<{
    id: number;
    filename: string;
    size: number;
    mimeType: string;
    addedAt: Date | number;
  }>;
  setPendingFilesMetadata: React.Dispatch<
    React.SetStateAction<
      Array<{
        id: number;
        filename: string;
        size: number;
        mimeType: string;
        addedAt: Date | number;
      }>
    >
  >;
  // Reference to the function to upload files to a specific journal entry
  onUploadToEntryRef?: React.MutableRefObject<
    ((entryId: number) => Promise<void>) | null
  >;
}

function AttachmentSection({
  entityId,
  journalEntryId,
  pendingFiles,
  setPendingFiles,
  pendingFilesMetadata,
  setPendingFilesMetadata,
  onUploadToEntryRef,
}: AttachmentSectionProps) {
  const { data: attachments, isLoading, refetch } = useAttachmentQueries(
    entityId,
    journalEntryId,
  );

  // File upload mutation
  const addFiles = useAddJournalEntryFiles();
  const deleteFile = useDeleteJournalEntryFile();

  // File upload state
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Setup file dropzone for drag-and-drop
  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      // Add new files to pending files list
      setPendingFiles((prev) => [...prev, ...acceptedFiles]);

      // Create metadata entries
      const newMetadataEntries = acceptedFiles.map((file) => ({
        id: Date.now() + Math.floor(Math.random() * 1000), // Use a timestamp + random ID
        filename: file.name,
        size: file.size,
        mimeType: file.type,
        addedAt: new Date(),
      }));

      setPendingFilesMetadata((prev) => [...prev, ...newMetadataEntries]);
    },
    [setPendingFiles, setPendingFilesMetadata],
  );

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      // Only accept common document types
      "application/pdf": [".pdf"],
      "image/jpeg": [".jpg", ".jpeg"],
      "image/png": [".png"],
      "application/msword": [".doc"],
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
        ".docx",
      ],
      "application/vnd.ms-excel": [".xls"],
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
        ".xlsx",
      ],
      "text/csv": [".csv"],
      "application/zip": [".zip"],
    },
    maxSize: 10 * 1024 * 1024, // 10MB max file size
  });

  // Handle file upload to an existing journal entry
  const uploadFilesToEntry = async (entryId: number) => {
    // Only proceed if there are pending files
    if (pendingFiles.length === 0) return;

    setIsUploading(true);
    setUploadProgress(0);

    try {
      // Create FormData to upload files
      const formData = new FormData();
      pendingFiles.forEach((file) => {
        formData.append("files", file);
      });

      // If we have an entry ID, proceed with the upload
      if (entryId) {
        const response = await addFiles.mutateAsync({
          entityId,
          journalEntryId: entryId,
          formData,
        });

        if (response) {
          toast({
            title: "Files Uploaded",
            description: `${pendingFiles.length} file(s) uploaded successfully`,
          });

          // Clear pending files after successful upload
          setPendingFiles([]);
          setPendingFilesMetadata([]);

          // Refresh the attachments list
          refetch();
        }
      }
    } catch (error) {
      console.error("Error uploading files:", error);
      toast({
        title: "Upload Failed",
        description: "There was an error uploading the files",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
      setUploadProgress(100);
    }
  };

  // Store upload function in ref for parent component to access
  useEffect(() => {
    if (onUploadToEntryRef) {
      onUploadToEntryRef.current = uploadFilesToEntry;
    }
  }, [pendingFiles, entityId, onUploadToEntryRef]);

  // Function to remove a file from pending uploads
  const removePendingFile = (id: number) => {
    const indexToRemove = pendingFilesMetadata.findIndex(
      (meta) => meta.id === id,
    );
    if (indexToRemove !== -1) {
      setPendingFiles((prev) => {
        const newFiles = [...prev];
        newFiles.splice(indexToRemove, 1);
        return newFiles;
      });

      setPendingFilesMetadata((prev) => {
        const newMetadata = [...prev];
        newMetadata.splice(indexToRemove, 1);
        return newMetadata;
      });
    }
  };

  // Function to delete an already uploaded file
  const handleDeleteFile = async (fileId: number) => {
    try {
      await deleteFile.mutateAsync({
        entityId,
        journalEntryId: journalEntryId as number,
        fileId,
      });

      toast({
        title: "File Deleted",
        description: "The file has been deleted successfully",
      });

      // Refresh the attachments list
      refetch();
    } catch (error) {
      console.error("Error deleting file:", error);
      toast({
        title: "Deletion Failed",
        description: "There was an error deleting the file",
        variant: "destructive",
      });
    }
  };

  // Helper to format file size
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + " bytes";
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB";
    else return (bytes / 1048576).toFixed(1) + " MB";
  };

  return (
    <div className="mt-8 border rounded-md p-4">
      <h3 className="text-lg font-medium mb-4">Attachments</h3>

      {/* Drag and drop area */}
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-md p-6 text-center cursor-pointer transition-colors ${
          isDragActive
            ? "border-blue-400 bg-blue-50"
            : "border-gray-300 hover:border-gray-400"
        }`}
      >
        <input {...getInputProps()} />
        {isDragActive ? (
          <p className="text-blue-500">Drop the files here...</p>
        ) : (
          <div>
            <FileText className="w-10 h-10 mx-auto mb-2 text-gray-400" />
            <p className="mb-1">
              Drag and drop files here, or click to select files
            </p>
            <p className="text-xs text-gray-500">
              (PDF, Word, Excel, CSV, JPG, PNG - Max 10MB)
            </p>
          </div>
        )}
      </div>

      {/* Pending files list */}
      {pendingFilesMetadata.length > 0 && (
        <div className="mt-4">
          <h4 className="text-sm font-medium mb-2">
            Pending Uploads ({pendingFilesMetadata.length})
          </h4>
          <div className="border rounded-md divide-y">
            {pendingFilesMetadata.map((file) => (
              <div
                key={file.id}
                className="p-3 flex items-center justify-between"
              >
                <div className="flex items-center">
                  <FileText className="w-5 h-5 mr-2 text-gray-400" />
                  <div>
                    <p className="text-sm font-medium truncate max-w-xs">
                      {file.filename}
                    </p>
                    <p className="text-xs text-gray-500">
                      {formatFileSize(file.size)}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => removePendingFile(file.id)}
                  className="text-red-500 hover:text-red-700"
                  aria-label="Remove file"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Existing files list */}
      {attachments && attachments.length > 0 && (
        <div className="mt-4">
          <h4 className="text-sm font-medium mb-2">
            Attached Files ({attachments.length})
          </h4>
          <div className="border rounded-md divide-y">
            {attachments.map((file: JournalEntryFile) => (
              <div
                key={file.id}
                className="p-3 flex items-center justify-between"
              >
                <div className="flex items-center">
                  <FileText className="w-5 h-5 mr-2 text-gray-400" />
                  <div>
                    <p className="text-sm font-medium truncate max-w-xs">
                      {file.originalname || file.filename}
                    </p>
                    <p className="text-xs text-gray-500">
                      {formatFileSize(file.size)} •{" "}
                      {new Date(file.uploadedAt).toLocaleDateString()}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <a
                    href={`/api/entities/${entityId}/journal-entries/${journalEntryId}/files/${file.id}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-500 hover:text-blue-700"
                    aria-label="View file"
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      className="h-8 px-2 text-xs"
                    >
                      View
                    </Button>
                  </a>
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-8 px-2 text-xs text-red-500 hover:text-red-700"
                      >
                        Delete
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Confirm Deletion</DialogTitle>
                        <DialogDescription>
                          Are you sure you want to delete this file? This action
                          cannot be undone.
                        </DialogDescription>
                      </DialogHeader>
                      <DialogFooter>
                        <Button
                          variant="outline"
                          onClick={() => {
                            const dialogElement =
                              document.querySelector("[role=dialog]");
                            if (dialogElement) {
                              const closeButton =
                                dialogElement.querySelector(
                                  "button[aria-label=Close]",
                                );
                              if (closeButton instanceof HTMLElement) {
                                closeButton.click();
                              }
                            }
                          }}
                        >
                          Cancel
                        </Button>
                        <Button
                          variant="destructive"
                          onClick={() => {
                            handleDeleteFile(file.id);
                            // Close dialog after delete action
                            const dialogElement =
                              document.querySelector("[role=dialog]");
                            if (dialogElement) {
                              const closeButton =
                                dialogElement.querySelector(
                                  "button[aria-label=Close]",
                                );
                              if (closeButton instanceof HTMLElement) {
                                closeButton.click();
                              }
                            }
                          }}
                        >
                          Delete
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Loading and progress indicators */}
      {isLoading && (
        <div className="mt-4 flex items-center justify-center text-gray-500">
          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
          <span>Loading attachments...</span>
        </div>
      )}

      {isUploading && (
        <div className="mt-4">
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <div
              className="h-full bg-blue-500 transition-all"
              style={{ width: `${uploadProgress}%` }}
            ></div>
          </div>
          <p className="text-xs text-center mt-1 text-gray-500">
            Uploading files... {uploadProgress}%
          </p>
        </div>
      )}
    </div>
  );
}

/**
 * JournalEntryForm Component
 * Renders a form for creating or editing journal entries
 * @param props - The component props
 */
function JournalEntryForm({
  entityId,
  clientId,
  accounts,
  onSubmit,
  onCancel,
  existingEntry,
  entities = [],
}: JournalEntryFormProps) {
  const queryClient = useQueryClient();
  const { user } = useAuthentication();

  // Post journal entry mutation
  const postJournalEntry = useMutation({
    mutationFn: async (entryId: number) => {
      return await apiRequest(`/api/entities/${entityId}/journal-entries/${entryId}/post`, {
        method: "POST",
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [`/api/entities/${entityId}/journal-entries`],
      });
      toast({
        title: "Journal Entry Posted",
        description: "The journal entry has been posted successfully",
      });
      onSubmit();
    },
    onError: (error) => {
      console.error("Error posting journal entry:", error);
      toast({
        title: "Posting Failed",
        description: "There was an error posting the journal entry",
        variant: "destructive",
      });
    },
  });

  // State for form data
  const [date, setDate] = useState(getTodayYMD());
  const [description, setDescription] = useState("");
  const [referenceNumber, setReferenceNumber] = useState("");
  const [journalType, setJournalType] = useState("standard");
  const [lines, setLines] = useState<JournalLine[]>([
    { accountId: "", entityCode: "", description: "", debit: "", credit: "" },
  ]);
  const [fieldErrors, setFieldErrors] = useState<{ [key: string]: string }>({});
  const [formError, setFormError] = useState<string | null>(null);

  // State for attachment handling
  const [pendingFiles, setPendingFiles] = useState<File[]>([]);
  const [pendingFilesMetadata, setPendingFilesMetadata] = useState<
    Array<{
      id: number;
      filename: string;
      size: number;
      mimeType: string;
      addedAt: Date | number;
    }>
  >([]);
  const uploadPendingFilesRef = useRef<((entryId: number) => Promise<void>) | null>(null);

  // Determine if editing mode
  const isEditing = Boolean(existingEntry?.id);
  const effectiveJournalEntryId = isEditing ? existingEntry.id : null;

  // Create and update mutations
  const createEntry = useMutation({
    mutationFn: async (data: any) => {
      return await apiRequest(`/api/entities/${entityId}/journal-entries`, {
        method: "POST",
        body: JSON.stringify(data),
      });
    },
    onSuccess: async (result: JournalEntryResponse) => {
      queryClient.invalidateQueries({
        queryKey: [`/api/entities/${entityId}/journal-entries`],
      });
      toast({
        title: "Journal Entry Created",
        description: "The journal entry has been created successfully",
      });
      // If there are pending files, upload them now
      if (pendingFiles.length > 0 && uploadPendingFilesRef.current) {
        await uploadPendingFilesRef.current(result.entry?.id || result.id!);
      }
      onSubmit();
    },
    onError: (error) => {
      console.error("Error creating journal entry:", error);
      toast({
        title: "Creation Failed",
        description: "There was an error creating the journal entry",
        variant: "destructive",
      });
    },
  });

  const updateEntry = useMutation({
    mutationFn: async (data: any) => {
      return await apiRequest(
        `/api/entities/${entityId}/journal-entries/${existingEntry.id}`,
        {
          method: "PUT",
          body: JSON.stringify(data),
        },
      );
    },
    onSuccess: async (response: JournalEntryResponse) => {
      queryClient.invalidateQueries({
        queryKey: [`/api/entities/${entityId}/journal-entries`],
      });
      queryClient.invalidateQueries({
        queryKey: [
          `/api/entities/${entityId}/journal-entries/${existingEntry.id}`,
        ],
      });
      toast({
        title: "Journal Entry Updated",
        description: "The journal entry has been updated successfully",
      });
      // If there are pending files, upload them now
      if (pendingFiles.length > 0 && uploadPendingFilesRef.current) {
        await uploadPendingFilesRef.current(
          response.entry?.id || existingEntry.id,
        );
      }
      onSubmit();
    },
    onError: (error) => {
      console.error("Error updating journal entry:", error);
      toast({
        title: "Update Failed",
        description: "There was an error updating the journal entry",
        variant: "destructive",
      });
    },
  });

  // Reference holder for the form
  const formRef = useRef<HTMLFormElement>(null);

  // Track expanded/collapsed state of parent accounts
  const initializeExpandedState = () => {
    const initialState: ExpandedState = {};
    accounts.forEach((account) => {
      if (account.isSubledger === false && account.parentId === null) {
        initialState[account.id] = false; // Start with all parent accounts collapsed
      }
    });
    return initialState;
  };

  const [expandedAccounts, setExpandedAccounts] = useState<ExpandedState>(
    initializeExpandedState,
  );
  const [searchQuery, setSearchQuery] = useState<string>("");
  
  // Helper function to get account display label
  const getAccountLabel = useCallback((accountId: string | undefined) => {
    if (!accountId || !accounts.some(a => a.id.toString() === accountId)) {
      return "Select account...";
    }
    const account = accounts.find(a => a.id.toString() === accountId);
    return `${account?.accountCode} – ${account?.name}`;
  }, [accounts]);

  // Calculate totals - memoized to avoid recalculation on every render
  const { totalDebit, totalCredit, difference, isBalanced } = useMemo(() => {
    // Use our shared helper functions to handle different line formats
    const totalDebit = lines.reduce((sum, line) => {
      return sum + getDebit(line);
    }, 0);

    const totalCredit = lines.reduce((sum, line) => {
      return sum + getCredit(line);
    }, 0);

    const difference = Math.abs(totalDebit - totalCredit);
    const isBalanced = difference < 0.01; // Allow for small rounding differences

    return {
      totalDebit,
      totalCredit,
      difference,
      isBalanced,
    };
  }, [lines]);

  // Create entity balances summary for intercompany validation
  const entityBalances = useMemo(() => {
    // Group lines by entity
    const entityGroups: { [entityCode: string]: JournalLine[] } = {};

    lines.forEach((line) => {
      // Skip lines without an entity code
      if (!line.entityCode) return;

      if (!entityGroups[line.entityCode]) {
        entityGroups[line.entityCode] = [];
      }
      entityGroups[line.entityCode].push(line);
    });

    // Calculate balances for each entity
    return Object.entries(entityGroups).map(([entityCode, entityLines]) => {
      const { totalDebit, totalCredit } = entityLines.reduce((acc, line) => {
        return {
          totalDebit: acc.totalDebit + getDebit(line),
          totalCredit: acc.totalCredit + getCredit(line),
        };
      }, { totalDebit: 0, totalCredit: 0 });

      const difference = Math.abs(totalDebit - totalCredit);
      const balanced = difference < 0.01; // Allow for small rounding differences

      return {
        entityCode,
        debit: totalDebit,
        credit: totalCredit,
        difference,
        balanced,
      };
    });
  }, [lines]);

  // Initialize form when editing an existing entry
  useEffect(() => {
    if (existingEntry) {
      // Format date from ISO to YYYY-MM-DD
      const formattedDate = existingEntry.date
        ? toLocalYMD(new Date(existingEntry.date))
        : getTodayYMD();

      setDate(formattedDate);
      setDescription(existingEntry.description || "");
      setReferenceNumber(existingEntry.referenceNumber || "");
      setJournalType(existingEntry.journalType || "standard");

      // Format lines for the UI
      if (existingEntry.lines && existingEntry.lines.length > 0) {
        const formattedLines = existingEntry.lines.map((line: any) => {
          // For backward compatibility, handle both type/amount and debit/credit formats
          const debitAmount = getDebit(line);
          const creditAmount = getCredit(line);

          return {
            id: line.id,
            accountId: line.accountId?.toString() || "",
            entityCode: line.entityCode || "", // Support for intercompany
            description: line.description || "",
            debit: debitAmount ? formatNumberWithSeparator(debitAmount.toFixed(2)) : "",
            credit: creditAmount ? formatNumberWithSeparator(creditAmount.toFixed(2)) : "",
          };
        });

        setLines(formattedLines);
      } else {
        // Initialize with an empty line if no lines exist
        setLines([
          {
            accountId: "",
            entityCode: "",
            description: "",
            debit: "",
            credit: "",
          },
        ]);
      }
    }
  }, [existingEntry]);

  // Function to generate a reference number
  function generateReference() {
    // Format: JE-YYYYMMDD-XXX where XXX is a random 3-digit number
    const today = new Date();
    const datePart = format(today, "yyyyMMdd");
    const randomPart = Math.floor(Math.random() * 900) + 100; // 100-999

    const reference = `JE-${datePart}-${randomPart}`;
    setReferenceNumber(reference);
  }

  // Add a new empty line
  const addLine = () => {
    setLines([
      ...lines,
      {
        accountId: "",
        entityCode: "",
        description: "",
        debit: "",
        credit: "",
      },
    ]);
  };

  // Remove a line
  const removeLine = (index: number) => {
    if (lines.length > 1) {
      const updatedLines = [...lines];
      updatedLines.splice(index, 1);
      setLines(updatedLines);
    } else {
      toast({
        title: "Cannot Remove Line",
        description: "A journal entry must have at least one line",
        variant: "destructive",
      });
    }
  };

  // Handle line field changes
  const handleLineChange = (index: number, field: string, value: string) => {
    const updatedLines = [...lines];
    // Update the specific field of the line at the given index
    (updatedLines[index] as any)[field] = value;

    // Special handling for debit/credit fields to ensure only one can have a value
    if (field === "debit" && value && updatedLines[index].credit) {
      updatedLines[index].credit = "";
    } else if (field === "credit" && value && updatedLines[index].debit) {
      updatedLines[index].debit = "";
    }

    setLines(updatedLines);

    // Clear any errors for this field
    if (fieldErrors[`line_${index}_${field}`]) {
      const newErrors = { ...fieldErrors };
      delete newErrors[`line_${index}_${field}`];
      setFieldErrors(newErrors);
    }
  };

  // Process lines for submission - convert from UI format to API format
  const processLinesForSubmission = (lines: JournalLine[]) => {
    return lines.map((line) => {
      // Determine amount and type based on debit/credit fields
      let type: "debit" | "credit" = "debit";
      let amount = 0;

      if (line.debit && parseFloat(safeParseAmount(line.debit).toString()) > 0) {
        type = "debit";
        amount = parseFloat(safeParseAmount(line.debit).toString());
      } else if (
        line.credit &&
        parseFloat(safeParseAmount(line.credit).toString()) > 0
      ) {
        type = "credit";
        amount = parseFloat(safeParseAmount(line.credit).toString());
      }

      return {
        id: line.id, // Include ID if it exists (for updates)
        accountId: parseInt(line.accountId),
        entityCode: line.entityCode, // Include for intercompany support
        description: line.description,
        type,
        amount,
      };
    });
  };

  // Validate form before submission
  const validateForm = (): boolean => {
    const errors: { [key: string]: string } = {};
    let isValid = true;

    // Validate header fields
    if (!date) {
      errors.date = "Date is required";
      isValid = false;
    }

    if (!description) {
      errors.description = "Description is required";
      isValid = false;
    }

    if (!referenceNumber) {
      errors.referenceNumber = "Reference number is required";
      isValid = false;
    }

    // Validate each line
    lines.forEach((line, index) => {
      if (!line.accountId) {
        errors[`line_${index}_accountId`] = "Account is required";
        isValid = false;
      }

      if (!line.entityCode) {
        errors[`line_${index}_entityCode`] = "Entity is required";
        isValid = false;
      }

      if (!line.description) {
        errors[`line_${index}_description`] = "Description is required";
        isValid = false;
      }

      const hasDebit = line.debit && parseFloat(safeParseAmount(line.debit).toString()) > 0;
      const hasCredit = line.credit && parseFloat(safeParseAmount(line.credit).toString()) > 0;

      if (!hasDebit && !hasCredit) {
        errors[`line_${index}_debit`] = "Amount is required";
        errors[`line_${index}_credit`] = "Amount is required";
        isValid = false;
      } else if (hasDebit && hasCredit) {
        errors[`line_${index}_debit`] = "Only one of debit/credit can have a value";
        errors[`line_${index}_credit`] = "Only one of debit/credit can have a value";
        isValid = false;
      }
    });

    // Check if the journal entry is balanced
    if (!isBalanced) {
      setFormError("Journal entry must be balanced (Debits = Credits)");
      isValid = false;
    } else {
      setFormError(null);
    }

    setFieldErrors(errors);
    return isValid;
  };

  // Handle form submission
  const handleSubmit = (isDraft = false) => {
    // Validate the form (except for balance in draft mode)
    const isValid = isDraft ? true : validateForm();
    if (!isValid && !isDraft) {
      toast({
        title: "Validation Failed",
        description: "Please correct the highlighted errors",
        variant: "destructive",
      });
      return;
    }

    // If there's a balance error but it's a draft, it's okay
    if (!isBalanced && isDraft) {
      setFormError(null);
    }

    // Check if any pending uploads are in process
    const isUploading = false; // This would be set if uploads are happening

    // Prepare line data
    const processedLines = processLinesForSubmission(lines);

    // Create the journal entry data
    const journalData = {
      date,
      description,
      referenceNumber,
      journalType,
      entityId,
      clientId, // Include clientId if provided
      status: isDraft ? "draft" : "pending",
      lines: processedLines,
    };

    // Submit based on whether it's a new entry or an update
    if (isEditing && existingEntry?.id) {
      updateEntry.mutate(journalData);
    } else {
      createEntry.mutate(journalData);
    }
  };

  // List of journal types
  const journalTypes = [
    { value: "standard", label: "Standard" },
    { value: "adjusting", label: "Adjusting" },
    { value: "recurring", label: "Recurring" },
    { value: "reversing", label: "Reversing" },
    { value: "intercompany", label: "Intercompany" },
  ];

  // Building the UI
  return (
    <div className="container mx-auto p-6 bg-white rounded-lg shadow-sm">
      <h2 className="text-2xl font-bold mb-6">
        {isEditing
          ? `Edit Journal Entry ${existingEntry.referenceNumber}`
          : "Create Journal Entry"}
      </h2>

      <form ref={formRef} className="space-y-8">
        {/* Status badge for existing entries */}
        {isEditing && existingEntry?.status && (
          <div className="mb-6">
            <span
              className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                existingEntry.status === "draft"
                  ? "bg-gray-100 text-gray-800"
                  : existingEntry.status === "pending"
                  ? "bg-blue-100 text-blue-800"
                  : existingEntry.status === "posted"
                  ? "bg-green-100 text-green-800"
                  : existingEntry.status === "rejected"
                  ? "bg-red-100 text-red-800"
                  : existingEntry.status === "voided"
                  ? "bg-gray-100 text-gray-500"
                  : "bg-gray-100 text-gray-800"
              }`}
            >
              {existingEntry.status.charAt(0).toUpperCase() +
                existingEntry.status.slice(1)}
            </span>
          </div>
        )}

        {/* Header fields */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div>
            <Label htmlFor="date">Date</Label>
            <div className="mt-1">
              <Input
                id="date"
                type="date"
                value={date}
                onChange={(e) => {
                  setDate(e.target.value);
                  if (fieldErrors.date) {
                    const newErrors = { ...fieldErrors };
                    delete newErrors.date;
                    setFieldErrors(newErrors);
                  }
                }}
                className={fieldErrors.date ? "border-red-500" : ""}
                disabled={
                  isEditing &&
                  (existingEntry?.status === "posted" ||
                    existingEntry?.status === "voided")
                }
              />
              {fieldErrors.date && (
                <p className="text-red-500 text-sm mt-1">{fieldErrors.date}</p>
              )}
            </div>
          </div>

          <div>
            <Label htmlFor="reference">Reference Number</Label>
            <div className="mt-1 flex">
              <Input
                id="reference"
                value={referenceNumber}
                onChange={(e) => {
                  setReferenceNumber(e.target.value);
                  if (fieldErrors.referenceNumber) {
                    const newErrors = { ...fieldErrors };
                    delete newErrors.referenceNumber;
                    setFieldErrors(newErrors);
                  }
                }}
                className={`flex-1 ${
                  fieldErrors.referenceNumber ? "border-red-500" : ""
                }`}
                disabled={
                  isEditing &&
                  (existingEntry?.status === "posted" ||
                    existingEntry?.status === "voided")
                }
              />
              {!isEditing && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={generateReference}
                  className="ml-2"
                >
                  Generate
                </Button>
              )}
            </div>
            {fieldErrors.referenceNumber && (
              <p className="text-red-500 text-sm mt-1">
                {fieldErrors.referenceNumber}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="journalType">Journal Type</Label>
            <Select
              value={journalType}
              onValueChange={(value) => setJournalType(value)}
              disabled={
                isEditing &&
                (existingEntry?.status === "posted" ||
                  existingEntry?.status === "voided")
              }
            >
              <SelectTrigger className="w-full mt-1">
                <SelectValue placeholder="Select journal type" />
              </SelectTrigger>
              <SelectContent>
                {journalTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/*  Entity field is displayed for info only, as entityId is received from props */}
          <div>
            <Label>Entity</Label>
            <Input
              value={
                entities.find((e) => e.id === entityId)?.name ||
                `Entity ID: ${entityId}`
              }
              disabled
              className="mt-1 bg-gray-50"
            />
          </div>
        </div>

        <div>
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            value={description}
            onChange={(e) => {
              setDescription(e.target.value);
              if (fieldErrors.description) {
                const newErrors = { ...fieldErrors };
                delete newErrors.description;
                setFieldErrors(newErrors);
              }
            }}
            className={`mt-1 ${fieldErrors.description ? "border-red-500" : ""}`}
            disabled={
              isEditing &&
              (existingEntry?.status === "posted" ||
                existingEntry?.status === "voided")
            }
          />
          {fieldErrors.description && (
            <p className="text-red-500 text-sm mt-1">
              {fieldErrors.description}
            </p>
          )}
        </div>

        {/* Form Error Alert */}
        {formError && (
          <Alert variant="destructive">
            <Info className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{formError}</AlertDescription>
          </Alert>
        )}

        {/* Journal Lines Table */}
        <h3 className="text-lg font-semibold">Journal Lines</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Account
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Entity
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Description
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Debit
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Credit
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Actions
                </th>
              </tr>
            </thead>

            <tbody className="bg-white divide-y divide-gray-200">
              {lines.map((line, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      {/* Account dropdown using Select */}
                      <Select 
                        value={line.accountId?.toString() ?? ''}
                        onValueChange={v => handleLineChange(index, 'accountId', v)}
                      >
                        <SelectTrigger className={fieldErrors[`line_${index}_accountId`] ? "border-red-500" : ""}>
                          {getAccountLabel(line.accountId)}
                        </SelectTrigger>
                        <SelectContent>
                          {accounts.filter(a => a.active).map(a => (
                            <SelectItem key={a.id} value={a.id.toString()}>
                              {a.accountCode} – {a.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    {fieldErrors[`line_${index}_accountId`] && (
                      <p className="text-red-500 text-sm mt-1">
                        {fieldErrors[`line_${index}_accountId`]}
                      </p>
                    )}
                  </td>

                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      {/* Entity dropdown using Select */}
                      <Select 
                        value={line.entityCode ?? ''}
                        onValueChange={v => handleLineChange(index, 'entityCode', v)}
                      >
                        <SelectTrigger className={fieldErrors[`line_${index}_entityCode`] ? "border-red-500" : ""}>
                          {line.entityCode && entities.some((entity) => entity.code === line.entityCode)
                            ? `${line.entityCode} - ${entities.find((entity) => entity.code === line.entityCode)?.name}`
                            : "Select entity..."}
                        </SelectTrigger>
                        <SelectContent>
                          {entities.filter(e => e.active).sort((a, b) => a.code.localeCompare(b.code)).map(entity => (
                            <SelectItem key={entity.id} value={entity.code}>
                              {entity.code} – {entity.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    {fieldErrors[`line_${index}_entityCode`] && (
                      <p className="text-red-500 text-sm mt-1">
                        {fieldErrors[`line_${index}_entityCode`]}
                      </p>
                    )}
                  </td>

                  <td className="px-6 py-4 whitespace-nowrap">
                    <Input
                      value={line.description}
                      onChange={(e) =>
                        handleLineChange(index, "description", e.target.value)
                      }
                      placeholder="Line description"
                      className={
                        fieldErrors[`line_${index}_description`]
                          ? "border-red-500"
                          : ""
                      }
                    />
                    {fieldErrors[`line_${index}_description`] && (
                      <p className="text-red-500 text-sm mt-1">
                        {fieldErrors[`line_${index}_description`]}
                      </p>
                    )}
                  </td>

                  <td className="px-6 py-4 whitespace-nowrap">
                    {/* Using a text input with pattern validation for better formatting control */}
                    <Input
                      type="text"
                      inputMode="decimal"
                      value={line.debit}
                      onChange={(e) => {
                        // Use safeParseAmount for consistent number parsing
                        const rawValue = safeParseAmount(e.target.value).toString();
                        handleLineChange(index, "debit", rawValue);
                      }}
                      onBlur={(e) => {
                        // Format to 2 decimal places with thousands separators on blur
                        if (e.target.value) {
                          const numValue = safeParseAmount(e.target.value);

                          if (!isNaN(numValue)) {
                            // Format with 2 decimal places and thousands separators
                            const formattedValue = formatNumberWithSeparator(
                              numValue.toFixed(2),
                            );
                            handleLineChange(index, "debit", formattedValue);
                          }
                        }
                      }}
                      placeholder="0.00"
                      className={
                        fieldErrors[`line_${index}_debit`] ? "border-red-500" : ""
                      }
                    />
                    {fieldErrors[`line_${index}_debit`] && (
                      <p className="text-red-500 text-sm mt-1">
                        {fieldErrors[`line_${index}_debit`]}
                      </p>
                    )}
                  </td>

                  <td className="px-6 py-4 whitespace-nowrap">
                    {/* Using a text input with pattern validation for better formatting control */}
                    <Input
                      type="text"
                      inputMode="decimal"
                      value={line.credit}
                      onChange={(e) => {
                        // Use safeParseAmount for consistent number parsing
                        const rawValue = safeParseAmount(e.target.value).toString();
                        handleLineChange(index, "credit", rawValue);
                      }}
                      onBlur={(e) => {
                        // Format to 2 decimal places with thousands separators on blur
                        if (e.target.value) {
                          const numValue = safeParseAmount(e.target.value);

                          if (!isNaN(numValue)) {
                            // Format with 2 decimal places and thousands separators
                            const formattedValue = formatNumberWithSeparator(
                              numValue.toFixed(2),
                            );
                            handleLineChange(index, "credit", formattedValue);
                          }
                        }
                      }}
                      placeholder="0.00"
                      className={
                        fieldErrors[`line_${index}_credit`]
                          ? "border-red-500"
                          : ""
                      }
                    />
                    {fieldErrors[`line_${index}_credit`] && (
                      <p className="text-red-500 text-sm mt-1">
                        {fieldErrors[`line_${index}_credit`]}
                      </p>
                    )}
                  </td>

                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      className="text-red-600 hover:text-red-900"
                      onClick={() => removeLine(index)}
                      aria-label="Remove line"
                    >
                      <X className="h-5 w-5" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>

            <tfoot>
              <tr>
                <td colSpan={6} className="px-6 py-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={addLine}
                    className="inline-flex items-center"
                  >
                    <Plus className="-ml-0.5 mr-2 h-4 w-4" />
                    Add Line
                  </Button>
                </td>
              </tr>

              <tr className="bg-gray-50">
                <td
                  colSpan={3}
                  className="px-6 py-4 text-right text-sm font-medium text-gray-900"
                >
                  Totals:
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {totalDebit.toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {totalCredit.toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td className="px-6 py-4"></td>
              </tr>

              <tr className="bg-gray-50">
                <td
                  colSpan={3}
                  className="px-6 py-4 text-right text-sm font-medium text-gray-900"
                >
                  Difference:
                </td>
                <td
                  colSpan={2}
                  className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${isBalanced ? "text-green-600" : "text-red-600"}`}
                >
                  {difference.toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td className="px-6 py-4"></td>
              </tr>

              {/* Entity Balance Summary Section - Intercompany Validation */}
              {entityBalances.length > 1 && (
                <>
                  <tr className="bg-gray-100">
                    <td
                      colSpan={6}
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Entity Balance Summary (Intercompany)
                    </td>
                  </tr>
                  {entityBalances.map((balance: EntityBalance) => (
                    <tr key={balance.entityCode} className="bg-gray-50">
                      <td
                        colSpan={2}
                        className="px-6 py-2 text-right text-xs font-medium text-gray-900"
                      >
                        Entity {balance.entityCode}:
                      </td>
                      <td className="px-6 py-2 whitespace-nowrap text-xs font-medium text-gray-900">
                        DR:{" "}
                        {balance.debit.toLocaleString(undefined, {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}
                      </td>
                      <td className="px-6 py-2 whitespace-nowrap text-xs font-medium text-gray-900">
                        CR:{" "}
                        {balance.credit.toLocaleString(undefined, {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}
                      </td>
                      <td
                        colSpan={2}
                        className={`px-6 py-2 whitespace-nowrap text-xs font-medium ${balance.balanced ? "text-green-600" : "text-red-600"}`}
                      >
                        {balance.balanced
                          ? "Balanced"
                          : `Difference: ${balance.difference.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}
                      </td>
                    </tr>
                  ))}
                </>
              )}
            </tfoot>
          </table>
        </div>

        {/* Attachment Section Conditional Rendering */}
        {!isEditing ||
        (isEditing &&
          existingEntry?.id &&
          existingEntry?.status !== "posted" &&
          existingEntry?.status !== "voided") ? (
          <AttachmentSection
            entityId={entityId}
            journalEntryId={effectiveJournalEntryId}
            pendingFiles={pendingFiles}
            setPendingFiles={setPendingFiles}
            pendingFilesMetadata={pendingFilesMetadata}
            setPendingFilesMetadata={setPendingFilesMetadata}
            onUploadToEntryRef={uploadPendingFilesRef}
          />
        ) : null}

        <div className="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3">
          <Button
            variant="outline"
            onClick={onCancel}
            disabled={createEntry.isPending || updateEntry.isPending}
          >
            Cancel
          </Button>

          <div className="grid grid-cols-2 gap-2">
            {/* Save as Draft button - for all users */}
            <Button
              onClick={() => handleSubmit(true)}
              disabled={
                createEntry.isPending || updateEntry.isPending || isUploading
              }
              className="relative"
            >
              {(createEntry.isPending ||
                updateEntry.isPending ||
                isUploading) && (
                <Loader2 className="mr-2 h-4 w-4 animate-spin inline" />
              )}
              {!(createEntry.isPending || updateEntry.isPending || isUploading) &&
                "Save as Draft"}
              {(createEntry.isPending || updateEntry.isPending || isUploading) &&
                "Saving..."}
            </Button>

            {/* Submit button - for all users */}
            <Button
              type="button"
              onClick={() => handleSubmit(false)}
              disabled={
                createEntry.isPending ||
                updateEntry.isPending ||
                !isBalanced ||
                isUploading
              }
              className="relative"
            >
              {(createEntry.isPending ||
                updateEntry.isPending ||
                isUploading) && (
                <Loader2 className="mr-2 h-4 w-4 animate-spin inline" />
              )}
              {!(createEntry.isPending || updateEntry.isPending || isUploading) &&
                "Submit"}
              {(createEntry.isPending || updateEntry.isPending || isUploading) &&
                "Submitting..."}
            </Button>
          </div>
        </div>

        {/* Post button - only for admin users and on submitted entries */}
        {isEditing &&
          existingEntry?.status === "pending" &&
          user?.role === "admin" && (
            <div className="mt-4">
              <Button
                onClick={() => {
                  if (window.confirm("Are you sure you want to post this journal entry? This action cannot be undone.")) {
                    postJournalEntry.mutate(existingEntry.id);
                  }
                }}
                className="w-full bg-green-500 hover:bg-green-600"
                disabled={postJournalEntry.isPending}
              >
                {postJournalEntry.isPending ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Posting...
                  </>
                ) : (
                  "Post Journal Entry"
                )}
              </Button>
            </div>
          )}

        {/* Void button placeholder - would need to be implemented with a proper void mutation */}
        {isEditing &&
          existingEntry?.status === "posted" &&
          user?.role === "admin" && (
            <div className="mt-4">
              <Button
                onClick={() => {
                  if (window.confirm("Are you sure you want to void this journal entry? This action cannot be undone.")) {
                    // Void logic would go here
                    alert("Void functionality to be implemented");
                  }
                }}
                variant="destructive"
                className="w-full"
              >
                Void Journal Entry
              </Button>
            </div>
          )}
      </form>
    </div>
  );
}

export default JournalEntryForm;