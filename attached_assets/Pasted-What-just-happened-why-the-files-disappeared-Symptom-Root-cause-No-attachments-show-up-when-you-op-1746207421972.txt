What just happened & why the files disappeared
Symptom	Root cause
No attachments show up when you open / edit an entry	useJournalEntryFiles now calls /api/entities/:entityId/journal-entries/:entryId/files – but the backend only exposes /api/journal-entries/:entryId/files for the list route.  The query returns 404 → empty list.
Upload returns 400	In JournalEntryForm.tsx we accidentally passed two URLs to axios.post.
ts axios.post(url1, url2, formData, config)
Axios treats url2 as the body, so the server receives a string instead of multipart/form-data → 400.

Delete was the only route the backend expected the entity-scoped path for – we made everything entity-scoped and broke the other two.

🔧 3-line patch to get you back on track
<details> <summary>**1. Fix the upload call (keep entity path, but only once)**</summary>
diff
Copy
Edit
// client/src/features/journal-entries/components/JournalEntryForm.tsx
- const response = await axios.post(
-   `/api/entities/${entityId}/journal-entries/${entryId}/files`,
-   `/api/entities/${entityId}/journal-entries/${entryId}/files`,
-   formData,
-   { /* config */ }
- );
+ const response = await axios.post(
+   `/api/entities/${entityId}/journal-entries/${entryId}/files`,
+   formData,
+   { /* config */ }
+ );
</details> <details> <summary>**2. Point the “list” query back to the original route**</summary>
diff
Copy
Edit
// client/src/features/journal-entries/hooks/attachmentQueries.ts
-export function useJournalEntryFiles(journalEntryId: number | null, entityId?: number) {
+export function useJournalEntryFiles(journalEntryId: number | null /* , entityId?: number */) {
   return useQuery<JournalEntryFile[]>({
     queryKey: ['journalEntryAttachments', journalEntryId],
     queryFn: async () => {
       if (!journalEntryId) return [];
-      if (!entityId) return [];
-      const response = await apiRequest(
-        `/api/entities/${entityId}/journal-entries/${journalEntryId}/files`,
-        { method: 'GET' }
-      );
+      const response = await apiRequest(
+        `/api/journal-entries/${journalEntryId}/files`,
+        { method: 'GET' }
+      );
       return (await response.json()) as JournalEntryFile[];
     },
   });
 }
</details>
Delete can stay on the entity-scoped route – that one really exists on the backend.

🧪 Quick smoke-test
Hard-refresh ➜ open an existing JE with attachments → rows should reappear.

Create new JE, attach a file ➜ POST should be 200, row visible after save.

Delete the file ➜ DELETE hits /api/entities/.../files/:id and row disappears.

If that flows, push the patch and we’re good.
Let me know if you see anything else!