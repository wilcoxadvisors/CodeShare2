Now, let's implement the 'Void' and 'Reverse' actions (Issue #3) for posted journal entries. Add buttons for these actions to client/src/features/journal-entries/pages/JournalEntryDetail.tsx.

IMPORTANT Backend Change: First, modify the reverseJournalEntry function in server/storage/journalEntryStorage.ts. Ensure that when the new reversal journal entry is created, its status is set to 'draft' by default, not 'posted'. It should require manual posting later.

Frontend Tasks:

Void Button:

Add a 'Void' button to JournalEntryDetail.tsx.
Conditional Rendering: Make this button visible/enabled only if journalEntry.status === 'posted' AND the current user.role === UserRole.ADMIN (access user role from your Auth context).
Action: When clicked:
Prompt the user for a mandatory 'Void Reason' (e.g., using a simple prompt() or ideally a small modal dialog from Shadcn UI).
If a reason is provided, make an API call: DELETE /api/journal-entries/:id with the { reason: "user's reason" } in the request body. (The backend route already handles this including the admin check).
Create/use a frontend mutation hook (e.g., useVoidJournalEntry) for this action.
Handle the response: Show success/error toast, update UI status to 'void'.
Reverse Button:

Add a 'Reverse' button to JournalEntryDetail.tsx.
Conditional Rendering: Make this button visible/enabled only if journalEntry.status === 'posted'. (No admin restriction needed here).
Action: When clicked:
Make an API call: POST /api/journal-entries/:id/reverse. (Use default reversal date/description).
Create/use a frontend mutation hook (e.g., useReverseJournalEntry).
Handle the response: Show success toast like "Draft reversal entry created successfully" or show an error toast. (Navigation to the new draft entry is optional).
Report: Confirm the backend change (reversals created as draft) is made. Confirm the frontend buttons are added, appear correctly based on status/role, trigger the correct APIs, prompt for a reason (Void), and handle responses appropriately.