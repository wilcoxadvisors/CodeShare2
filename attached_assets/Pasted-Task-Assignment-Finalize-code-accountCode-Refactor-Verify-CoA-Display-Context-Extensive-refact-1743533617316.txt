Task Assignment: Finalize code->accountCode Refactor & Verify CoA Display

Context:
Extensive refactoring has been done across the codebase (server/storage.ts, server/initDb.ts, server/aiDataService.ts, server/accountRoutes.ts, shared/validation.ts, client/src/pages/ChartOfAccounts.tsx) to rename the Chart of Accounts code field to accountCode. This task involves completing the final refactoring steps, verifying the code integrity, and then executing the necessary seeding and UI checks to confirm the original CoA data display bug is resolved. The investigation into unrelated uses of code confirmed this targeted refactoring is necessary.

Goal:

Fully complete the code to accountCode refactoring, ensuring code correctness via TypeScript compilation.
Verify the fix resolves the CoA data display issue by re-seeding data and checking the UI.
Part 1: Complete Refactoring & Code Verification

Instructions:

Action: Complete Refactoring in ChartOfAccounts.tsx:

Open client/src/pages/ChartOfAccounts.tsx.
Locate and update all remaining references to the old code property, ensuring consistent use of accountCode. Pay special attention to:
Export functionality logic.
Data sorting logic.
State variables (e.g., accountToDelete).
Event handlers (e.g., handleDeleteClick, handleCodeManualChange).
Form submission/validation logic.
Any other identified areas from your previous work (checkpoint e31795bb).
Action: Verify with TypeScript Compiler:

Once all edits in ChartOfAccounts.tsx are complete, run the TypeScript compiler check from the project root: npx tsc --noEmit
If errors occur: Analyze the compiler errors. Fix them in the relevant files (ChartOfAccounts.tsx or any other file indicated by tsc). Repeat this step until npx tsc --noEmit passes without any errors.
Verification (Part 1):

Confirm all relevant code references are updated to accountCode in ChartOfAccounts.tsx.
Confirm npx tsc --noEmit completes successfully.
Reporting (Part 1):

Report successful completion of refactoring in ChartOfAccounts.tsx.
Report the result of the npx tsc --noEmit check (must be successful).
State that you are now proceeding to Part 2.
Part 2: Re-Seed Data & Verify UI Display

Instructions:

Action: Re-Seed Existing Clients (Carefully!):

Ensure the scripts/seed-existing-clients-coa.ts script includes the safety check to only process clients with zero existing accounts (as per previous instructions).
Run the updated script from the project root: ./scripts/seed-existing-coa.sh
Monitor Output: Carefully observe and record the console logs.
Action: Verify Seeding for New Client via UI:

Restart the application if necessary (npm run dev).
Log in and use the UI to create a completely new test client via the full "Add Client" setup flow.
After setup completion, navigate directly to the Chart of Accounts page for this new client.
Verify: Does the standard CoA data appear correctly?
Action: Verify Data Display for Existing Client via UI:

Navigate to the Chart of Accounts page for an existing client that the seeding script should have processed (e.g., Client ID 1).
Verify: Does the standard CoA data appear correctly?
Verification (Part 2):

Confirm the manual seeding script ran (check logs for success/errors).
Confirm CoA data is visible in the UI for a newly created client.
Confirm CoA data is visible in the UI for an existing, re-seeded client.
Reporting (Part 2):

Provide the console output from running ./scripts/seed-existing-coa.sh.
Report PASS/FAIL for the New Client UI Verification (Step 4).
Report PASS/FAIL for the Existing Client UI Verification (Step 5).
If both UI verifications pass, confirm that the original "CoA data not displaying" bug is resolved and Task B.1 is fully complete.