Here are clear, explicit, and structured instructions you can directly provide to your agent to execute comprehensive, rigorous testing scripts covering both manual interactions and import scenarios for the **Chart of Accounts (CoA)** functionality.

---

# 🧪 **Comprehensive Testing Instructions for Agent:**

The goal is to explicitly verify that **every aspect of the Chart of Accounts functionality** (manual CRUD operations, import/export processes, UI behaviors) works correctly under all scenarios.

---

## 📌 **Testing Objectives (Explicitly Required):**

- **Validate CRUD operations:** Create, read, update, and delete/inactivate accounts manually.
- **Validate import operations:** New, modified, and missing accounts scenarios explicitly.
- **Verify hierarchical relationships:** Ensure parent/child structures are correctly established.
- **Verify subledger handling:** Explicitly confirm that accounts with subledger settings import correctly.
- **UI Consistency Checks:** Explicitly confirm the UI correctly displays active/inactive accounts and respects user selections.

---

## ✅ **Manual Account Operation Tests (Explicit):**

### 1. **Create Account (Manual)**  
- Explicitly create accounts with/without subledgers and parent relationships.
- Verify explicitly that created accounts appear correctly in the hierarchy and dropdown lists.

### 2. **Edit Account (Manual)**  
- Explicitly edit account name, type, subtype, subledger, and parent relationship.
- Confirm explicitly updates appear immediately and correctly.

### 3. **Delete/Inactivate Account (Manual)**  
- Explicitly delete/inactivate an account with no transactions; confirm it becomes inactive.
- Explicitly attempt deleting an account **with transactions**, confirming explicit failure (UI notification).

### 4. **Toggle Inactive Accounts View**  
- Explicitly test the toggle switch for showing/hiding inactive accounts.
- Confirm explicitly inactive accounts display greyed-out and correctly appear/disappear based on toggle state.

---

## 📑 **Import/Export Tests (Explicit Scenarios):**

### 1. **Import Scenario: No Selections**  
- Import file explicitly prepared with new, modified, missing accounts.
- Explicitly do **not** select any accounts on the preview dialog.
- Confirm explicitly **no changes** occur post-import.

### 2. **Import Scenario: Approve All**  
- Explicitly use "Select All" checkbox for new, modified, missing accounts.
- Verify explicitly all accounts are properly created/updated/deactivated post-import.

### 3. **Import Scenario: Selective Approval**  
- Explicitly select a subset of new, modified, and missing accounts.
- Verify explicitly only explicitly checked accounts process; unchecked explicitly ignored.

### 4. **Import Scenario: Hierarchical Accounts**  
- Explicitly import accounts with parent-child relationships.
- Explicitly verify hierarchy is accurately reflected post-import.

### 5. **Import Scenario: Circular/Self-Reference Detection**  
- Explicitly import test files:  
  - `circular-reference.csv` (A→B→A)  
  - `self-reference.csv` (A→A)
- Explicitly confirm that validation explicitly blocks these imports clearly notifying the user.

### 6. **Import Scenario: Missing Parent Handling**  
- Explicitly import file (`missing-parent.csv`) referencing nonexistent parent accounts.
- Confirm explicit rejection of affected rows, proper notifications displayed.

---

## 🧾 **Export Functionality Testing (Explicit):**

- Export explicitly after manual changes (add/edit/delete) and after each import scenario.
- Explicitly confirm exported file matches expected structure and data accurately.

---

## 🛠️ **Automated Script Testing (Explicitly Required):**

Implement scripts explicitly (e.g., Jest tests or Node.js scripts) to automate:

### Scripted Tests should explicitly include:

- **Import process tests** (explicitly verifying approval filtering logic).
- **Export correctness tests** (data accuracy explicitly verified post-import/manual operations).
- **Account CRUD API Tests** explicitly (create, read, update, delete operations).
- **Account hierarchy validations** explicitly (ensuring database state explicitly matches expectations after operations).

### Example explicit outline of test script (pseudo-structure):

```typescript
describe("CoA Import Tests", () => {
  test("Import with no selections explicitly results in no DB changes", async () => { });
  test("Import with full selections explicitly creates/updates/deletes correctly", async () => { });
  test("Import with selective selections explicitly handles accounts correctly", async () => { });
  test("Circular/self-reference explicitly rejected", async () => { });
  test("Missing parent explicitly handled correctly", async () => { });
});

describe("CoA Manual Tests", () => {
  test("Explicit account creation", async () => { });
  test("Explicit account editing", async () => { });
  test("Explicit account deletion/inactivation", async () => { });
  test("Toggle explicitly shows/hides inactive accounts", async () => { });
});

describe("CoA Export Tests", () => {
  test("Export explicitly matches DB state after manual/import operations", async () => { });
});
```

---

## 🔍 **Explicit Logging (Required for Debugging & Validation):**

- Explicitly ensure all key steps log clear information, for example:
```js
console.log("Explicit import test payload:", payload);
console.log("Explicit response:", response.data);
```

---

## 📋 **Explicit Final Verification Checklist:**

- [ ] Explicitly verify manual CRUD functionality.
- [ ] Explicitly verify import handling explicitly across all scenarios.
- [ ] Explicitly verify subledger and parent-child account handling.
- [ ] Explicitly verify explicit import/export data consistency.
- [ ] Explicitly verify UI explicitly reflects DB state after operations.

---

## 🎯 **Explicit Immediate Agent Action Steps:**

- Explicitly write and run automated testing scripts covering above scenarios.
- Explicitly log results and verify explicitly each scenario passes.
- Explicitly document test coverage and explicitly flag clearly any uncovered edge cases.

---

Executing these explicit testing steps rigorously ensures all aspects of the Chart of Accounts functionality are validated thoroughly. Let me know explicitly if further clarity or refinement is needed!