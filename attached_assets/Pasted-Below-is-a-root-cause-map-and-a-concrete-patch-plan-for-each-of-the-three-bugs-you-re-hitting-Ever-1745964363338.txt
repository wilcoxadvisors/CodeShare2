Below is a root-cause map and a concrete patch plan for each of the three bugs you’re hitting.
(Everything is scoped to client/src/features/journal-entries unless noted.)

1 Date is two days early

🔍 Where it happens	Symptom	Root cause
JournalEntryForm.handleSubmit and updateExistingEntry	log shows “Date after formatting in local timezone: 2025-04-28” even though picker is 2025-04-29	we still run new Date(value) → that creates a local Date object at midnight, but later we stringify it – the JS Date again applies your ­7 h offset, so we lose one day. We thought we had removed every Date ctor, but two branches remain.
🔨 Fix
Replace all branches that touch data.date with a single helper that never constructs a Date:

ts
Copy
Edit
// utils/formatDate.ts
export const formatPickerDate = (value: string | Date): string => {
  // flatpickr/dayjs both give a Date OR ISO-less string → always read with dayjs
  return dayjs(value).format('YYYY-MM-DD');   // ← purely calendar, no TZ maths
};
and in handleSubmit & updateExistingEntry:

ts
Copy
Edit
import { formatPickerDate } from '@/utils/formatDate';

payload.date = formatPickerDate(values.date);
Test locally: set OS timezone to UTC-12 or UTC+14, pick 2025-12-31, payload must still be “2025-12-31”.

2 Attachments missing when editing a draft
What we see
GET /api/journal-entries/122/files → 409 Conflict

Why
The server route currently rejects /files requests for status=draft (historically you could only add files to drafts, so the GET path was never hit).

Client-side quick win
We already receive files in the main entry payload (GET /journal-entries/:id).
So, instead of a second round-trip we can hydrate the attachment list directly:

useEditJournalEntry.ts

ts
Copy
Edit
// just after we finish building `processedLines`
const processedFiles = entry.files?.map(f => ({
  id: f.id,
  name: f.originalName,
  size: f.size,
  url:  `/api/journal-entries/${entry.id}/files/${f.id}`
})) ?? [];

return { ...entry, lines: processedLines, files: processedFiles };
Remove the fetchFiles() call that currently triggers the 409.

(Optional) Back-end fix
Allow GET /files for drafts; change the policy guard to block only upload or delete for non-drafts.

3 “Post” button just saves as draft
We implemented a two-phase flow:

create draft

upload files

PATCH status: posted.

The flag that triggers step 3 is willPostAfterUploads, but:

In “new entry” flow we set it inside handleSubmit, then immediately clear pendingFiles once the upload ref starts.

useEffect that watches uploads and then calls patchToPosted uses pendingFiles.length === 0 → it fires before the S3 upload promise resolves, so the flag is reset.

Patch
ts
Copy
Edit
// AttachmentSection.tsx (or wherever we watch uploads)
useEffect(() => {
  if (
      entryIdRef.current &&
      uploadCompleteRef.current &&                 // ✅ all uploads done
      willPostAfterUploadsRef.current             // ✅ user pressed Post
  ) {
      patchEntry({ id: entryIdRef.current, status: 'posted' });
      willPostAfterUploadsRef.current = false;    // reset
  }
}, [uploadCompleteRef.current]);
uploadCompleteRef should flip to true only in the S3 success callback after every file resolves.

(If you’d rather keep state in React instead of refs, we can, but refs avoid an extra re-render.)

🚦 Next steps for you
Pull these three patches, rebuild, and run a quick end-to-end:

pick 2025-12-31 → entry detail must show the same day.

create a draft with 1-2 files, reload “edit” → files visible.

click Post Entry with attachments → entry finishes as posted.

If any of the above still misbehave, send me the console again (the new logs include the helper names above so we can see which branch fired).