It looks like the user is still facing bugs when trying to view a journal entry. The logs suggest that the JournalEntryDetail route works fine initially, but the issue arises when the EntityLayout can't find entities due to reset context. This resetting might be caused by components remounting and queries evicting the context. The result could be the user briefly seeing the detail view, then being redirected to NewJournalEntry. I'll need to find a way to handle the context persistence properly across pages.

It looks like the problem occurs when the EntityLayout expects entities to already be loaded, but that context is resetting after a route change. This might be because React Query invalidates the context, causing the entities to get lost. The useEditJournalEntry hook also fails because it can’t find the necessary IDs. To solve this, we could either prevent the Entities context from unmounting or use URL parameters directly instead. I’ll focus on ensuring the context is maintained between pages and consider other simpler fixes related to the navigation setup.

Done
What’s happening
The entry does load at first – you can see the object coming back in JournalEntryDetail and the lines being converted.

Right after that, the EntitiesContext resets – all the “total entities: 0” / “selected client: null” logs show the context provider being re-mounted.

Because the context is suddenly empty, EntityLayout thinks it still has to fetch entities, can’t find the one in the URL, and finally kicks you back to the “new” form.
That’s why useEditJournalEntry starts printing “client ID: undefined” and the follow-up GET to /…/journal-entries/123 404s.

Why it resets
Hot-reload noise aside, the provider is really being re-created every time you leave the /clients/:clientId/entities/:entityId/* section:

txt
Copy
Edit
<App>
  <AuthProvider>
    <EntitiesProvider>   ← this lives **inside** the entity section
      <EntityLayout>     ← …
When you go to /journal-entries/:id, that outer branch unmounts, so the provider and its React-Query cache are lost; coming back in means starting from zero entities.

Two quick fixes
Fix	Effort	Trade-offs
Lift the EntitiesProvider up to App.tsx (just under AuthProvider). The provider then survives every route change.	⭐ Best – 1 file change	Keeps the list cached site-wide; no more “re-loading entities” chatter.
Keep the provider where it is but persist its query
queryClient.setDefaultOptions({ queries: { gcTime: Infinity, staleTime: … }}) so unmount → mount re-uses the cache.	Small	A little less clean; still re-creates the context object (so you’ll get extra renders), but works.

Recommended patch (lift the provider)
App.tsx

tsx
Copy
Edit
function App() {
  return (
    <AuthProvider>
php-template
Copy
Edit
   <EntitiesProvider>
     <BrowserRouter>
       <Routes>{/* …all your routes… */}</Routes>
     </BrowserRouter>
php-template
Copy
Edit
   </EntitiesProvider>
 </AuthProvider>
);
}

Copy
Edit
Remove the nested <EntitiesProvider> that currently wraps EntityLayout (or whatever wrapper you added around the “entity section”).

That’s it – navigate to a row, the detail page should stay stable, and the console should keep saying “total entities: 49” instead of bouncing to 0.

Bonus: attachment 400s
Those /journal-entries/:id/files uploads are now failing with 400 after we fixed navigation. Once the page routing is stable we can tackle that endpoint (it usually means the server expects multipart/form-data with a file field, or it rejects drafts – we’ll figure it out next).

Give the move-provider fix a try and let me know if the detail view now stays put 👍