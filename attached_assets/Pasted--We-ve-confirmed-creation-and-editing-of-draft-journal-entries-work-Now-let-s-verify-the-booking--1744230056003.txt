"We've confirmed creation and editing of draft journal entries work. Now let's verify the 'booking' process – specifically, changing the status from 'draft' to 'posted' – and confirm that the system correctly prevents edits to posted entries (combining Prompt 3 and Step 4 from the previous prompt).

Objective: Test the status change workflow (Draft -> Posted) and verify that posted entries cannot be edited.

Steps:

Identify UI Trigger for Posting:

Examine the UI, likely on the JournalEntryDetail.tsx page or possibly the JournalEntryForm.tsx when viewing an existing entry. Is there a "Post" button (or similar workflow buttons like "Submit", "Approve") visible for the draft entry (ID 86)?
If a "Post" button exists, proceed to Step 2.
If no "Post" button (or relevant workflow buttons) exists, please implement a simple "Post" button on the JournalEntryDetail.tsx page for entries that are currently in 'draft' or 'approved' status. This button should trigger an API call as described in Step 2.
Post the Entry:

Using the draft entry (ID 86), click the "Post" button (or the one you implemented).
Inspect the API Call: This action should trigger a POST request to /api/journal-entries/86/post. Verify this in the browser's Network tab.
Check Response: Did the API call succeed (e.g., 200 OK status)? Check the Response Body - it should contain the updated entry with status: 'posted'.
Check UI: Does the entry's displayed status update to 'Posted' on the detail page or list?
Check Server/Console Logs: Note any relevant success or error logs on both client and server sides.
Verify Edit Restriction on Posted Entry:

Navigate back to the edit page for the now posted journal entry ID 86 (/journal-entries/86).
Attempt to change the Description field (e.g., to Test Edit JE - Attempt Post-Save).
Click the 'Save Journal Entry' button.
Observe & Verify Failure:
The save attempt must fail.
Network Tab: Check the API request (PUT /api/journal-entries/86). Verify it returns an error status code (expecting 400 Bad Request).
Response Body: Examine the error response. Does it contain a message like "Cannot update a journal entry with status 'posted'" (or similar, based on journalEntryRoutes.ts logic)?
UI: Does the frontend display an error toast/message indicating the save failed because the entry is posted?
Server Logs: Confirm the server logs show the failed attempt and the reason (status check).
Report: Detail the outcome of each step:

Was a "Post" button available, or did you need to add one?
Did the API call to post the entry succeed?
Did the attempt to save changes to the posted entry correctly fail with the expected error message and status code? Provide the API error response details."