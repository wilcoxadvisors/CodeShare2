The final task for the Journal Entry UI fixes is to implement the ability to attach supporting documents (Issue #7).

Requirements:

Allow uploading multiple files at once.
Preferably use a drag-and-drop UI, but a standard multi-select file input is acceptable.
Allow users to delete previously uploaded attachments.
Restrict allowed file types to: PDF, JPG, JPEG, PNG, GIF, DOC, DOCX, XLS, XLSX, TXT, CSV.
Objective: Implement backend API/storage and frontend UI for multi-file attachments with type restrictions and delete functionality.

Backend Tasks:

Storage Logic (server/storage/journalEntryStorage.ts):

Implement createJournalEntryFile: Handle file storage (saving to disk/cloud, storing path/ID) and insert metadata into journalEntryFiles table.
Implement getJournalEntryFiles: Query and return file records for a specific journalEntryId.
Implement deleteJournalEntryFile (New): Add a function to delete a file record from the database and delete the actual file from storage (disk/cloud). It should take a fileId as input.
API Routes (server/journalEntryRoutes.ts):

Create POST /api/journal-entries/:id/files:
Use multer configured for multiple files (upload.array('attachments', 10) - allows up to 10 files per request, field name 'attachments').
Implement a fileFilter function within the multer options to restrict allowed file types based on extension or MIME type (allow: pdf, jpg, jpeg, png, gif, doc, docx, xls, xlsx, txt, csv). Reject other types.
Handle req.files (which will be an array). Iterate through the uploaded files, call journalEntryStorage.createJournalEntryFile for each valid one.
Return an array of the created file records.
Create GET /api/journal-entries/:id/files:
Call journalEntryStorage.getJournalEntryFiles and return the list.
Create DELETE /api/journal-entry-files/:fileId: (Use a separate route for file deletion for clarity).
Extract fileId.
Call journalEntryStorage.deleteJournalEntryFile.
Return success (e.g., 204 No Content) or error.
(Optional/Advanced) Implement secure file download endpoint if needed.
Frontend Tasks:

UI Elements (JournalEntryForm.tsx or JournalEntryDetail.tsx):

Add a section to display attached files (e.g., a list with filenames and a "Delete" button next to each).
Add a drag-and-drop zone (preferred) or a multi-select file input button for uploading. Implement visual feedback for dragging files over the zone.
Upload Logic:

Handle file selection (multiple files) or drag-drop events.
Filter selected files client-side before upload to match the allowed types (optional but good UX).
Use FormData to append multiple files under the field name 'attachments'.
Create/use a mutation hook (useUploadAttachments) to call POST /api/journal-entries/:id/files.
Handle loading states, success (refresh file list), and errors (show toast, e.g., for disallowed file types if not caught client-side).
Display & Delete Logic:

Create/use a query hook (useGetAttachments) to call GET /api/journal-entries/:id/files and display the list.
Implement the "Delete" button action for each file:
Create/use a mutation hook (useDeleteAttachment).
Call DELETE /api/journal-entry-files/:fileId.
Handle success (refresh file list) and error responses.
Report: Confirm implementation of backend (storage functions, API routes with multer multi-file handling and type filter), frontend (drag-drop/upload UI, file list, delete buttons), and hooks/logic for upload, display, and delete.