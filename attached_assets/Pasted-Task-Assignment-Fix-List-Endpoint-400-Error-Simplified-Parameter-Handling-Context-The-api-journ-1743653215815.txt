Task Assignment: Fix List Endpoint 400 Error (Simplified Parameter Handling)

Context: The api-journal-entries.js test script consistently fails with a 400 Bad Request error when testing the List endpoint (GET /api/clients/:clientId/journal-entries). Attempts to fix this by adjusting Zod schemas were unsuccessful. We will now simplify the route handler by removing Zod query validation and implementing manual parsing to diagnose the issue.

Goal: Modify the GET List route handler to use manual parsing and validation for query parameters, ensuring the test script can successfully execute this step.

Instructions:

Action: Simplify List Route Handler (server/journalEntryRoutes.ts):

Open CodeShare/server/journalEntryRoutes.ts.
Locate the GET /api/clients/:clientId/journal-entries route handler.
REMOVE or COMMENT OUT any code within the try block that uses a Zod schema (e.g., listJournalEntriesFiltersSchema.parse(req.query) or similar) to validate req.query.
IMPLEMENT (or ensure existing code matches) the following manual parsing and validation logic inside the try block, before calling storage.listJournalEntries:
TypeScript

console.log('Raw Query Params:', req.query); // Log raw query params

const { startDate: startDateStr, endDate: endDateStr, accountId: accountIdStr, entityId: entityIdStr, locationId: locationIdStr, descriptionText, minAmount: minAmountStr, maxAmount: maxAmountStr } = req.query;

const filters: storage.ListJournalEntriesFilters = {};
const errors: string[] = [];

// Parse/Validate Dates (Using date-fns)
if (startDateStr && typeof startDateStr === 'string') {
    const parsedDate = parse(startDateStr, 'yyyy-MM-dd', new Date());
    if (isValid(parsedDate)) {
         filters.startDate = parsedDate;
    } else {
         errors.push(`Invalid start date format: ${startDateStr}. Use YYYY-MM-DD.`);
    }
}
if (endDateStr && typeof endDateStr === 'string') {
    const parsedDate = parse(endDateStr, 'yyyy-MM-dd', new Date());
     if (isValid(parsedDate)) {
         filters.endDate = parsedDate;
     } else {
         errors.push(`Invalid end date format: ${endDateStr}. Use YYYY-MM-DD.`);
     }
}

// Parse/Validate Integers
if (accountIdStr && typeof accountIdStr === 'string') {
    const parsedId = parseInt(accountIdStr, 10);
    if (!isNaN(parsedId) && parsedId > 0) filters.accountId = parsedId;
    else errors.push(`Invalid account ID format: ${accountIdStr}. Must be a positive integer.`);
}
// Repeat similar parsing/validation for entityIdStr and locationIdStr...
 if (entityIdStr && typeof entityIdStr === 'string') {
    const parsedId = parseInt(entityIdStr, 10);
    if (!isNaN(parsedId) && parsedId > 0) filters.entityId = parsedId;
    else errors.push(`Invalid entity ID format: ${entityIdStr}. Must be a positive integer.`);
}
if (locationIdStr && typeof locationIdStr === 'string') {
    const parsedId = parseInt(locationIdStr, 10);
    if (!isNaN(parsedId) && parsedId > 0) filters.locationId = parsedId;
    else errors.push(`Invalid location ID format: ${locationIdStr}. Must be a positive integer.`);
}


// Use string filter directly (add length validation if needed)
if (descriptionText && typeof descriptionText === 'string') {
    filters.descriptionText = descriptionText;
}

// Parse/Validate Floats
if (minAmountStr && typeof minAmountStr === 'string') {
    const parsedAmount = parseFloat(minAmountStr);
    if (!isNaN(parsedAmount)) filters.minAmount = parsedAmount;
    else errors.push(`Invalid minimum amount format: ${minAmountStr}. Must be a number.`);
}
if (maxAmountStr && typeof maxAmountStr === 'string') {
    const parsedAmount = parseFloat(maxAmountStr);
     if (!isNaN(parsedAmount)) filters.maxAmount = parsedAmount;
    else errors.push(`Invalid maximum amount format: ${maxAmountStr}. Must be a number.`);
}

// If any parsing errors occurred, return 400
if (errors.length > 0) {
    console.warn(`List JE validation failed for client ${req.clientId}:`, errors);
    return res.status(400).json({ message: 'Invalid filter parameters', errors });
}

// Log the filters object *before* calling storage
console.log(`Filters passed to storage for client ${req.clientId}:`, JSON.stringify(filters));

// Ensure the call to storage uses the manually built 'filters' object
const entries = await storage.listJournalEntries(req.clientId!, filters); // Use req.clientId!
res.status(200).json(entries);

// Ensure the rest of the try...catch block is present and correct
Action: Restart and Test:

Restart the application server (npm run dev).
Execute the test script: cd test && node api-journal-entries.js.
Verification:

The Zod validation for req.query is removed/commented out in the GET List route handler.
Manual parsing and validation logic for query parameters (dates, integers, floats) is implemented in the GET List route handler.
The test script api-journal-entries.js now successfully executes the "List Journal Entries" step without a 400 Bad Request error. (It might still fail on later steps, like the "no lines" error).
Reporting:

Confirm that Zod validation on req.query was removed and manual parsing/validation was implemented in the GET List route handler.
Report the full output of the node api-journal-entries.js execution. State clearly whether the List Journal Entries test step now passes (returns 200 OK). Provide any new errors if the script still fails.

Sources and related content
