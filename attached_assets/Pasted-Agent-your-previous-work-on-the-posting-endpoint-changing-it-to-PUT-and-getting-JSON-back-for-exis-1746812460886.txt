Agent, your previous work on the posting endpoint (changing it to PUT and getting JSON back for existing drafts) and the server-side calculation for JE list totals shows progress. However, the application is still unstable. We will continue to defer "Dimensions & Smart Rules."

Your IMMEDIATE and ABSOLUTE TOP PRIORITY is User Issue #1: "Still have to reload for entities to show up."
The console logs showing initial 401s for /api/entities (even sometimes after login appears successful in logs, before a reload) clearly point to an authentication/authorization issue with the initial data fetch.

Action - Auth & EntityContext Initialization:
client/src/contexts/AuthContext.tsx:
When the login function successfully authenticates the user and setUser(userData.user) is called:
Immediately ensure queryClient.invalidateQueries({ queryKey: ['/api/entities'] }) is called. Also, consider invalidating ['/api/clients'] if that's a separate query affecting the selectors.
Add this log: console.log('ARCHITECT_DEBUG_AUTH_CTX: Login success. User set. Invalidated /api/entities and /api/clients. User:', userData.user);
client/src/contexts/EntityContext.tsx:
In the useQuery for ['/api/entities']:
Its enabled option must be !!user && !isAuthLoading (where user and isAuthLoading are from useAuth()). Add log: console.log('ARCHITECT_DEBUG_ENTITY_CTX_QUERY: Check enabled. UserExists=', !!user, 'AuthNotLoading=', !isAuthLoading, 'QueryEnabled=', !!user && !isAuthLoading);
The queryFn must use credentials: 'include' for Workspace if using cookies for auth.
In the onSuccess or data handling for this query:
Log: console.log('ARCHITECT_DEBUG_ENTITY_CTX_QUERY_SUCCESS: Fetched entities raw data:', entitiesData);
Ensure setAllEntities(entitiesData || []); and setInitialLoadComplete(true); are only called on a genuine success (e.g., 200 OK and data is an array).
Log the state: console.log('ARCHITECT_DEBUG_ENTITY_CTX_STATE_POST_FETCH: allEntities.length=', (allEntitiesRef.current || []).length, 'initialLoadComplete=', initialLoadCompleteRef.current);
Test this specific flow: Log out, clear application state (cache/local storage if necessary), log back in, and provide the complete console log sequence from application start through login to the point where entities should be loaded and displayed in the selector without a page reload. We need to see these ARCHITECT_DEBUG logs.
Once Issue #1 is VERIFIABLY FIXED (entities load and selectors populate without reload after login):

Second Priority - JE Creation & Posting Workflow (User Issues #4 & #5 from latest list):

Creating New JEs (User Issue #4: "When creating a new entry I get a error and a entry with no data posts.")
Action: Refactor JournalEntryForm.tsx's handleSubmit for new entries (!existingEntry):
Step 1 (Client-Side): Always create the JE with status: "draft". The payload to createJournalEntry.mutate should enforce this. This should resolve server validation errors like "Cannot add line to journal entry with status posted."
Step 2 (Client-Side): If attachments were added, after successful draft creation (you get the new JE ID), then trigger file uploads to this new JE ID.
Step 3 (Client-Side): If the user's intent was to "Create and Post" (i.e., saveAsDraft was false), and Step 1 (and Step 2 if files were present) were successful, then make a separate call to postJournalEntry.mutate({ id: newEntryId, clientId: ..., entityId: ... }) to update the status of the newly created draft to "posted".
The server errors like duplicate reference or unbalanced lines are valid business logic checks; the UI should display these errors clearly to the user if they occur.
Posting Existing Draft JEs (User Issue #5: "get an error for posting a je: Says client ID and entity id required to post je.")
Action: In JournalEntryDetail.tsx (or the component with the "Post" button for existing drafts), when calling postJournalEntry.mutate, you recently added code to pass { id, clientId, entityId }. Add very precise logs just before this call to ensure id, clientId, and entityId are all defined and have correct values. console.log('ARCHITECT_DEBUG_POST_PARAMS:', { id, clientId, entityId });. The error suggests one of these is still missing in some path.
Addressing Other Critical Issues (After the above are stable):

JE ID Changing (User Issue #3):
Action: First, please ask the Creator/Owner to clarify if "Journal ID" refers to the internal database id (e.g., 143, 149) or the formatted reference string (e.g., JE-2025-xxxx). This is crucial.
If it's the database id, implement the detailed logging I specified in the previous turn (ID on form load, ID in PUT payload, ID in PUT response).
If it's the reference string changing unexpectedly during an edit, this is a client-side state bug in JournalEntryForm.tsx. The backend should generate the "####" sequence part of JE-YYYY-#### on creation to ensure uniqueness per year/entity. It should not typically change on edit unless explicitly edited by the user. The "9999 entries a year" is a valid concern about the robustness of this sequence generation; the backend should handle more.
Attachment Deletion (User Issue #2 from latest list):
Action: Provide the network trace (request headers/body, response headers/body, status code) for a DELETE attempt and related console logs.
Attachment Upload 400 / UI (User Issue #3 from latest list "New attachments uploaded in draft are not viewable or removable"):
Action: Provide the full JSON error response body for the 400 Bad Request when uploading to an existing JE. For newly uploaded attachments not being viewable, this is a UI refresh issue. After a successful upload, the attachment list query for that JE must be invalidated.
Agent, let's be methodical. Focus entirely on the Authentication & Initial Entity Loading first. Provide the logs for that specific flow. Do not attempt to address other issues until that critical piece is confirmed working by me.