Agent Instructions: Diagnose Backend 500 Error During UI Update Simulation

CRITICAL ISSUE: User encountered an "Internal Server Error" (HTTP 500) when saving an edited entity via the UI in Step 2. Your direct API tests did not reproduce this, so the error likely depends on the context/payload from the frontend component.

Goal: Use the detailed backend logging (added in Checkpoint 44faa52d) to identify the specific cause of the 500 error in the PUT /api/admin/entities/:entityId request handler or the storage.updateEntity method when triggered by the UI simulation.

Relevant Files:

server/adminRoutes.ts (Contains the PUT /api/admin/entities/:entityId route handler with logging)
server/storage.ts (Contains the updateEntity database logic with logging)
Debugging Steps:

Authenticate & Reproduce Error:
Action: Authenticate programmatically (admin / password123).
Action: Simulate the UI flow again: Dashboard -> Add Client -> Step 1 -> Step 2 -> Add Entity -> Edit Entity -> Change Field -> Click "Save Changes".
Action: Monitor the Backend Console closely during the "Save Changes" action that triggers the PUT request.
Capture & Analyze Backend Logs:
Action: Copy ALL logs from the Backend Console that appear during the failing PUT request which results in the 500 error.
Action: Look specifically for the "DEBUG:" logs within the route handler and storage.updateEntity.
Action: Pinpoint where the execution stops or the specific error message (from Node.js, Drizzle, DB driver, etc.) that is logged just before the 500 response is sent.
Report Findings:
Action: Provide the specific backend error message.
Action: Include the sequence of relevant "DEBUG:" logs from the backend console leading up to the error.
Implement Backend Fix:
Action: Based on the actual backend error identified in Step 3, implement the fix in server/adminRoutes.ts or server/storage.ts.
Verify Fix:
Action: Restart the application.
Action: Repeat the UI simulation test (Authenticate -> Setup Flow -> Add Entity -> Edit Entity -> Save Changes).
Action: Confirm the PUT request now succeeds (Status 200 OK) without backend errors. Check backend logs. Report success.
Secondary Task (After 500 Error Fixed): Once the 500 error during UI update is resolved and verified, the next step will be to fix the separate backend bug you found where industry is saved as null during entity creation.