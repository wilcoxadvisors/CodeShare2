Architect's Mission: Implement react-hook-form
Phase 2: State Management & Validation Overhaul

1. Goal:

Refactor the entire JournalEntryForm and its child components (JournalEntryHeader, JournalEntryLinesTable) to use the react-hook-form library for all form state management and validation. This will replace the current system of multiple useState hooks and manual validation logic.

2. Definitive Plan:

This refactoring will be done in four stages.

Stage 1: Installation and Form Initialization

Install Dependencies: First, ensure the necessary packages are installed:

Bash

npm install react-hook-form @hookform/resolvers
Initialize useForm: In client/src/features/journal-entries/components/JournalEntryForm.tsx, import useForm and zodResolver. Initialize the form hook at the top of the component. We will connect it to our existing Zod schema from shared/validation.ts.

TypeScript

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { createJournalEntrySchema } from "@shared/validation"; // Or an equivalent schema

// ... inside the JournalEntryForm component
const form = useForm({
  resolver: zodResolver(createJournalEntrySchema),
  defaultValues: {
    // Populate with existingEntry data or new entry defaults
    description: existingEntry?.description || "",
    date: existingEntry?.date ?? getTodayYMD(),
    // ... other header fields
    lines: existingEntry?.lines || [
      { accountId: "", entityCode: defaultEntityCode, description: "", debit: "", credit: "", tags: [] },
      { accountId: "", entityCode: defaultEntityCode, description: "", debit: "", credit: "", tags: [] }
    ]
  }
});
Stage 2: Connect Child Components

Refactor Props: The props passed to JournalEntryHeader and JournalEntryLinesTable must change. Instead of passing many individual state values and setters (journalData, setJournalData, lines, setLines), you will now pass down the control object and the formState.errors object from the form instance.
Wrap Inputs with <FormField>: Inside JournalEntryHeader and JournalEntryLinesTable, every input (<Input>, <Select>, etc.) must be wrapped in a <FormField> component from react-hook-form. This is how the library controls the component's state.
Stage 3: Manage the Lines Array

Implement useFieldArray: In JournalEntryForm.tsx, use the useFieldArray hook to manage the dynamic list of journal entry lines.
TypeScript

import { useFieldArray } from "react-hook-form";

// ... inside the JournalEntryForm component
const { fields, append, remove } = useFieldArray({
  control: form.control,
  name: "lines"
});
Update JournalEntryLinesTable:
Pass fields, append, remove, and control down as props.
The component will now map over the fields array from the hook instead of the lines state array.
Each input inside the table row will be a controlled component registered to react-hook-form with a dynamic name, like name={\lines.${index}.accountId`} `.
Stage 4: Simplify Submission Logic

Replace handleSubmit: The existing manual handleSubmit function in JournalEntryForm.tsx will be removed.
Create an onSubmit Function: Create a new function, function onSubmit(values) { ... }. This function will receive the fully validated form data as its values argument. All the logic for calling the createEntry.mutate or updateEntry.mutate mutations will be moved inside this new function.
Connect to the Form: Wrap the entire form's JSX in a <form> tag and pass the new onSubmit handler to the form.handleSubmit function.
HTML

<form onSubmit={form.handleSubmit(onSubmit)}>
  {/* All form components (Header, LinesTable, Buttons) go here */}
</form>
3. Expected Outcome:

The JournalEntryForm and its children will be dramatically simplified, with almost all manual useState and useEffect hooks related to form data removed.
All validation will be handled automatically by the Zod resolver, making the code cleaner and more reliable.
The application will be more performant due to the optimized re-rendering strategy of react-hook-form.
From the user's perspective, the functionality will be identical, but the form will feel more responsive and robust.
This is a significant architectural upgrade. Please proceed.