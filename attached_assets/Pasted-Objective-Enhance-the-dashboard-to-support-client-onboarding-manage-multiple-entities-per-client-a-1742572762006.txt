Objective
Enhance the dashboard to support client onboarding, manage multiple entities per client, and handle consolidations, integrating seamlessly with the existing Wilcox Advisors codebase.

Key Requirements
Client Onboarding: Collect client and entity information, supporting multiple entities.
Entity Management: Enable clients to add, view, and manage entities.
Consolidation Setup: Allow clients to define consolidation groups and rules.
User Access Management: Control user access to entities.
Dashboard Integration: Display entity-specific and consolidated data with management options.
Implementation Steps
1. Client Onboarding Form
Component: Create ClientOnboardingForm.tsx in client/src/components/form/.
Functionality:
Collect client details: name, contact info (email, phone, address), industry, sub-industry, preferred language, timezone, data consent.
Allow adding multiple entities, collecting for each: name, code, fiscal year dates, tax ID, address, industry, currency, timezone, business type, publicly traded status, stock symbol.
Integration:
Use existing FormContainer.tsx and FormField.tsx for form structure.
On submission, create client user and entities in users and entities tables via insertUserSchema and insertEntitySchema.
Call POST /api/onboarding (see step 7).
2. Entity Management
Component: Enhance EntitySelector.tsx in client/src/components/ to support adding entities.
New Component: Create EntityForm.tsx in client/src/components/form/ for adding/editing entity details.
Functionality:
Enable adding/editing entities with all details from onboarding.
Integration:
Use insertEntitySchema for validation.
Update entities table via POST /api/entities or PUT /api/entities/:id (see step 7).
Link from ClientDashboard.jsx.
3. Consolidation Setup
Component: Create ConsolidationSetup.tsx in client/src/components/.
Functionality:
Define consolidation groups by selecting entities (via EntitySelector.tsx).
Set rules (e.g., intercompany eliminations), currency, and period.
Database:
Add consolidation_groups table: id (serial), name (text), entities (integer[]), currency (text), period (text), rules (json).
Integration:
Store configurations in consolidation_groups via POST /api/consolidations (see step 7).
Link from ClientDashboard.jsx.
4. User Access Management
Component: Create UserAccessManager.tsx in client/src/components/.
Functionality:
Assign users to entities with access levels (read, write, admin).
Integration:
Use userEntityAccess table.
Update via POST /api/user-access (see step 7).
Accessible from AdminDashboard.jsx.
5. Dashboard Enhancements
Component: Modify ClientDashboard.jsx in client/src/components/dashboard/.
Functionality:
Display entities user has access to (from userEntityAccess).
Show key metrics per entity (e.g., from accounts) and consolidated metrics (from consolidation_groups).
Add buttons/links to:
Add entities (EntityForm.tsx).
Manage consolidations (ConsolidationSetup.tsx).
Integration:
Use EntitySelector.tsx for entity switching.
Fetch data via existing API routes or new endpoints (see step 7).
Reuse FinancialOverview.jsx for metrics.
6. Database Schema Adjustments
Existing Tables:
Verify entities includes: businessType, publiclyTraded, stockSymbol.
New Tables:
consolidation_groups (as defined in step 3).
Integration:
Update shared/schema.ts with new table and fields.
7. API Endpoints
New Endpoints (in server/routes/):
POST /api/onboarding: Create client and entities.
POST /api/entities: Add entity.
PUT /api/entities/:id: Update entity.
POST /api/consolidations: Create consolidation group.
PUT /api/consolidations/:id: Update consolidation group.
POST /api/user-access: Assign user access.
Integration:
Use storage.ts for database operations.
Validate inputs with insertEntitySchema and new schemas in shared/validation.ts.
8. Integration with Existing Code
Contexts:
Use AuthContext.tsx for user auth.
Use EntityContext.tsx for entity state.
Components:
Reuse FormContainer.tsx, FormField.tsx, FormNavigation.tsx.
Follow Radix UI design system.
Avoid Duplication:
Extend existing routes (e.g., entities.ts) rather than creating new files unnecessarily.
Use shared utilities in client/src/utils/ and shared/validation.ts.
9. Testing
Unit Tests:
Test ClientOnboardingForm.tsx, ConsolidationSetup.tsx, etc.
Test new API endpoints.
Integration Tests:
Verify onboarding creates users/entities.
Ensure consolidations aggregate data correctly.
Tools:
Use @testing-library/react from package.json.
10. Documentation
Update Guides:
Add onboarding and entity management instructions in project docs.
Document consolidation setup.
In-App Help:
Enhance HelpCenter.jsx with dashboard usage guides.
Additional Considerations
Security: Restrict entity access via userEntityAccess checks in API routes.
Performance: Optimize queries for multiple entities (e.g., batch fetching).
Scalability: Ensure consolidation logic handles large datasets.
User Experience: Design onboarding with clear steps and validation feedback.
Summary
This outline provides a step-by-step plan to enhance the dashboard for client onboarding, multi-entity support, and consolidations. It leverages existing components, contexts, and database tables while introducing necessary new features. By following these instructions, the LLM agent can implement a functional solution that integrates with the Wilcox Advisors codebase without duplication or disruption.