Agent Instructions: Create Script to Seed CoA for Existing Clients

Goal: Create a script that identifies existing clients without a Chart of Accounts and seeds the standard CoA template (standardCoaTemplate) for them.

Relevant Files:

Create: scripts/seed-existing-clients-coa.ts
server/storage.ts (Contains seedClientCoA logic or can be referenced)
server/coaTemplate.ts (Contains the standardCoaTemplate definition)
shared/schema.ts (Definitions for clients and accounts tables)
server/db.ts (For database connection)
package.json (To add run script)
Implementation Steps:

Create Script File:

Action: Create a new file named scripts/seed-existing-clients-coa.ts.
Implement Script Logic:

Action: Write the TypeScript code for the script. It should perform the following:
Imports: Import necessary Drizzle functions (db, eq, isNull, potentially sql), schema objects (clients, accounts), the standardCoaTemplate from server/coaTemplate.ts, and potentially the storage instance or its relevant methods if reusing seedClientCoA. Direct DB logic might be safer here.
Find Eligible Clients: Write a query to find all clientIds from the clients table that do not currently have any associated records in the accounts table.
TypeScript

// Example using Drizzle (adjust as needed)
import { db } from '../server/db'; // Adjust path
import { clients, accounts } from '../shared/schema'; // Adjust path
import { eq, isNull } from 'drizzle-orm';
// ... other imports

async function findClientsWithoutCoA(): Promise<number[]> {
  const result = await db.selectDistinct({ id: clients.id })
    .from(clients)
    .leftJoin(accounts, eq(accounts.clientId, clients.id))
    .where(isNull(accounts.id)); // Find clients where the join finds no matching account
  return result.map(row => row.id);
}
Implement Seeding Logic (Adapt from storage.seedClientCoA): Create a function within the script async function seedCoAForClient(clientId: number) that replicates the logic previously added to DbStorage.seedClientCoA. This involves:
Taking clientId as input.
Using a transaction db.transaction(async (tx) => { ... });.
Using a Map (codeToIdMap) to track inserted account IDs within the transaction.
Looping through standardCoaTemplate.
Resolving parentCode to parentId using the codeToIdMap.
Inserting each account using tx.insert(accounts).values(...) linked to the clientId and resolved parentId.
Storing the new account ID in the map.
Main Script Flow:
Call findClientsWithoutCoA() to get the list of IDs.
Log the number of clients found that need seeding.
Loop through the clientIdsToSeed array.
Inside the loop, call await seedCoAForClient(clientId); for each ID. Include detailed logging (e.g., "Starting seed for client X...", "Completed seed for client X").
Add try/catch blocks for error handling during seeding individual clients.
Add final summary logging (e.g., "Finished seeding process. Seeded Y clients.").
Ensure the script exits gracefully (process.exit(0) on success, process.exit(1) on major failure).
Add package.json Script:

Action: Open package.json.
Action: Add a new script under "scripts" to make running this easier:
JSON

"db:seed-existing-coa": "tsx scripts/seed-existing-clients-coa.ts"
(Ensure tsx is installed or use ts-node if that's standard in the project).
Verification Plan (For Later Manual Execution):

Action: Report that the script scripts/seed-existing-clients-coa.ts has been created and the package.json script db:seed-existing-coa is available.
Action: State clearly: "This script is intended for manual execution by an administrator when needed. It should not be run automatically now."
Action: Describe how it would be run (npm run db:seed-existing-coa) and verified (checking accounts for a previously existing client via API or DB query).