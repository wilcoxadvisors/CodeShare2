Task Assignment: Finalize Cleanup of Consolidation Logic in storage.ts & Verify

Context: The previous refactoring step moved Consolidation Group logic to consolidationStorage.ts but may have left behind method implementations (delegating calls), interface definitions, properties, or imports in the original server/storage.ts. We need to ensure storage.ts is completely cleaned of this moved logic.

Goal: Remove all remaining Consolidation Group related definitions, implementations, properties, and imports from server/storage.ts and verify functionality with tests.

Instructions:

Action: Open server/storage.ts:

Ensure you are working with the file CodeShare/server/storage.ts.
Action: Remove from IStorage Interface:

Carefully review the IStorage interface definition.
DELETE any remaining method signatures related to Consolidation Groups. This includes (but may not be limited to):
getConsolidationGroup(...)
getConsolidationGroups(...)
getConsolidationGroupsByEntity(...)
createConsolidationGroup(...)
updateConsolidationGroup(...)
deleteConsolidationGroup(...)
addEntityToConsolidationGroup(...)
removeEntityFromConsolidationGroup(...)
generateConsolidatedReport(...)
Action: Remove from DatabaseStorage Class:

Locate the DatabaseStorage class implementation.
DELETE the entire method bodies (from async methodName(...) { to the closing }) for all Consolidation Group methods corresponding to the signatures listed in Step 2.
DELETE any private helper methods used only by the Consolidation Group logic (e.g., consolidateBalanceSheets, consolidateIncomeStatements, consolidateCashFlows, consolidateTrialBalances).
Action: Remove from MemStorage Class:

Locate the MemStorage class implementation.
DELETE the entire method bodies for all Consolidation Group methods corresponding to the signatures listed in Step 2.
DELETE any class member properties used only for storing Consolidation Group data in memory (e.g., private consolidationGroups: Map<...>;, private consolidationGroupEntitiesMap: Map<...>;).
REMOVE the initialization of these properties from the MemStorage constructor.
Action: Clean Up Imports:

Review the import statements at the top of server/storage.ts.
REMOVE any imported types or functions related only to Consolidation Groups (e.g., ConsolidationGroup, consolidationGroups, consolidationGroupEntities schema types) that are no longer used anywhere else in the storage.ts file after the removals in previous steps. Do not remove imports still needed by other remaining storage methods (e.g., db, base schema types).
Action: Verify Application Startup & Run Tests:

Restart the application server (npm run dev). Confirm it starts without errors.
Run the verification tests again to ensure nothing was broken:
cd test && node api-journal-entries.js
cd test && node batch-upload-test.js
cd test/consolidation && npx tsx test-consolidation-groups.ts (or equivalent consolidation test command)
Verification:

The IStorage interface in storage.ts no longer contains Consolidation Group method signatures.
The DatabaseStorage and MemStorage classes in storage.ts no longer contain implementations or helper methods for Consolidation Groups.
MemStorage no longer contains properties or constructor initializations for Consolidation Groups.
Unused Consolidation Group related imports are removed from storage.ts.
Server starts successfully.
All specified test scripts pass successfully.
Reporting:

Confirm that all Consolidation Group logic (interface, implementations, properties, imports) has been removed from server/storage.ts.
Report PASS/FAIL for server startup.
Report PASS/FAIL status for each test script execution. Provide errors if any tests fail.
State readiness to refactor the next domain.