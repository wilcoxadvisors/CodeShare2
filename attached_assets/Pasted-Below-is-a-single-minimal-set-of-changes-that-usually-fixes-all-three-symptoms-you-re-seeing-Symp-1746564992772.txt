Below is a single, minimal set of changes that usually fixes all three symptoms you’re seeing:

Symptom	Root cause in code	One-line (or two-line) fix
Debit / Credit columns stay blank	In JournalEntryDetail.tsx and JournalEntryForm.tsx we compute debitValue / creditValue, but the <TableCell> is still rendering the raw line.debit / line.credit.	tsx // before <TableCell>{line.debit}</TableCell> // after <TableCell className="text-right">{debitValue ? debitValue.toLocaleString() : ""}</TableCell> <TableCell className="text-right">{creditValue ? creditValue.toLocaleString() : ""}</TableCell>
Edit / Delete / Back buttons do nothing	renderActionButtons() still guards on if (!entry) return <div />; but later logic keeps using the old variable journalEntry → the function returns early, so buttons never render handlers.	Change every remaining journalEntry inside renderActionButtons to entry (there are normally 3 occurrences: status check, ownership check, and lines formatting). Example: ts const status = entry.status; const isOwnEntry = user?.id === entry.createdBy;
Delete/Edit API calls 400 or silently fail	formattedLines.map still sends a string accountId and sometimes both debit & credit on the same line.	```ts const formattedLines = validLines .filter(l => safeParseAmount(l.debit)

Quick way to verify the fixes
Console log the cells

tsx
Copy
Edit
console.log('LINE', index, debitValue, creditValue);
If both numbers show in the console, the table will display once you use them in the JSX.

Check the buttons actually mount
In React DevTools, inspect the ActionButtons component.
If it’s missing, the early-return guard is still tripping — a leftover journalEntry is the usual culprit.

Watch the Network tab
After the formattedLines patch you should see the request payload look like

json
Copy
Edit
"lines":[{"accountId":8011,"type":"debit","amount":100}]
and the response status should flip to 201 Created instead of 400.

“Why didn’t our previous refactor fix it?”
We introduced entry but a few deep-nested references stayed as journalEntry (especially inside the button renderer).

We parsed numbers correctly, but never used those parsed values in the table JSX.

formattedLines still violated the backend contract (string IDs and double-sided rows).

These three micro-patches remove all of those mismatches.

Apply the lines above, hot-reload, and let me know:

Do the Debit/Credit figures now render?

Do the Edit / Delete / Back buttons fire their handlers?

Does POST / Save-as-draft return 201 or 200 instead of 400?