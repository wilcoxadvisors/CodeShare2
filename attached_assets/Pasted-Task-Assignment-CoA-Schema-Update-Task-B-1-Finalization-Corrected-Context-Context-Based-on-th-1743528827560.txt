Task Assignment: CoA Schema Update (Task B.1 Finalization - Corrected Context)

Context:
Based on the project roadmap and the current code context within the CodeShare directory, we need to finalize Task B.1 (Chart of Accounts) by performing specific updates to the accounts schema definition in shared/schema.ts.

Goal:
Ensure the accounts table schema meets the final requirements for consistency (accountCode), hierarchy (parentId), and additional reporting fields (fsliBucket, internalReportingBucket, item) before proceeding to automated testing for Task B.1.

Instructions:

Action: Navigate to Schema File:

Open the CodeShare/shared/schema.ts file.
Locate the export const accounts = pgTable(...) definition.
Action: Verify and Enhance accountCode:

Verify: Confirm accountCode exists and is defined similar to text('account_code').notNull().
Add Unique Constraint: Add a unique constraint scoped to the clientId. This ensures accountCode is unique within a specific client's CoA, but allows different clients to use the same code. Add the following within the pgTable definition's final callback argument (where indexes are defined):
TypeScript

(table) => {
  return {
    // ... other existing indexes/constraints (like parentIdx)
    accountCodeClientUnique: uniqueIndex('account_code_client_unique').on(table.clientId, table.accountCode),
  };
}
(Adjust uniqueIndex name, e.g., accounts_client_id_account_code_unique_idx, if a different naming convention is preferred/used elsewhere).
Action: Verify parentId:

Verify: Confirm the parentId field exists and is defined similar to integer('parent_id').references(() => accounts.id, { onDelete: 'restrict' }).
Verify Index: Confirm that an index exists on parentId (e.g., parentIdx: index('parent_idx').on(table.parentId)).
Note: The current onDelete: 'restrict' prevents deleting parent accounts with children, which is a safe default. Confirm this behavior is desired. If 'set null' is preferred (allowing parent deletion but orphaning children by setting their parentId to null), update it accordingly. For now, assume 'restrict' is correct. No change needed unless instructed otherwise.
Action: Add New Reporting Fields:

Add the following nullable text fields to the accounts table definition (inside the first object argument of pgTable):
fsliBucket: text('fsli_bucket') (Financial Statement Line Item)
internalReportingBucket: text('internal_reporting_bucket')
item: text('item') (For further categorization/detail) (Being nullable means you don't need .notNull())
Action: Generate and Review Migrations:

Run the Drizzle migration generation command from the project root: npx drizzle-kit generate:pg
Carefully review the generated SQL migration file (migrations/xxxxx_... .sql). Ensure it accurately reflects only the intended changes: the addition of the uniqueIndex for accountCode/clientId, and the addition of the three new nullable text columns (fsli_bucket, internal_reporting_bucket, item). Verify no unintended changes to parentId occurred unless specifically requested.
Verification:

Confirm that accountCode is text, notNull, and has the new uniqueIndex across clientId and accountCode.
Confirm parentId definition (integer, references, onDelete: 'restrict', index) remains correct.
Confirm the new fields fsliBucket, internalReportingBucket, and item exist, are text, and are nullable.
Confirm the generated SQL migration file accurately reflects only these intended changes.
Reporting:

Report success once the schema is updated in shared/schema.ts and the migration file has been generated and accurately reviewed.
Provide the content of the generated SQL migration file for final confirmation.
Report any issues or discrepancies found in the existing schema that conflict with these instructions.