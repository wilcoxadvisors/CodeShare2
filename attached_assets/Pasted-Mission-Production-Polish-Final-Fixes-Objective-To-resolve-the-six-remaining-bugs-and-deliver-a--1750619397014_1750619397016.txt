Mission: Production Polish - Final Fixes
Objective: To resolve the six remaining bugs and deliver a stable, production-ready Journal Entry feature.

Task 1: Fix Data Integrity & Save Failures (Issues #6, #19)
Analysis: The inability to save copied entries (#19) and the loss of the reference field (#6) are both caused by the same root problem: an invalid data payload being sent to the server. The console logs confirm a 400 Bad Request because the reversalDate is being sent as null, which the backend validation rejects.

Your Instructions:

Open File: client/src/features/journal-entries/components/JournalEntryForm.tsx.

Locate all three submission handlers: handleSaveDraft, handleSubmitForApproval, and handlePostEntry.

Surgically Edit the formData object in all three handlers.

Find this line in each of the three functions:
TypeScript

reversalDate: journalData.isAccrual ? journalData.reversalDate : null,
Replace it with this exact line: This is the industry-standard way to handle optional fields. It ensures the key is omitted entirely from the data payload if it's not applicable, satisfying the backend validator.
TypeScript

reversalDate: journalData.isAccrual && journalData.reversalDate ? journalData.reversalDate : undefined,
Verify this line is also present and correct in all three handlers to fix the reference field data loss (#6):
TypeScript

referenceNumber: journalData.referenceNumber,
Task 2: Fix Attachment Deletion Workflow (Issue #25)
Analysis: Attachments are deleted from the server immediately on click, even if the user cancels the edit. This is incorrect. The deletion must be transactional and only occur when the user explicitly saves the form.

Your Instructions:

Open File: client/src/features/journal-entries/components/JournalEntryForm.tsx.
Add State: Add this state variable at the top of the component to queue deletions.
TypeScript

const [filesToDelete, setFilesToDelete] = useState<number[]>([]);
Modify the Delete Handler: In the JSX, find the onRemoveAttachment prop that is passed to the <AttachmentSection />. Replace its entire function with the following logic. This stops the immediate deletion and instead stages the file ID.
TypeScript

onRemoveAttachment={(fileId: number) => {
  // For saved files (ID > 0), add to deletion queue
  if (fileId > 0) {
    setFilesToDelete(prev => [...prev, fileId]);
  }
  // Always remove from the visible list for immediate UI feedback
  setAttachments(prev => prev.filter(f => f.id !== fileId));
}}
Open File: server/storage/journalEntryStorage.ts.
Find Function: updateJournalEntryWithLines.
Add Finalization Logic: Inside the db.transaction block, add the following code. This makes the backend process the filesToDelete array, ensuring deletions only happen on a successful save.
TypeScript

// Add this block inside the transaction
if ((entryData as any).filesToDelete && Array.isArray((entryData as any).filesToDelete)) {
  const fileIdsToDelete = (entryData as any).filesToDelete as number[];
  if (fileIdsToDelete.length > 0) {
    console.log(`ARCHITECT_DEBUG: Deleting ${fileIdsToDelete.length} files.`);
    for (const fileId of fileIdsToDelete) {
      const fileToDelete = await tx.query.journalEntryFiles.findFirst({ where: eq(schema.journalEntryFiles.id, fileId) });
      if (fileToDelete?.storageKey) {
        await getFileStorage().delete(fileToDelete.storageKey);
      }
      await tx.delete(journalEntryFiles).where(eq(journalEntryFiles.id, fileId));
    }
  }
}
Task 3: Fix Layout and UI Polish (Issues #13, #21, #24)
Analysis: The layout and polish issues detract from the enterprise-grade standard we are building. The fixes are architectural and will improve the user experience permanently.

Your Instructions:

Fix Double Scrollbar (#24):

Root Cause: A conflict between the main layout's scroll container and the page's content wrapper.
File: client/src/components/AppLayout.tsx.
Action: Find the <main> HTML element. It has the class overflow-y-auto. Remove that class. This is the definitive architectural fix.
<!-- end list -->

JavaScript

// CHANGE THIS:
<main className="flex-1 overflow-y-auto bg-gray-50">
// TO THIS:
<main className="flex-1 bg-gray-50">
Fix Shallow Account Expansion (#13):

Root Cause: The recursive function for rendering the account tree is not correctly structured.
File: client/src/features/journal-entries/components/JournalEntryLinesTable.tsx.
Action: Find the renderAccountTree function. The recursive call is incorrect.
Find this line:
JavaScript

{renderAccountTree(account.children, level + 1, lineIndex)}
Replace it with this correct mapping:
JavaScript

{account.children.map((childAccount) => renderAccountTree([childAccount], level + 1, lineIndex))}
