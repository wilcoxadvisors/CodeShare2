Agent Instructions: Test Client-Specific Chart of Accounts Functionality

Goal: Create and run an automated test script to verify the complete CRUD (Create, Read, Update, Delete) functionality for the client-specific Chart of Accounts using the newly refactored API endpoints.

Relevant Files/Endpoints:

Test Script: test/chart-of-accounts.js (New file to be created)
API Endpoints (examples):
POST /api/auth/login
GET /api/clients/:clientId/accounts
POST /api/clients/:clientId/accounts
GET /api/clients/:clientId/accounts/:accountId
PUT /api/clients/:clientId/accounts/:accountId
DELETE /api/clients/:clientId/accounts/:accountId
Implementation Steps:

Create Test Script File:

Action: Create a new test script file named test/chart-of-accounts.js. Use Node.js and node-fetch (ensure it uses ES modules if the project requires it, like previous scripts).
Implement Test Logic:

Action: Write the script to perform the following sequence:
Authentication: Authenticate as the admin user (admin/password123) via POST /api/auth/login and store the session cookie.
Select Client: Choose a specific clientId to test against (e.g., clientId = 1).
Fetch Initial CoA: Make a GET request to /api/clients/${clientId}/accounts using the session cookie. Log the status code and verify it's 200. Log the number of accounts received.
Create Account: Make a POST request to /api/clients/${clientId}/accounts with valid data for a new test account (e.g., {"code":"TESTCOA","name":"Test CoA Account","type":"EXPENSE"}). Log the status code (expect 201) and the response body (which should contain the new account with its ID and clientId). Store the accountId of the newly created account.
Fetch New Account (Verify Create): Make a GET request to /api/clients/${clientId}/accounts/${newAccountId}. Log status code (expect 200) and verify the response data matches the created account.
Update Account: Make a PUT request to /api/clients/${clientId}/accounts/${newAccountId} with updated data (e.g., {"name":"Updated Test CoA Account", "description":"Test description"}). Log status code (expect 200 or 2xx) and the response body.
Fetch Updated Account (Verify Update): Make another GET request to /api/clients/${clientId}/accounts/${newAccountId}. Log status code (expect 200) and verify the response data reflects the updates.
Delete Account: Make a DELETE request to /api/clients/${clientId}/accounts/${newAccountId}. Log status code (expect 204 or 200).
Verify Deletion: Make a final GET request to /api/clients/${clientId}/accounts/${newAccountId}. Log status code (expect 404).
Logging: Ensure clear console.log messages indicate which step is being tested and whether the API call was successful (based on status code).
Make Executable:

Action: Run chmod +x test/chart-of-accounts.js.
Execute Test:

Action: Run the script using node test/chart-of-accounts.js.
Report Results:

Action: Provide the full console output from the script execution.
Action: Summarize the results, indicating whether each step (Fetch List, Create, Fetch Single, Update, Delete, Verify Deletion) passed or failed based on the logged status codes.