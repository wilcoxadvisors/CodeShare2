Agent Instructions: Implement CoA Hierarchy - Frontend UI & Forms

Goal: Update the ChartOfAccounts.tsx component to fetch and display the hierarchical CoA using an indented view, and modify the create/edit forms to allow selecting a parent account.

Relevant Files:

client/src/pages/ChartOfAccounts.tsx (Primary UI component)
server/storage.ts (Reference for the AccountTreeNode type)
Implementation Steps:

Verify Data Fetching (useQuery):

Action: Open client/src/pages/ChartOfAccounts.tsx.
Action: Locate the main useQuery hook for fetching accounts. Verify it is correctly configured as per your previous report [cite: Agent output before checkpoint a541e740]:
queryKey: Uses clientId (e.g., ['clientAccountsTree', currentEntity.clientId]).
queryFn: Fetches from the tree endpoint (/api/clients/${currentEntity.clientId}/accounts/tree).
Data Type: Expects AccountTreeNode[].
enabled: Depends on currentEntity.clientId.
Action: Report confirmation or any necessary corrections to the useQuery setup.
Implement/Enhance Tree Display (Indented Table):

Action: Confirm if the flattenTree helper function and the modified DataTable columns (using depth for indentation in the name column) were successfully implemented previously [cite: Agent output leading to checkpoint a541e740].
Action: If implemented:
Test it by ensuring the component renders without errors and potentially provide a screenshot or description of the current indented view.
Enhancement: Implement expand/collapse functionality:
Add state to track expanded nodes: const [expandedRows, setExpandedRows] = useState<Record<string, boolean>>({}); (Use account code or ID as key).
Modify the flattenTree function (or create a new memoized function) to filter the output, only including nodes whose parents are expanded (root nodes are always included).
In the "Name" column's cell renderer, add a clickable icon (e.g., ChevronRight/ChevronDown) only for accounts with children (row.original.children?.length > 0). The icon's onClick handler should toggle the row's ID in the expandedRows state.
Pass the filtered/flattened list to the DataTable.
Action: If the indented table was not previously implemented: Implement it now using the flattenTree helper and modifying the DataTable columns as described above (including indentation and basic expand/collapse).
Action: Report the changes made to implement or enhance the hierarchical display.
Update Create/Edit Forms (Parent Selection):

Action: Locate the form component used for creating and editing accounts (likely within ChartOfAccounts.tsx or a separate AccountForm.tsx).
Action: Add a "Parent Account" field to this form. Use a suitable Shadcn component like Select or Combobox.
Action: Populate the options for this selector using the flatAccountsWithDepth data (created in Step 2). Format the option labels to show indentation based on depth (e.g., using spaces or a custom renderer) so users can see the hierarchy when selecting a parent.
Action: Ensure the list of potential parents excludes the account currently being edited (and its own children) to prevent circular references. Also, allow selecting "None" for root-level accounts.
Action: Update the form's state management (react-hook-form) and Zod validation schema (accountSchema) to handle the nullable parentId field (it should be a number or null).
Action: Modify the form's onSubmit handler to include the selected parentId (which could be null) in the data payload sent to the POST (create) and PUT (update) API endpoints.
Action: Report the changes made to the form component(s) to add parent selection.
Verification:

Action: Restart the application.
Action: Report build success.
Action: Describe manual test steps: Navigate to CoA page, verify tree view renders with indentation, test expand/collapse, open create/edit form, verify parent selector shows hierarchy and allows selection, save account with/without parent, verify hierarchy updates correctly.