Task: Create Automated Test Script for CoA Import/Export

Goal: Create/Update the Node.js script scripts/test-coa-import-export.js to automatically execute the full test sequence for CoA Import/Export functionality via API calls and script execution, verifying the results.

1. Dependencies:
* Action: Ensure axios (for making API requests) and form-data (for constructing file upload requests) are installed and listed as dependencies in package.json. If not, install them (npm install axios form-data).
* Action: Import necessary modules at the top of scripts/test-coa-import-export.js: axios, FormData, fs, path, and execSync from child_process.

2. Script Implementation (scripts/test-coa-import-export.js):
* Action: Structure the script with an async main function to execute the tests sequentially.
* Constants: Define constants for BASE_URL (http://localhost:5000), target CLIENT_ID (use 2 for client "OK"), and paths to the test files in test/coa-import-export/ (valid_import.csv, invalid_import.csv, valid_import.xlsx).
* Authentication Helper: Create an async function authenticate() that uses axios to call the POST /api/auth/login endpoint with admin credentials and returns the necessary cookies/session info for subsequent requests. Handle errors.
* CoA Seeding Helper: Create a function seedClientCoA(clientId) that uses execSync to run npx tsx scripts/seed-existing-clients-coa.ts --client-id ${clientId}. Include error handling and log success/failure.
* Main Test Sequence (within the main async function):
* Setup: Call authenticate() to get auth cookies. Log success/failure.
* a. Test Export CSV:
* Use axios to make a GET request to /api/clients/${CLIENT_ID}/accounts/export with auth cookies.
* Verify: Check if the response status is 200 and the Content-Type header includes text/csv. Log pass/fail.
* b. Test Import Valid CSV:
* Read the content of valid_import.csv using fs.readFileSync.
* Create a FormData object. Append the file content (fs.createReadStream or buffer) with the field name coaFile and the correct filename.
* Use axios to make a POST request to /api/clients/${CLIENT_ID}/accounts/import with auth cookies, the FormData object, and appropriate Content-Type: multipart/form-data headers (axios might require setting headers explicitly when using FormData).
* Verify: Check if the response status is 200. Log the response body (which should contain success message and counts). Log pass/fail based on status and expected response content.
* (Optional Check): Add an axios GET call to /api/clients/${CLIENT_ID}/accounts/tree and basic validation of the returned structure/count.
* c. Reset CoA (for Excel): Call seedClientCoA(CLIENT_ID). Log result.
* d. Test Import Valid Excel:
* Read valid_import.xlsx using fs.readFileSync.
* Create FormData, append the file with field name coaFile and correct filename.
* Make the POST request to the import endpoint.
* Verify: Check status 200 and log the response body. Log pass/fail.
* e. Reset CoA (for Invalid): Call seedClientCoA(CLIENT_ID). Log result.
* f. Test Import Invalid CSV:
* Read invalid_import.csv.
* Create FormData, append the file with field name coaFile and correct filename.
* Make the POST request to the import endpoint.
* Verify: Check if the response status is 400 (or other appropriate error code). Log the response body (should contain error message). Log pass/fail based on receiving the expected error.
* (Optional Check): Add an axios GET call to /api/clients/${CLIENT_ID}/accounts/tree and verify the data matches the seeded state (confirming no changes were made by the failed import).
* Conclusion: Log overall test suite success or failure based on the results of individual steps.

3. Execution:
* Action: Ensure the script is runnable via the command line (e.g., node scripts/test-coa-import-export.js).

4. Verification Plan (Report Only):
* Action: Report that the automated test script scripts/test-coa-import-export.js has been created/updated to implement the full test sequence described above, including API calls, verifications, and logging. Mention any newly added dependencies.






