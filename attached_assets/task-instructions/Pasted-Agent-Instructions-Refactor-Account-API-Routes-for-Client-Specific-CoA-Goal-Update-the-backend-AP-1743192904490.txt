Agent Instructions: Refactor Account API Routes for Client-Specific CoA

Goal: Update the backend API endpoints for Chart of Accounts management to use clientId instead of entityId, reflecting the recent schema and storage layer changes.

Relevant Files:

server/accountRoutes.ts (Primary file to refactor)
server/routes.ts (Check for any additional account routes)
server/storage.ts (Reference for updated method signatures)
Implementation Steps:

Refactor Endpoints in server/accountRoutes.ts:

Action: Open server/accountRoutes.ts.
Action: Systematically review each API endpoint defined in this file (e.g., the routes handling GET for account lists, GET for single accounts, POST for creation, PUT for updates, DELETE for deletion).
Action (For Each Endpoint):
Modify Route Path: Update the route path to accept clientId as a parameter where appropriate. For instance:
GET /api/accounts might become GET /api/clients/:clientId/accounts.
POST /api/accounts might become POST /api/clients/:clientId/accounts.
GET /api/accounts/:accountId might become GET /api/clients/:clientId/accounts/:accountId. (Including clientId helps with authorization).
And so on for PUT and DELETE.
Update Handler Logic:
Extract the clientId from req.params.clientId.
Crucially, update all calls to storage methods (e.g., storage.getAccounts, storage.getAccount, storage.createAccount, storage.updateAccount, storage.deleteAccount) to pass the clientId instead of entityId where required by the updated IStorage interface [cite: 0c7bee1b]. Ensure the data passed (like in createAccount) includes clientId.
Remove any remaining logic that incorrectly uses entityId in the context of fetching or manipulating the accounts table directly.
Add/Verify Authorization: Implement or enhance authorization checks within each handler to ensure the authenticated user has the appropriate permissions to access or modify the CoA for the given clientId.
Action: After refactoring all endpoints in server/accountRoutes.ts, save the file. Report that the refactoring of this file is complete and optionally show an example of one modified endpoint (e.g., the updated GET list endpoint).
Check server/routes.ts for Account Routes:

Action: Open server/routes.ts.
Action: Search for any additional routes that handle account CRUD operations or fetching (look for /api/accounts, /api/entities/.../accounts, etc.).
Action: If any are found, refactor them using the same principles as in Step 1 (update path, use clientId, update storage calls, check authorization). Report any changes made.
Action: If no relevant account routes are found in server/routes.ts, report that.