Task: Implement Task B.2: General Ledger (GL) and Journal Entries (JE) - Manual Creation

Goal: Implement the database schema, backend API, storage logic, and frontend UI necessary for users to manually create, view, edit, and manage Journal Entries.

1. Define Database Schema (Recap & Verify):
* Action: Ensure the journalEntries and journalEntryLines table schemas, along with their relations (to clients, entities, accounts, and each other), are correctly defined in shared/schema.ts as per the previous instructions (JE ID, ClientID, EntityID, Date, Ref#, Desc, Status, Lines linking JE ID, AccountID, Type[debit/credit], Amount).

2. Implement Backend API & Storage Logic:
* Action: Create server/journalEntryRoutes.ts.
* Action: Add method signatures to IStorage in server/storage.ts for: createJournalEntry, getJournalEntry, updateJournalEntry, deleteJournalEntry, listJournalEntries, addJournalEntryLine, updateJournalEntryLine, deleteJournalEntryLine.
* Action: Implement these methods in the DatabaseStorage class in server/storage.ts:
* createJournalEntry(entryData, linesData):
* Use a database transaction (db.transaction).
* Crucial Validation: Before inserting, calculate the sum of debits and credits from linesData. If they are not equal (or if total is zero), throw a validation error.
* Insert the main entry data into journalEntries.
* Insert all associated lines into journalEntryLines, linking them to the created entry ID.
* Return the created entry with its lines.
* updateJournalEntry(entryId, entryData, linesData):
* Use a transaction.
* Fetch the existing entry, check its status. Consider restricting updates if status is 'posted' or 'void'.
* Update header fields in journalEntries.
* Handle line updates (delete removed lines, update existing lines, add new lines).
* Re-validate: If amounts have changed, re-validate that total debits equal total credits for the entire entry. Throw an error if unbalanced.
* deleteJournalEntry(entryId): Implement logic based on status. If 'draft', perhaps allow hard delete. If 'posted', consider changing status to 'void' (soft delete) instead of actual deletion to maintain audit trails. Define and implement this behavior.
* listJournalEntries(...): Implement filtering by clientId, entityId, date range, status, etc.
* Implement basic CRUD for individual lines if needed, respecting transaction boundaries.
* Action: Implement the API routes in server/journalEntryRoutes.ts for POST /api/journal-entries, GET /api/journal-entries, GET /api/journal-entries/:id, PUT /api/journal-entries/:id, DELETE /api/journal-entries/:id.
* Ensure routes call the corresponding storage methods.
* Apply isAuthenticated middleware.
* Validate request payloads and query parameters. Handle errors appropriately.
* Action: Register the journalEntryRouter in server/routes.ts.

3. Implement Frontend UI:
* Action: Create a new page component client/src/pages/JournalEntries.tsx.
* Action: Create supporting components, e.g., client/src/components/journal-entries/JournalEntryTable.tsx and client/src/components/journal-entries/JournalEntryForm.tsx.
* Action: Implement TanStack Query hooks (useQuery, useMutation) for interacting with the new JE API endpoints. Ensure proper query invalidation on mutations.
* Action: Implement JournalEntryTable.tsx:
* Fetch and display a list of journal entries using useJournalEntries.
* Include columns: Date, Description, Reference #, Status, Total Debits/Credits.
* Add filtering controls (e.g., by date range, status).
* Provide action buttons/links for each entry (View/Edit, Delete/Void).
* Action: Implement JournalEntryForm.tsx:
* Handle both creation and editing of entries.
* Include inputs for header fields (Date picker, Description, Reference #).
* Dynamic Lines: Implement UI to add/remove/edit multiple journalEntryLines. Each line needs:
* An Account selector (searchable dropdown fetching from /api/clients/:clientId/accounts).
* A Debit amount input.
* A Credit amount input. (Ensure only one can be filled per line).
* An optional line Description.
* Real-time Balance: Display running totals for Debits and Credits below the lines table. Show a warning if they don't balance.
* Frontend Validation: Use react-hook-form/Zod for input validation. Crucially, add frontend logic to prevent form submission if total debits do not equal total credits.
* Handle status logic (e.g., default to 'draft', maybe a 'Post' button triggers validation and update).
* Action: Add routing for /journal-entries and /journal-entries/:id (or similar) in client/src/App.tsx. Add navigation link in the sidebar/menu.

4. Batch Upload (Defer): Note that implementing batch JE uploads from files is the next step within Task B.2 and is not part of this current implementation phase.

5. Report Completion:
* Action: Report that the JE schema, backend API/storage, and frontend UI (table + form) for manual Journal Entry creation and management have been implemented. Describe any significant implementation choices (e.g., how 'posted' entries are handled, soft delete strategy).