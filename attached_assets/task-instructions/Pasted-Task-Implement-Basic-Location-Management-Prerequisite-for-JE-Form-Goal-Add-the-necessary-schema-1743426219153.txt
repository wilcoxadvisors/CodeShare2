Task: Implement Basic Location Management (Prerequisite for JE Form)

Goal: Add the necessary schema, backend API, and storage functions to manage Locations per client.

Define locations Table Schema:
Action: Open shared/schema.ts.
Action: Define a new Drizzle table schema named locations.
Columns:
id: serial('id').primaryKey()
clientId: integer('client_id').notNull().references(() => clients.id)
name: text('name').notNull()
isActive: boolean('is_active').notNull().default(true)
createdAt: timestamp('created_at').defaultNow().notNull()
updatedAt: timestamp('updated_at').defaultNow().notNull()1 Â  
1.
github.com
github.com
Action: Define relations for locations (belongs to client). Update clients relation if needed (client has many locations).
Action: Define and export insertLocationSchema.
Apply Schema Changes:
Action: Generate the migration file: npm run db:generate.
Action: Apply the migration: npm run db:push. If this fails, report the error; we might need direct SQL again.
Implement Backend API & Storage Logic:
Action: Create server/locationRoutes.ts.
Action: Add method signatures to IStorage in server/storage.ts for: createLocation, listLocationsByClient, updateLocation, deleteLocation (or setLocationActiveStatus).
Action: Implement these methods in the DatabaseStorage class in server/storage.ts. Prioritize listLocationsByClient(clientId) which is needed for the JE form dropdown (should probably only return active locations). Implement basic CRUD for the others (use soft delete via isActive flag for deactivation).
Action: Implement API routes in server/locationRoutes.ts:
GET /api/clients/:clientId/locations: Calls storage.listLocationsByClient(clientId).
POST /api/locations: Calls storage.createLocation.
PUT /api/locations/:id: Calls storage.updateLocation.
DELETE /api/locations/:id: Calls storage.setLocationActiveStatus(id, false).
Action: Ensure routes are protected (isAuthenticated).
Action: Register the locationRouter in server/routes.ts.
Frontend Fetching (Note): Acknowledge that the JournalEntryForm requires the locations prop. The actual fetching (useQuery(['locations', clientId], () => fetchFn...)) will be implemented later in the parent component (JournalEntries.tsx) when that page is built. No changes are needed to JournalEntryForm.tsx itself right now.
Report Completion:
Action: Report that the locations schema, database migration (state if db:push worked or required direct SQL), backend storage functions, and API routes for basic Location management have been implemented. Confirm that GET /api/clients/:clientId/locations is available to fetch active locations.