Agent Instructions: Implement CoA Template and Seeding Logic

Goal: Implement the backend functionality to define a standard Chart of Accounts template and automatically seed this template for new clients upon creation.

Relevant Files:

server/storage.ts (To add seeding method)
shared/schema.ts (Reference for accounts table structure)
server/adminRoutes.ts (Or other file handling POST /api/admin/clients for integration)
Potentially create server/coaTemplate.ts
Implementation Steps:

Part 1: Define the Standard CoA Template

Define Template Structure:
Action: Create a new file (e.g., server/coaTemplate.ts) or choose a suitable location (like within storage.ts initially).
Action: Define the "basic" standard Chart of Accounts structure as a TypeScript constant (e.g., const standardCoaTemplate = [...]). This should be an array of account objects.
Action: Each object in the array should represent an account and include properties matching the InsertAccount type (minus id and clientId), such as code, name, type (use AccountType enum), subtype (optional), description (optional), and parentId (use null for root accounts).
Handling parentId: For simplicity initially, define parent/child relationships using the code within the template (e.g., add a parentCode: string | null property to the template objects). The seeding logic will need to resolve this parentCode to the actual parentId after the parent account is inserted.
Example Template Snippet:
TypeScript

// Example in server/coaTemplate.ts
import { AccountType } from '../shared/schema';
export const standardCoaTemplate = [
  { code: '1', name: 'Assets', type: AccountType.ASSET, parentCode: null },
  { code: '1100', name: 'Current Assets', type: AccountType.ASSET, parentCode: '1' },
  { code: '1110', name: 'Cash', type: AccountType.ASSET, subtype: 'Bank', parentCode: '1100' },
  // ... more accounts for liabilities, equity, revenue, expense ...
];
Action: Ensure the template covers essential accounts for basic bookkeeping across all five main types (Asset, Liability, Equity, Revenue, Expense).
Part 2: Implement Seeding Function in storage.ts

Update IStorage Interface:
Action: Open server/storage.ts.
Action: Add the new method signature to the IStorage interface:
TypeScript

seedClientCoA(clientId: number): Promise<void>;
Implement in DbStorage:
Action: Implement the async seedClientCoA(clientId: number): Promise<void> method within the DbStorage class.
Action: Inside the method:
Import the standardCoaTemplate.
Check: Query the accounts table to see if any accounts already exist for this clientId. If yes, log a message and return early to prevent duplicates.
Insert Accounts: Iterate through the standardCoaTemplate. For each template account:
Prepare the data for insertion, setting the clientId.
Handle parentId: If the template item has a parentCode, query the accounts table for the current clientId to find the id of the account whose code matches the parentCode. Use this found id as the parentId for the current account being inserted. If no parent code or parent not found, use null.
Call await this.createAccount({ ...accountData, clientId, parentId }); (using the existing createAccount method which now expects clientId).
Consider wrapping the insertions in a transaction (db.transaction(...)) for atomicity.
Add logging for start, completion, and any errors.
Part 3: Integrate Seeding into Client Creation

Modify Client Creation Route:
Action: Open the file handling client creation (likely POST /api/admin/clients in server/adminRoutes.ts).
Action: Locate the code block immediately after a new client record is successfully inserted using await storage.createClient(...) and you have the newClient.id.
Action: Add a call to the new seeding function:
TypeScript

try {
  console.log(`Seeding standard CoA for new client ID: ${newClient.id}`);
  await storage.seedClientCoA(newClient.id);
  console.log(`CoA seeding completed for client ID: ${newClient.id}`);
} catch (seedError) {
  console.error(`ERROR: Failed to seed CoA for client ID: ${newClient.id}`, seedError);
  // Decide how to handle seeding failure - log it? Return success anyway? Add warning to response?
}
Part 4: Verification

Restart & Test:
Action: Restart the application (npm run dev). Report build success.
Action: Manually create a new client using the application's setup flow ("Add Client" button on Dashboard).
Action: After the setup completes, use an API testing tool (like the curl commands used before or Postman/Insomnia) or check the database directly to:
Call GET /api/clients/:newClientId/accounts/tree (replace :newClientId with the ID of the client just created).
Verify that the response contains the accounts defined in your standardCoaTemplate.
Verify the accounts are linked to the correct newClientId.
Verify the parent/child relationships are set up correctly based on the template.
Action: Report the results of this verification test.