Agent Instructions: Refactor Entity Addition in Step 2 (Fix Blocker)

CRITICAL ISSUE: User reports they still cannot add an entity in Step 2 after Checkpoint 0b54fdc1. The previous fix using a temporary clientId: -1 was incorrect.

Goal: Implement the correct logic for adding entities during the setup flow: Entities added in Step 2 should only be added to the frontend state managed by SetupStepper.tsx, not saved to the database via API call at this stage.

Refactoring Steps:

Remove Temporary clientId: -1 Logic (Backend):
Action: Open server/adminRoutes.ts.
Action: Locate the POST /api/admin/entities route handler.
Action: Remove the conditional logic that checks for and handles clientId === -1. This route should always require a valid, positive clientId in the request body, consistent with the database schema. Add validation if missing: if (!clientId || clientId <= 0) { return res.status(400).json({ message: 'Valid Client ID is required' }); }.
Modify Entity Addition Logic (Frontend - Step 2):
Action: Open client/src/components/setup/EntityManagementCard.tsx.
Action: Locate the onSubmit function (or equivalent form submission handler).
Action: Inside onSubmit, REMOVE the call to createEntityMutation.mutate(...). Entities should not be saved via API call from this component during the initial setup.
Action: Instead, after validating the form data (validatedEntityData), call the props.onEntityAdded function (passed down from SetupStepper), passing the validatedEntityData to it. Example: props.onEntityAdded(validatedEntityData);.
Action: Ensure the form resets correctly after calling props.onEntityAdded.
Implement State Update Logic (Frontend - Stepper):
Action: Open client/src/components/setup/SetupStepper.tsx.
Action: Verify/ensure you have a state variable for the entities being added: const [setupEntities, setSetupEntities] = useState<Entity[]>([]); (Replace Entity with the correct type).
Action: Create or verify the handleEntityAdded function (or similar name). This function should:
Accept the new entityData as an argument.
(Optional but recommended for UI keys): Assign a temporary local ID (e.g., const tempId = Date.now(); or use a UUID library if available) to entityData. This ID is only for frontend use within this setup session.
Update the state: setSetupEntities(prevEntities => [...prevEntities, { ...entityData, localId: tempId }]);
Action: Ensure this handleEntityAdded function is passed down as the onEntityAdded prop to the <EntityManagementCard /> component instance within SetupStepper.tsx.
Action: Ensure <EntityManagementCard /> receives the setupEntities state array via a prop (e.g., entities={setupEntities}).
Verify Entity List Display (Frontend - Step 2):
Action: In client/src/components/setup/EntityManagementCard.tsx, ensure the list/table displaying entities correctly iterates over props.entities (which now comes from SetupStepper's state). Use the temporary localId (if added) or entity.name combined with index for the React key prop in the list rendering.
Test & Report:
Action: Restart the application.
Action: Go through the setup flow to Step 2.
Action: Try adding one or more entities.
Verify: Do the entities appear correctly in the list within Step 2 without any network errors related to /api/admin/entities? (Check browser console and Network tab - there should be NO POST requests to this endpoint in Step 2).
Verify: Can you successfully proceed to Step 3 with the added entities shown in the state?
Report: Confirm whether entities can now be added to the list in Step 2 purely via state updates.