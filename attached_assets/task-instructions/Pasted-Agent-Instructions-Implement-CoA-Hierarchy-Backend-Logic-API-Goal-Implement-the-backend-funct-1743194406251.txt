Agent Instructions: Implement CoA Hierarchy - Backend Logic & API

Goal: Implement the backend functionality to fetch and return a client's Chart of Accounts structured as a hierarchy based on the parentId relationship.

Relevant Files:

server/storage.ts (To add new data fetching method) [cite: uploaded:CodeShare/server/storage.ts]
shared/schema.ts (Reference for accounts table structure with clientId and parentId) [cite: uploaded:CodeShare/shared/schema.ts]
server/accountRoutes.ts (To add new API endpoint) [cite: uploaded:CodeShare/server/accountRoutes.ts]
Implementation Steps:

Define Tree Node Structure:

Action: Decide on a suitable TypeScript interface/type for the tree nodes. It should include the standard account properties plus a children array. Example (can be defined in storage.ts or a shared types file):
TypeScript

interface AccountTreeNode extends Account { // Assuming 'Account' type is imported from schema
  children: AccountTreeNode[];
}
Implement Hierarchical Fetch in storage.ts:

Action: Open server/storage.ts.
Action: Add a new method signature to the IStorage interface for fetching the account tree:
TypeScript

getAccountsTree(clientId: number): Promise<AccountTreeNode[]>;
Action: Implement this getAccountsTree method within the DbStorage class:
Fetch all accounts for the given clientId from the database, ordered appropriately (e.g., by code or name).
Process the flat list into a hierarchical structure (the AccountTreeNode[]). A common approach is:
Create a map (Record<number, AccountTreeNode>) to store nodes by their id and initialize children arrays.
Iterate through the flat list:
Add each account as an AccountTreeNode to the map.
If an account has a parentId that exists in the map, add the current account node to the children array of its parent node in the map.
Filter the map's values to return only the root nodes (those with parentId null or whose parent is not in the map for the given client).
Handle potential edge cases like invalid parentId references if necessary.
Action (Optional): Implement a basic version of getAccountsTree in MemStorage if used for testing.
Create API Endpoint in accountRoutes.ts:

Action: Open server/accountRoutes.ts.
Action: Add a new API endpoint specifically for fetching the tree structure. Example:
TypeScript

app.get("/api/clients/:clientId/accounts/tree", /* middleware like isAdmin/isAuthenticated */, asyncHandler(async (req: Request, res: Response) => {
  const clientId = parseInt(req.params.clientId);
  // Add authorization check here for clientId

  const accountTree = await storage.getAccountsTree(clientId);

  res.json({
    status: "success",
    data: accountTree
  });
}));
Action: Ensure necessary imports (asyncHandler, Request, Response, storage, authorization middleware) are present. Add appropriate authorization middleware to protect the endpoint.
Report Completion:

Action: Report the successful implementation of the getAccountsTree method in storage.ts (both IStorage and DbStorage) and the creation of the new GET /api/clients/:clientId/accounts/tree endpoint in accountRoutes.ts.