Agent Instructions: Fix Remaining Setup Bugs (Initialization, Dashboard, Industry)
Progress: Step 1->2->3 navigation works, Step 2 entity list receives the entity object.
Remaining Bugs: Incorrect initial state, missing industry display (Step 2 & 3), dashboard not updating.

Phase 1: Fix Stepper Initialization (Bug 1 - Highest Priority)

Focus: SetupStepper.tsx initialization logic.
Hypothesis: The component might be incorrectly reading stale state from localStorage on mount, or not reliably resetting state.
Action: Ensure a clean start. Modify the useEffect hook in SetupStepper.tsx to always reset the state and clear localStorage on initial mount. (We can revisit resuming later if needed, but let's ensure a clean start works first).
TypeScript

// Inside SetupStepper.tsx
useEffect(() => {
  console.log("DEBUG SetupStepper: Component Mounted. Forcing clean start.");
  // Clear any potentially stale setup data from previous attempts
  localStorage.removeItem('activeStep'); // If step was ever saved
  localStorage.removeItem('clientData');
  localStorage.removeItem('setupEntities');

  // Explicitly set initial state
  setActiveStep(0);
  setClientData(null);
  setSetupEntities([]);
  console.log("DEBUG SetupStepper: State forced to initial values (Step 0, null client, empty entities).");

}, []); // Empty dependency array ensures this runs only ONCE on mount
Verify & Report: Restart the app/refresh the dashboard multiple times. Click "Add Client". Does the setup flow always start on Step 1 with empty fields? Report confirmation.
Phase 2: Fix Dashboard Update (Bug 4 - High Priority)

Focus: Dashboard.tsx (where <SetupStepper> is rendered) and its onComplete handler.
Hypothesis: The queryClient.invalidateQueries call might be using the wrong queryKey or not executing correctly.
Action: Add detailed logging and verify the query key in Dashboard.tsx:
Confirm the queryClient is correctly initialized (useQueryClient()).
In the handleSetupComplete function (passed as onComplete to SetupStepper), add logs and ensure the correct key is used:
TypeScript

// Inside Dashboard.tsx -> handleSetupComplete
const handleSetupComplete = () => {
  console.log("DEBUG Dashboard: handleSetupComplete triggered.");
  const queryKeyForClientList = ['clients']; // *** VERIFY THIS QUERY KEY ***
  console.log(`DEBUG Dashboard: Attempting to invalidate query key: ${JSON.stringify(queryKeyForClientList)}`);
  try {
    queryClient.invalidateQueries({ queryKey: queryKeyForClientList });
    console.log("DEBUG Dashboard: Query invalidation successful.");
  } catch (error) {
    console.error("DEBUG Dashboard: Error during query invalidation:", error);
  }
  setSetupMode(false); // Hide stepper
};
Crucially: Verify that the queryKey used in invalidateQueries (e.g., ['clients']) exactly matches the queryKey used in the useQuery hook that fetches the data for the "Client Status Overview" and "Stat Card" on the dashboard.
Verify & Report: Complete the entire setup flow (Steps 1-3, click Finish). Check the logs. Does the invalidation happen? Does the dashboard UI update with the new client? Report confirmation and the queryKey being used.
Phase 3: Fix Industry Display (Bugs 2 & 3) (After Phases 1 & 2 Verified)

Focus: EntityManagementCard.tsx (list display), SetupSummaryCard.tsx (summary display), and the getEntityIndustryLabel helper function (likely added in EntityManagementCard or a shared utils file).
Hypothesis: The getEntityIndustryLabel function isn't handling the stored industry value correctly (especially "other"), or the components aren't calling it correctly.
Action (Debug Helper Function):
Find the getEntityIndustryLabel function. Add logging inside it:
TypeScript

function getEntityIndustryLabel(industryValue: string | null | undefined): string {
  console.log(`DEBUG getEntityIndustryLabel: Received value: "${industryValue}"`);
  if (!industryValue) return "N/A";
  // Assuming INDUSTRY_OPTIONS is an array like [{ value: 'tech', label: 'Technology' }, { value: 'other', label: 'Other' }, ...]
  const option = INDUSTRY_OPTIONS.find(opt => opt.value === industryValue);
  const label = option ? option.label : industryValue; // Fallback to value if no label found
  console.log(`DEBUG getEntityIndustryLabel: Returning label: "${label}"`);
  return label;
}
Action (Verify Usage):
In EntityManagementCard.tsx's table rendering, ensure the relevant <TableCell> calls getEntityIndustryLabel(entity.industry). Add a log just before rendering the cell to show entity.industry.
In SetupSummaryCard.tsx, ensure the places displaying industry (for client and entities) call getEntityIndustryLabel(clientData?.industry) or getEntityIndustryLabel(entity.industry). Add logs just before displaying to show the raw industry value being passed.
Test & Report:
Add an entity, selecting "Other" for industry. Add another selecting "Technology".
Check logs. What value is passed to getEntityIndustryLabel? What does it return?
Check UI. Does the Step 2 list show "Other" and "Technology"? Does the Step 3 summary show them correctly?
Report confirmation or provide logs showing the discrepancy.