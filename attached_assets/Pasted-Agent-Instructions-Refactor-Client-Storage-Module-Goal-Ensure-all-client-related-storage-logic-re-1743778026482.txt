Agent Instructions: Refactor Client Storage Module

Goal: Ensure all client-related storage logic resides in server/storage/clientStorage.ts and that the main storage.ts correctly delegates calls, following the established modular pattern.

Relevant Files:

server/storage.ts (Main storage file) [cite: uploaded:CodeShare/server/storage.ts]
server/storage/clientStorage.ts (Target module file - create or verify) [cite: uploaded:CodeShare/server/storage/clientStorage.ts]
shared/schema.ts (Client type definitions) [cite: uploaded:CodeShare/shared/schema.ts]
Implementation Steps:

Part 1: Ensure clientStorage.ts is Correctly Implemented

Verify/Create File: Ensure the file server/storage/clientStorage.ts exists. If not, create it.
Define Interface (IClientStorage): Verify or define the IClientStorage interface within clientStorage.ts. It must include signatures for all client operations:
TypeScript

import { Client, InsertClient } from "@shared/schema"; // Adjust path if needed

export interface IClientStorage {
  getClient(id: number): Promise<Client | undefined>;
  getClients(): Promise<Client[]>;
  getClientsByUserId(userId: number): Promise<Client[]>;
  getClientByUserId(userId: number): Promise<Client | null>; // Or undefined
  createClient(client: InsertClient): Promise<Client>;
  updateClient(id: number, client: Partial<Client>): Promise<Client | undefined>;
}
Implement Class (ClientStorage): Verify or implement the ClientStorage implements IClientStorage class within clientStorage.ts. Ensure it contains the correct database logic (using db and Drizzle) for each method in IClientStorage. Reference the implementations previously found in DatabaseStorage within the provided server/storage.ts code if needed. Include necessary imports (db, clients, Client, InsertClient, eq, asc, ApiError, etc.).
Export Instance: Ensure the file exports a singleton instance at the bottom: export const clientStorage = new ClientStorage();.
Part 2: Update storage.ts - Interface (IStorage)

Open File: Open server/storage.ts.
Locate Interface: Find the export interface IStorage { ... } definition.
Import: Add or verify the import: import { IClientStorage, clientStorage } from './storage/clientStorage';.
Remove Signatures: Delete any individual method signatures for getClient, getClients, getClientsByUserId, createClient, updateClient from within the IStorage interface.
Add Property: Ensure the IStorage interface includes the property: clients: IClientStorage;.
Part 3: Update storage.ts - DatabaseStorage Delegation

Locate Class: Find the class DatabaseStorage implements IStorage { ... } definition.
Add Property: Add or verify the class includes the public property public clients: IClientStorage; and that it's initialized in the constructor: this.clients = clientStorage;.
Implement/Verify Delegation: Ensure all client methods within DatabaseStorage (getClient, getClients, getClientsByUserId, createClient, updateClient) are simple delegations using this.clients. Example:
TypeScript

async getClient(id: number): Promise<Client | undefined> {
    // Delegate to clientStorage module via the clients property
    return this.clients.getClient(id);
}
async createClient(client: InsertClient): Promise<Client> {
    // NOTE: Remove the seedClientCoA call from *here* if it exists,
    // it should be handled in adminRoutes.ts AFTER this method returns.
    return this.clients.createClient(client);
}
// ... implement/verify delegation for ALL methods in IClientStorage ...
Remove Old Code: Delete any direct implementation logic for these client methods remaining within DatabaseStorage.
Part 4: Update storage.ts - MemStorage Delegation

Locate Class: Find the class MemStorage implements IStorage { ... } definition.
Add Property: Add or verify the class includes public clients: IClientStorage; initialized in the constructor: this.clients = clientStorage; (or potentially a MemClientStorage if needed, see note below).
Remove Internal State: Delete private clients: Map<number, Client>; and private currentClientId: number; properties if they exist. Remove this.clients = new Map(); from the constructor if it exists.
Implement Delegation: Verify or implement that all client methods within MemStorage delegate to this.clients. Example:
TypeScript

async getClient(id: number): Promise<Client | undefined> {
    // Delegate to clientStorage module via the clients property
    return this.clients.getClient(id); // Adjust if using MemClientStorage
}
async createClient(client: InsertClient): Promise<Client> {
     // NOTE: Remove the seedClientCoA call from *here* if it exists.
     // Also, MemStorage might need its own MemClientStorage implementation
     // instead of delegating to the DB version 'clientStorage'.
     // For now, delegate to align with pattern, but this might need revisiting.
     // Ensure the default client creation logic in MemStorage constructor is handled.
     return this.clients.createClient(client); // Adjust if using MemClientStorage
}
// ... implement/verify delegation for ALL methods in IClientStorage ...
Handle Constructor: Carefully review the MemStorage constructor. The logic that creates the default client (Wilcox Advisors) cannot use await. If createClient in the delegated storage is async, this default client creation might need to be handled differently, potentially by adding a synchronous method to MemClientStorage or adjusting the initialization sequence. For now, ensure the old map manipulation is removed and delegation is attempted.
Remove Old Code: Delete any direct implementation logic for client methods remaining within MemStorage.
Part 5: Clean Up storage.ts

Review File: Scan server/storage.ts.
Remove Unused Code: Delete any helper functions or types used only by the old client method implementations within storage.ts.
Part 6: Verification

Restart: Restart the application.
Report: Report build success/failure. Explicitly confirm the status of Parts 1 through 5. Describe how to manually test client operations (e.g., view client list on dashboard, view details, edit client) to ensure they still function correctly through the delegation.