Agent Instructions: Create Test Data Cleanup Script

Goal: Create a script to identify and delete test clients and entities (and their associated data), while preserving a small number (e.g., 2-3) of specified test clients (specifically IDs 1, 2, 7 based on context).

Relevant Files:

Create: scripts/cleanup-test-data.ts
Create: scripts/cleanup-test-data.sh
Modify: scripts/README.md [cite: uploaded:CodeShare/scripts/README.md]
Reference: shared/schema.ts (Definitions for clients, entities, accounts, journalEntries, journalEntryLines, userEntityAccess, etc.) [cite: uploaded:CodeShare/shared/schema.ts]
Reference: server/db.ts (For database connection) [cite: uploaded:CodeShare/server/db.ts]
Implementation Steps:

1. Create Script File (cleanup-test-data.ts):

Action: Create the file scripts/cleanup-test-data.ts.
Action: Implement Script Logic:
Imports: Import Drizzle ORM functions (db, eq, inArray, not, like, sql, and, or), relevant schema objects from ../shared/schema, and optionally chalk.
Define Clients to Keep: Define const CLIENT_IDS_TO_KEEP = [1, 2, 7]; (Confirm these IDs - 1:Admin, 2:OK, 7:Pepper seem correct based on prior logs [cite: Agent output before 04a1909c]). Log these IDs clearly at the start.
Find Clients to Delete: Query the clients table. Find all client IDs where the name matches test patterns (e.g., like(clients.name, '%Test%'), like(clients.name, '%COA_%'), etc. - add any other relevant patterns) AND the ID is NOT in CLIENT_IDS_TO_KEEP (not(inArray(clients.id, CLIENT_IDS_TO_KEEP))). Store these IDs in clientIdsToDelete. Log the count and IDs found. If none, log a message and exit gracefully.
Find Entities to Delete: Query the entities table. Find all entity IDs where entities.clientId is in the clientIdsToDelete array. Store these in entityIdsToDelete. Log the count and IDs.
Implement Deletion Logic within Transaction: Use await db.transaction(async (tx) => { ... });.
Inside Transaction (Order is CRITICAL - Delete dependencies first):
Delete userEntityAccess linked to entityIdsToDelete. Log count.
Delete journalEntryLines linked to entityIdsToDelete. Log count.
Delete journalEntries linked to entityIdsToDelete. Log count.
Delete accounts linked to clientIdsToDelete. Log count.
(Add deletes for any OTHER tables referencing entities or clients being deleted based on shared/schema.ts analysis)
Delete entities linked to clientIdsToDelete (i.e., where id is in entityIdsToDelete). Log count.
Delete clients where id is in clientIdsToDelete. Log count.
Main Script Flow:
Implement the async function main() { ... }.
Include a strong warning log message about permanent data deletion and the need for backups.
Call the functions to find clients/entities to delete.
Execute the deletion transaction within a try/catch block.
Log a final summary (counts deleted).
Include process.exit(0) on success, process.exit(1) on failure.
Call main().
2. Create Run Script (cleanup-test-data.sh):

Action: Create the file scripts/cleanup-test-data.sh.
Action: Add content including warnings and a user confirmation prompt:
Bash

#!/bin/bash
# Runs the script to DELETE test clients/entities.

echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!!! WARNING: THIS SCRIPT WILL PERMANENTLY DELETE TEST DATA !!!"
# Fetching exact IDs from the script might be complex here, remind user to check the .ts file
echo "!!!          (Excluding Client IDs defined in cleanup-test-data.ts, likely 1, 2, 7)          !!!"
echo "!!!          Backup your database before running!          !!!"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

read -p "Are you sure you want to continue? (y/N) " -n 1 -r
echo # Move to a new line

if [[ $REPLY =~ ^[Yy]$ ]]
then
    echo "Executing test data cleanup script..."
    # Ensure tsx is available or adjust command as needed for your environment
    npx tsx ./scripts/cleanup-test-data.ts "$@"
    echo "Cleanup script execution finished."
else
    echo "Cleanup cancelled."
fi
Action: Make the script executable: chmod +x scripts/cleanup-test-data.sh.
3. Update Documentation (scripts/README.md):

Action: Update scripts/README.md [cite: uploaded:CodeShare/scripts/README.md].
Action: Add a section for cleanup-test-data.ts. Explain its purpose (deleting test clients/entities except specified IDs like 1, 2, 7), the criteria it uses (e.g., name contains "Test"), how to run it (./scripts/cleanup-test-data.sh), and include multiple strong warnings about its destructive nature, the need for backups, and verifying the CLIENT_IDS_TO_KEEP array in the .ts script before execution.
4. Verification Plan (Report Only):

Action: Report that the cleanup script scripts/cleanup-test-data.ts, the runner scripts/cleanup-test-data.sh, and the updated scripts/README.md have been created.
Action: State clearly: "This script is intended for manual execution only after careful review and database backup. It should not be run automatically now."