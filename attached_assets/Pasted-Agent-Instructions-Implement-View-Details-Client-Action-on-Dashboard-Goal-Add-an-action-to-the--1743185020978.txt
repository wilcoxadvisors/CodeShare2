Agent Instructions: Implement "View Details" Client Action on Dashboard

Goal: Add an action to the client list on the dashboard (Dashboard.tsx) that allows the user to click "View Details" and see more information about a specific client in a modal dialog.

Relevant Files:

client/src/components/dashboard/Dashboard.tsx (Main file to modify)
server/adminRoutes.ts (Contains the GET /api/admin/clients/:id endpoint) [cite: CodeShare/server/adminRoutes.ts]
shared/schema.ts / client/src/lib/types.ts (For Client type definition) [cite: CodeShare/shared/schema.ts, CodeShare/client/src/lib/types.ts]
Shadcn UI Components: DropdownMenu, Dialog
TanStack Query (useQuery)
Implementation Steps:

Modify Dashboard.tsx - Add Action Column & Menu:

Action: Open client/src/components/dashboard/Dashboard.tsx.
Action: Locate the columns: ColumnDef<Client>[] definition used for the client DataTable.
Action: Add a new column definition to this array for "Actions". Example structure:
TypeScript

{
  id: "actions",
  header: "Actions",
  cell: ({ row }) => {
    const client = row.original;
    // Function to handle view details (will be created in Step 2)
    // const { handleViewDetails } = useClientActions(); // Or however you manage handlers

    return (
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="h-8 w-8 p-0">
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem
            onSelect={() => handleViewDetails(client.id)} // Call handler here
          >
            View Details
          </DropdownMenuItem>
          {/* Other actions (Edit, Deactivate) will be added later */}
        </DropdownMenuContent>
      </DropdownMenu>
    );
  },
}
Action: Ensure necessary imports (Button, DropdownMenu components, MoreHorizontal icon) are added.
Modify Dashboard.tsx - Add State & Handler:

Action: Still in Dashboard.tsx, add state variables using useState near the top of the component:
TypeScript

const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
const [selectedClientIdForDetails, setSelectedClientIdForDetails] = useState<number | null>(null);
Action: Define the handleViewDetails function within the Dashboard component:
TypeScript

const handleViewDetails = (clientId: number) => {
  console.log(`DEBUG: Viewing details for client ID: ${clientId}`);
  setSelectedClientIdForDetails(clientId);
  setIsDetailModalOpen(true);
};
Action: Ensure this handleViewDetails function is accessible within the cell renderer defined in Step 1 (pass it down or define it appropriately).
Create ClientDetailModal.tsx Component:

Action: Create a new file: client/src/components/dashboard/ClientDetailModal.tsx.
Action: Implement the component using Shadcn's Dialog and TanStack Query's useQuery. Structure example:
TypeScript

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Client } from "@/lib/types"; // Adjust import path if needed
import React from "react"; // Import React

interface ClientDetailModalProps {
  clientId: number | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

// Function to fetch client details - place outside component or in an api service file
const fetchClientDetails = async (clientId: number): Promise<Client & { entities: any[] }> => { // Assuming API returns entities too
  const response = await fetch(`/api/admin/clients/${clientId}`);
  if (!response.ok) {
    throw new Error(`Failed to fetch client details: ${response.statusText}`);
  }
  const result = await response.json();
  if (result.status !== 'success') {
     throw new Error(result.message || 'API returned non-success status');
  }
  // Assuming the data is nested under result.data based on adminRoutes.ts
  return result.data;
};


export function ClientDetailModal({ clientId, isOpen, onOpenChange }: ClientDetailModalProps) {
  const { data: clientData, isLoading, error, isError } = useQuery<Client & { entities: any[] }, Error>({ // Adjust type based on actual API response
    queryKey: ["clientDetails", clientId],
    queryFn: () => fetchClientDetails(clientId!), // Add non-null assertion
    enabled: !!clientId && isOpen, // Only fetch when modal is open and clientId is valid
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
  });

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Client Details</DialogTitle>
          <DialogDescription>
            Detailed information for the selected client.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4 max-h-[60vh] overflow-y-auto">
          {isLoading && <p>Loading client details...</p>}
          {isError && <p className="text-red-500">Error fetching details: {error?.message}</p>}
          {clientData && (
            <>
              <p><strong>Name:</strong> {clientData.name}</p>
              <p><strong>Contact Name:</strong> {clientData.contactName || 'N/A'}</p>
              <p><strong>Contact Email:</strong> {clientData.contactEmail || 'N/A'}</p>
              <p><strong>Contact Phone:</strong> {clientData.contactPhone || 'N/A'}</p>
              <p><strong>Industry:</strong> {clientData.industry || 'N/A'}</p>
              <p><strong>Address:</strong> {clientData.address || 'N/A'}</p>
              {/* Add other relevant client fields */}
              <h4 className="font-semibold mt-4">Associated Entities:</h4>
              {clientData.entities && clientData.entities.length > 0 ? (
                <ul>
                  {clientData.entities.map((entity: any) => ( // Use specific type if available
                    <li key={entity.id}>{entity.name} (ID: {entity.id})</li>
                  ))}
                </ul>
              ) : (
                <p>No entities associated with this client.</p>
              )}
            </>
          )}
        </div>
        <DialogFooter>
           <DialogClose asChild>
             <Button type="button" variant="secondary">
               Close
             </Button>
           </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
Action: Ensure necessary imports (Dialog components, useQuery, Client type, Button) are added.
Integrate Modal in Dashboard.tsx:

Action: Import the newly created ClientDetailModal at the top of Dashboard.tsx.
Action: Render the modal component within the Dashboard component's return statement:
JavaScript

 <ClientDetailModal
   clientId={selectedClientIdForDetails}
   isOpen={isDetailModalOpen}
   onOpenChange={setIsDetailModalOpen}
 />
Verification:

Action: Restart the application.
Action: Report if the application builds and restarts successfully without errors related to these changes.
Action: Describe how a user would manually test this feature (navigate to dashboard, click actions menu, click "View Details", observe modal with correct data).
Please execute these steps. Focus on correctly implementing the UI changes in Dashboard.tsx and creating the ClientDetailModal.tsx with the data fetching logic.