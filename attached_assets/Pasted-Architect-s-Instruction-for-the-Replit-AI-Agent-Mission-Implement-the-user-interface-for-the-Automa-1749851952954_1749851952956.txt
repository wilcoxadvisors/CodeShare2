Architect's Instruction for the Replit AI Agent
Mission: Implement the user interface for the Automatic Accrual Reversals feature.

Current Task: Part 2 - Frontend UI with Date Picker.

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Action: You will add a new section to the journal entry form containing a switch to enable the feature and a date picker to select the reversal date.

Step 1: Add State Management for Accrual Fields

Locate the useState hook that manages the journalData state object.

Ensure this state object is initialized with isAccrual and reversalDate properties, pulling from an existingEntry if available.

TypeScript

// Inside the useState for journalData
const [journalData, setJournalData] = useState({
    // ... existing fields (reference, date, description, etc.)
    isAccrual: existingEntry?.isAccrual || false,
    reversalDate: existingEntry?.reversalDate ?? "",
});
Ensure the handleChange function can handle the isAccrual switch by adding a case for type === 'checkbox'.

Step 2: Add UI Components to the Form

In the JSX of the JournalEntryForm component, find a suitable location for the new controls. A good place is after the Description Textarea and before the table of journal entry lines.

Insert the following JSX code block. This code uses shadcn/ui components to create the labeled switch and the conditional date picker.

TypeScript

{/* Auto-Reversing Accrual Section */}
<div className="my-6 p-4 border rounded-lg">
  <div className="flex items-center space-x-4">
    <div className="flex items-center space-x-2">
      <Switch
        id="isAccrual"
        checked={journalData.isAccrual}
        onCheckedChange={(checked) =>
          setJournalData((prev) => ({ ...prev, isAccrual: checked, reversalDate: checked ? prev.reversalDate : '' }))
        }
      />
      <Label htmlFor="isAccrual" className="text-base font-medium">
        Auto-Reversing Accrual
      </Label>
    </div>

    {/* Conditional Date Picker */}
    {journalData.isAccrual && (
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant={"outline"}
            className={cn(
              "w-[280px] justify-start text-left font-normal",
              !journalData.reversalDate && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {journalData.reversalDate ? (
              format(new Date(journalData.reversalDate), "PPP")
            ) : (
              <span>Pick a reversal date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0">
          <Calendar
            mode="single"
            selected={journalData.reversalDate ? new Date(journalData.reversalDate) : undefined}
            onSelect={(date) =>
              setJournalData((prev) => ({ ...prev, reversalDate: date ? format(date, 'yyyy-MM-dd') : '' }))
            }
            disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))} // Disable past dates
            initialFocus
          />
        </PopoverContent>
      </Popover>
    )}
  </div>
  {journalData.isAccrual && (
    <p className="text-sm text-muted-foreground mt-2">
      This entry will be automatically reversed on the selected date. The reversal will be posted directly.
    </p>
  )}
</div>
(Note: You may need to add imports for Switch, Popover, PopoverTrigger, PopoverContent, Calendar, CalendarIcon, cn, and format from date-fns if they are not already present.)

Agent, please begin implementing these frontend UI changes.