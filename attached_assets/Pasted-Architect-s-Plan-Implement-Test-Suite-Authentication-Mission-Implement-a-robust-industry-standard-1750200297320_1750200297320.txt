Architect's Plan: Implement Test Suite Authentication
Mission: Implement a robust, industry-standard authentication mechanism for our automated tests to ensure they can run as an authenticated user against our secure API endpoints. This is a two-part mission.

Part 1: Backend (Jest) API Test Authentication
Goal: Enable our backend API tests to run as an authenticated test user.

Plan: We will create a global setup for Jest that logs in once before running the API test suite. It will store the session cookie, and an API helper will attach that cookie to every subsequent request made by the tests.

Instructions for the Agent:

Create Test Helper: Create a new file at tests/api/apiTestHelper.ts. This helper will contain a function that uses axios to make API requests, and it will be responsible for attaching the authentication cookie to the request headers.
Create Global Setup: Create a file at tests/api/setup.ts. This file will run once before the API tests. It will use the apiTestHelper to call the POST /api/login endpoint with test credentials (e.g., admin/password) and store the resulting connect.sid cookie in a global variable.
Update Jest Config: Modify jest.config.mjs to use this new setup file for all API tests by pointing the setupFilesAfterEnv property to tests/api/setup.ts.
Refactor API Tests: Update the failing API tests in tests/api/ to use the new authenticated request helper instead of making direct axios calls.
Part 2: Frontend (Cypress) E2E Test Authentication
Goal: Enable our E2E user simulations to run as a logged-in user in the browser.

Plan: The standard for Cypress is to create a custom login command that can be called at the beginning of our tests.

Instructions for the Agent:

Create Custom Command: Open cypress/support/commands.ts.
Add cy.login(): Add a new custom command named login. This command will use cy.request() to make a POST request to /api/login with test credentials. Cypress automatically handles the cookie storage and attaches it to all subsequent cy.visit() and cy.request() commands within the test.
Use Command in Tests: Open cypress/e2e/journalEntry.comprehensive.cy.ts. At the top of the main describe block, add a beforeEach(() => { cy.login(); }); hook. This will ensure that the test runner logs in before every single test case in the file.
Implementing this test-level authentication is the final key to unlocking our test suite. It will resolve the database errors and allow the tests to validate the application's protected endpoints correctly. I will now instruct the agent to begin this work, starting with Part 1.