Architect's Mandate: Final Rollback Enforcement

1. Goal:

Eradicate all remnants of the failed react-hook-form refactor from the Journal Entry module. Ensure all components (JournalEntryForm, JournalEntryHeader, JournalEntryLinesTable) are using the stable, consistent useState-based implementation.

2. Definitive Plan:

Stage 1: Force-Revert JournalEntryHeader.tsx

Objective: Replace the incorrect, react-hook-form-dependent code in JournalEntryHeader.tsx with the correct useState-based version.
File to Modify: client/src/features/journal-entries/components/JournalEntryHeader.tsx
Action: Delete the entire content of the existing file and replace it with the code below. This is the correct, stable version of the component.
TypeScript

// In client/src/features/journal-entries/components/JournalEntryHeader.tsx
// REPLACE THE ENTIRE FILE CONTENTS WITH THIS:

import React from "react";
import { format } from "date-fns";
import { AlertCircle, Check, Calendar as CalendarIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

interface JournalEntryHeaderProps {
  journalData: {
    date: string;
    description: string;
    referenceNumber: string;
    isAccrual: boolean;
    reversalDate: string | null;
  };
  setJournalData: React.Dispatch<React.SetStateAction<any>>;
  fieldErrors: Record<string, string>;
  isReferenceDuplicate: boolean;
  displayId: string;
}

export function JournalEntryHeader({
  journalData,
  setJournalData,
  fieldErrors,
  isReferenceDuplicate,
  displayId,
}: JournalEntryHeaderProps) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setJournalData((prev: any) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: Date | undefined) => {
    if (date) {
      setJournalData((prev: any) => ({ ...prev, date: format(date, "yyyy-MM-dd") }));
    }
  };
  
  const handleReversalDateChange = (date: Date | undefined) => {
    if (date) {
      setJournalData((prev: any) => ({ ...prev, reversalDate: format(date, "yyyy-MM-dd") }));
    }
  };

  return (
    <div className="space-y-4 p-4 border rounded-lg">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <Label htmlFor="journalIdDisplay">Journal Entry ID</Label>
          <Input id="journalIdDisplay" value={displayId} readOnly className="mt-1 bg-gray-100" />
        </div>

        <div>
          <Label htmlFor="date">Date</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant={"outline"} className="w-full justify-start text-left font-normal mt-1">
                <CalendarIcon className="mr-2 h-4 w-4" />
                {journalData.date ? format(new Date(journalData.date.replace(/-/g, '/')), "PPP") : <span>Pick a date</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={new Date(journalData.date.replace(/-/g, '/'))}
                onSelect={handleDateChange}
                initialFocus
              />
            </PopoverContent>
          </Popover>
          {fieldErrors.date && <p className="text-red-500 text-sm mt-1">{fieldErrors.date}</p>}
        </div>

        <div>
          <Label htmlFor="referenceNumber">Reference Number</Label>
          <Input
            id="referenceNumber"
            name="referenceNumber"
            value={journalData.referenceNumber}
            onChange={handleChange}
            className="mt-1"
          />
          {isReferenceDuplicate && <p className="text-red-500 text-sm mt-1">Duplicate reference number.</p>}
          {fieldErrors.referenceNumber && <p className="text-red-500 text-sm mt-1">{fieldErrors.referenceNumber}</p>}
        </div>
      </div>

      <div>
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          value={journalData.description}
          onChange={handleChange}
          rows={2}
          placeholder="Enter a description for this journal entry"
          className="mt-1"
        />
        {fieldErrors.description && <p className="text-red-500 text-sm mt-1">{fieldErrors.description}</p>}
      </div>

      <div className="flex items-center space-x-2">
        <Switch
          id="isAccrual"
          checked={journalData.isAccrual}
          onCheckedChange={(checked) => setJournalData((prev: any) => ({ ...prev, isAccrual: checked, reversalDate: checked ? prev.reversalDate : null }))}
        />
        <Label htmlFor="isAccrual">Auto-reversing Accrual</Label>
      </div>

      {journalData.isAccrual && (
        <div>
          <Label htmlFor="reversalDate">Reversal Date</Label>
           <Popover>
            <PopoverTrigger asChild>
              <Button variant={"outline"} className="w-full justify-start text-left font-normal mt-1">
                <CalendarIcon className="mr-2 h-4 w-4" />
                {journalData.reversalDate ? format(new Date(journalData.reversalDate.replace(/-/g, '/')), "PPP") : <span>Pick a reversal date</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={journalData.reversalDate ? new Date(journalData.reversalDate.replace(/-/g, '/')) : undefined}
                onSelect={handleReversalDateChange}
                disabled={(date) => new Date(journalData.date) >= date}
                initialFocus
              />
            </PopoverContent>
          </Popover>
          {fieldErrors.reversalDate && <p className="text-red-500 text-sm mt-1">{fieldErrors.reversalDate}</p>}
        </div>
      )}
    </div>
  );
}
Stage 2: Verification

Objective: Confirm the application is now stable and all components are using the same useState architecture.
Actions:
Restart the application.
Navigate to the "New Journal Entry" page.
Confirm there are no runtime errors. The form must load completely.
This action will synchronize the child component with its parent, resolving the crash and completing the rollback. There will be no more piecemeal fixes.