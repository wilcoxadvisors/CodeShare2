Instructions for Replit AI Agent
Hello Agent. With the backend API for Dimensions now complete, it is time to build the frontend user interface.

High-Level Goal:
Create the initial UI for the Dimension Management page. This first step will focus on creating a page that fetches all dimensions for the current client using our new API and displays them in a list.

MANDATORY INSTRUCTIONS

Part 1: Create the Main Page Component
Create a new directory for this feature: client/src/pages/manage/

Create a new file inside that directory named DimensionsPage.tsx.

Add the following code to this new client/src/pages/manage/DimensionsPage.tsx file. This component will fetch and display the dimensions in a series of cards.

TypeScript

// In client/src/pages/manage/DimensionsPage.tsx

import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { useEntity } from '@/contexts/EntityContext';
import { apiRequest } from '@/lib/queryClient';
import PageHeader from '@/components/PageHeader';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { PlusCircle, Loader2, AlertCircle } from 'lucide-react';

// Define type for a Dimension based on our schema
interface DimensionValue {
  id: number;
  name: string;
  code: string;
}

interface Dimension {
  id: number;
  name: string;
  code: string;
  description: string | null;
  isActive: boolean;
  values: DimensionValue[];
}

const DimensionsPage = () => {
  const { selectedClientId } = useEntity();

  const { data: dimensions = [], isLoading, error } = useQuery<Dimension[]>({
    // This query key will be unique for each client
    queryKey: ['dimensions', selectedClientId],
    // This function will only run if a client is selected
    queryFn: async () => {
      if (!selectedClientId) return [];
      return apiRequest(`/api/clients/${selectedClientId}/dimensions`);
    },
    enabled: !!selectedClientId,
  });

  return (
    <div className="py-6">
      <PageHeader
        title="Dimensions"
        description="Manage dimensions to categorize transactions for powerful reporting."
      >
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Dimension
        </Button>
      </PageHeader>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
        {isLoading && (
          <div className="flex justify-center py-8">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        )}

        {error && (
           <Card className="border-red-200 bg-red-50">
            <CardHeader>
              <CardTitle className="flex items-center text-red-800">
                <AlertCircle className="h-5 w-5 mr-2" />
                Error Loading Dimensions
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-red-700">{(error as Error).message}</p>
            </CardContent>
          </Card>
        )}

        {!isLoading && !error && (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {dimensions.map((dimension) => (
              <Card key={dimension.id}>
                <CardHeader>
                  <CardTitle className="flex justify-between items-center">
                    <span>{dimension.name}</span>
                    <span className={`text-xs font-medium px-2 py-1 rounded-full ${dimension.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
                      {dimension.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </CardTitle>
                  <CardDescription>{dimension.code}</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground mb-4 h-10">{dimension.description || 'No description.'}</p>
                  <h4 className="font-semibold mb-2 text-sm">Values ({dimension.values.length}):</h4>
                  <div className="space-y-1">
                    {dimension.values.length > 0 ? (
                        dimension.values.slice(0, 5).map(value => (
                            <div key={value.id} className="text-sm p-2 bg-gray-50 rounded-md truncate" title={`<span class="math-inline">\{value\.name\} \(</span>{value.code})`}>
                                {value.name}
                            </div>
                        ))
                    ) : (
                        <div className="text-sm text-muted-foreground p-2 text-center">No values created.</div>
                    )}
                    {dimension.values.length > 5 && <div className="text-sm text-muted-foreground p-2">...and {dimension.values.length - 5} more.</div>}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default DimensionsPage;
Part 2: Add the New Page to the Application
Now we must make the new page accessible via a URL and a link in the sidebar.

File to Modify: client/src/App.tsx

Import the new component: import DimensionsPage from './pages/manage/DimensionsPage';
Add a new route for it inside the <Routes> block:
TypeScript

<Route path="/manage/dimensions" element={<AppLayout><ProtectedRoute component={DimensionsPage} /></AppLayout>} />
File to Modify: client/src/components/Sidebar.tsx

Import an icon for the new link, for example: import { Grid3X3 } from 'lucide-react';
Add a new <NavItem /> to the navigation list, for example, after "Consolidation":
TypeScript

 <NavItem 
    path="/manage/dimensions" 
    icon={<Grid3X3 className="h-5 w-5 mr-2" />} 
    label="Dimensions" 
 />
Next Step:
After this, the Dimensions page will be fully integrated and will display the data from your backend. The next step will be to make the "New Dimension" button functional by adding a creation form.