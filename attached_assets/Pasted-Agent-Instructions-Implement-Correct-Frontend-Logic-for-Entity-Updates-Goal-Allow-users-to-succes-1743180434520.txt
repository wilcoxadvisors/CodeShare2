Agent Instructions: Implement Correct Frontend Logic for Entity Updates

Goal: Allow users to successfully edit entities added during the current setup session (Step 2) by modifying the frontend state directly, without making unnecessary/failing API calls using temporary IDs.

Context: Your previous fix (Checkpoint 44bb85fe) prevents the backend 500 error by rejecting large temporary IDs. Now, you need to modify the frontend (EntityManagementCard.tsx) to handle updates to these temporary entities correctly by updating local state instead of calling the API.

Relevant Files:

client/src/components/setup/EntityManagementCard.tsx (Handles edits and onSubmit)
client/src/components/setup/SetupStepper.tsx (Manages setupEntities state, needs update callback)
Refactoring Steps:

Modify onSubmit in EntityManagementCard.tsx:
Action: Locate the onSubmit function and the logic branch for updates (if (isEditing && currentEntityId)).
Action: Add a check to determine if currentEntityId is a temporary local ID (e.g., check if it's a large number/timestamp) or a real database ID (likely a smaller integer, if that distinction exists, or check if the entity object has a localId property vs a real id).
Action:
If currentEntityId is a temporary/local ID:
Do NOT call updateEntityMutation.mutate(...).
Instead, construct the updatedLocalEntityData object based on the form values and the temporary ID.
Call a new prop function like props.onEntityUpdated(updatedLocalEntityData) to pass the updated data back to SetupStepper.
Reset the form and editing state.
If currentEntityId is a real database ID:
(Keep existing logic) Call updateEntityMutation.mutate(...) with the database ID and payload.
Implement onEntityUpdated Callback in SetupStepper.tsx:
Action: Open client/src/components/setup/SetupStepper.tsx.
Action: Create a new function handleEntityUpdated (or similar) that accepts the updatedEntityData object.
Action: Inside handleEntityUpdated, update the setupEntities state array. Use .map() to find the entity with the matching localId (or temporary ID) and replace it with updatedEntityData. Ensure immutability (e.g., setSetupEntities(prev => prev.map(e => e.localId === updatedEntityData.localId ? updatedEntityData : e));). Log the state change.
Action: Pass this handleEntityUpdated function down as the onEntityUpdated prop to the <EntityManagementCard /> component instance.
Verify Fix via Simulation:
Action: Authenticate (admin/password123).
Action: Simulate the UI flow: Dashboard -> Add Client -> Step 1 -> Step 2 -> Add Entity -> Edit Entity -> Change Field -> Click "Save Changes".
Action: Monitor Frontend Console Logs.
Report: Did the edit save without errors? Did the entity list (UI state) update correctly? Was a PUT request made to the backend? (It should NOT have been made if only editing a locally added entity).