Task Assignment: Manual UI/UX Verification for CoA Schema Updates (Task B.1 Finalization)

Context:
The Chart of Accounts schema was updated (renaming code to accountCode, adding reporting fields, adding unique constraint, verifying parentId constraint), and a manual SQL migration was created. Concerns exist about potential regressions in existing functionality and user experience, especially regarding UI elements interacting with the CoA.

Goal:
Manually verify key UI workflows and components related to the Chart of Accounts module to ensure they function correctly, reflect the schema changes where appropriate, handle new constraints gracefully, and maintain a good user experience (including basic responsiveness).

Instructions:

Action: Setup:

Ensure the application (npm run dev) is running with the latest code from checkpoint 398d418e.
Crucially: Ensure the database schema reflects the latest changes. This likely requires manually applying the SQL script migrations/accounts_schema_updates.sql to your development database since the automated tools failed. Confirm the migration was applied successfully.
Log in to the application as a test user (e.g., admin/password123).
Action: Navigate and Verify CoA Page Display:

Navigate to the Chart of Accounts page for a specific client (e.g., Client ID 1).
Observe: Does the CoA page load without errors? Is the list/tree of accounts displayed correctly? Does the hierarchy rendering still look correct?
Verify accountCode Display: Confirm that the column previously showing code now correctly displays the accountCode values.
Action: Verify UI Handling of CRUD & Constraints:

Add Account:
Click "Add Account". Does the form appear correctly?
Does the parent account selection dropdown still work?
Are the new fields (fsliBucket, internalReportingBucket, item) visible in the form? (Note: It's okay if they aren't meant to be user-editable yet, just report if they are visible or not).
Fill out the form and try to save a valid new account. Does it save successfully and appear in the list/tree?
Test accountCode Uniqueness via UI:
Try to add another account for the same client using the exact same accountCode as an existing account.
Observe: Does the UI prevent submission or display a clear validation error message indicating the code must be unique? (This tests if the frontend/backend handles the unique constraint violation gracefully).
Edit Account:
Select an existing account and click "Edit". Does the edit form load correctly with the account's data?
Modify a standard field (e.g., accountName).
If the new reporting fields are visible, try modifying them.
Click "Save". Does the update succeed? Is the updated information reflected in the CoA list/tree?
Test Deletion Constraint via UI:
Try to delete an account that has no child accounts. Does it delete successfully?
Try to delete an account that has child accounts.
Observe: Does the UI prevent deletion and show an appropriate error/warning message (reflecting the onDelete: 'restrict' database constraint)?
Action: Verify Related UI Elements:

Import/Export Buttons: Are the "Import" and "Export" buttons still visible and clickable on the CoA page? (We are not testing the full import/export process here, just that the UI entry points are not broken).
Header Context Selector: Does the global client/entity selector in the header still function correctly? Does changing the client update the CoA view appropriately?
Action: Verify Basic Responsiveness:

Using browser developer tools, switch to a mobile viewport (e.g., iPhone 12/13).
Observe: Does the CoA page layout adjust reasonably? Are the main elements (account list/tree, buttons) still visible and usable? (Perfect mobile styling isn't the goal here, just checking for major layout breakage).
Verification:

Each step above should be checked and the outcome noted.
Reporting:

Provide a step-by-step report of your findings for each action item above.
For each check, clearly state Pass or Fail.
If Fail, describe the unexpected behavior, any error messages (UI or console), and visual glitches observed.
Specifically confirm how the UI handled the accountCode uniqueness test and the deletion attempt of a parent account.
Note whether the new reporting fields were visible/editable in the Add/Edit forms.
Include screenshots or console logs only if necessary to illustrate a failure or unexpected behavior.