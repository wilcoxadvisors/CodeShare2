Mission: Production Readiness Hardening
Directive: To implement the final architectural fixes for data validation and UI workflow permissions.

Task 1: Eradicate Data Payload & Validation Bugs (Fixes #6, #7, #19, #22)
Analysis: The 400 Bad Request error ("reversalDate": "Expected string, received null") is the smoking gun. Our backend validation requires an optional string, but the frontend is sending null when the accrual feature is off. The same data-handling issue is affecting the reference field and copied entries. The fix is to ensure the frontend payload is always 100% compliant with the backend's expectations.

Your Instructions:

Open File: client/src/features/journal-entries/components/JournalEntryForm.tsx.

Locate all three submission handlers: handleSaveDraft, handleSubmitForApproval, and handlePostEntry.

Surgically Edit the formData object in all three handlers. You must change how reversalDate is set. This is the fix that resolves the 400 errors and the validation bug (#22).

Find this line in each handler:
TypeScript

reversalDate: journalData.isAccrual ? journalData.reversalDate : null,
Change it to this precise line:
TypeScript

reversalDate: journalData.isAccrual ? journalData.reversalDate : undefined,
Architect's Note: Sending undefined ensures the key is omitted from the JSON payload if not applicable, which the backend's optional() validator correctly handles. Sending null is an explicit value that causes a type mismatch.
While in the formData object, ensure the referenceNumber is being sent correctly to fix the data loss on that field (#6). The line should be:

TypeScript

referenceNumber: journalData.referenceNumber,
Task 2: Finalize Attachment Permissions & Workflow (Fixes #5, #8, #14, #23)
Analysis: The attachment controls appear at the wrong times because the isInEditMode prop is being passed incorrectly from the two pages where attachments appear: the "detail/view" page and the "edit/new" form. We will correct this at the source.

Your Instructions:

Fix the View Page:

Open File: client/src/features/journal-entries/pages/JournalEntryDetail.tsx.
Find the <AttachmentSection ... /> component call.
Surgically edit this prop to hardcode it to false. The view page should never be in edit mode. This fixes issues #8 and #14.
JavaScript

// CHANGE THIS:
isInEditMode={...some_logic...} 
// TO THIS:
isInEditMode={false}
Fix the Edit/New Page:

Open File: client/src/features/journal-entries/components/JournalEntryForm.tsx.
Find the <AttachmentSection ... /> component call.
Verify its isInEditMode prop is set correctly. It must allow editing for new entries or existing drafts. This is the correct, industry-standard implementation. This edit fixes issue #23.
JavaScript

// VERIFY THIS PROP IS SET EXACTLY AS FOLLOWS:
isInEditMode={!existingEntry || existingEntry.status === 'draft'}
After performing these two sets of surgical edits, all remaining critical and data-loss bugs will be resolved. The system will then be stable and ready for the next phase of development.