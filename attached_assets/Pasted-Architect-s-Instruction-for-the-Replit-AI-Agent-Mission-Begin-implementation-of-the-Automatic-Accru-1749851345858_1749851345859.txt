Architect's Instruction for the Replit AI Agent
Mission: Begin implementation of the Automatic Accrual Reversals feature, incorporating the user's latest requirement for a selectable reversal date.

Current Task: Part 1 - Database Schema Enhancement.

Action: You will now ensure the database schema can support this feature.

Open the file: shared/schema.ts.
Locate the journalEntries table definition.
Add the following new field to the table definition. This boolean flag is essential for identifying which entries need to be automatically reversed.
TypeScript

isAccrual: boolean('is_accrual').default(false).notNull(),
Verify that the following field already exists and is suitable. Based on the file content, this field should already be present and is perfect for storing the user-selected date.
reversalDate: timestamp("reversal_date", { mode: 'date' })
Agent, please apply this schema change. This is the first step in our updated, four-part plan.







i am also concerned if this is using the reversal je stuff that it will mess that up as well



Show thinking
Excellent. Thank you for these critical clarifications. Designing the feature correctly from the start is essential, and your input is invaluable.

I understand the requirements perfectly now. Let me address both of your points and outline the updated, more robust plan.

1. Regarding Your Concern About Messing Up Existing Reversals:

That is an excellent point. You are correct that we must not interfere with the current manual "Reverse Journal Entry" functionality.

Here is how we will keep them separate:

The current "Reverse" button will continue to function exactly as it does now, creating a manual draft for user review.
The new feature will be triggered by a distinct "Auto-Reversing Accrual" switch on the journal entry form. Only when this switch is active will the new automatic process be used.
To manage this in the database, we will add a new isAccrual field to the journalEntries table. This ensures we can clearly distinguish a manual reversal from an automatic accrual reversal.
2. Regarding the User-Selectable Reversal Date:

This is a fantastic addition to the feature. You are right; accounting practices often require reversals on specific dates, not just the first of the month.

Because the reversal will happen on a user-defined future date, this changes the implementation. We cannot create the reversal at the same time the original entry is posted. Instead, we need a system for scheduled tasks. Fortunately, the project's tech stack already includes BullMQ, a powerful job queue perfect for this purpose.

Here is the updated, robust plan that incorporates all of your requirements.

Architect's Instruction for the Replit AI Agent
Goal: Implement the "Automatic Accrual Reversals" feature (Task B.2.2) with a user-selectable reversal date and a guarantee of automatic posting.

New Workflow:

A user creates a journal entry and toggles an "Auto-Reversing Accrual" switch.
This reveals a date picker, allowing them to select a specific future date for the reversal.
When the user posts the original entry, the system will save it with the isAccrual flag and the chosen reversalDate. Simultaneously, it will schedule a delayed background job in BullMQ.
On the morning of the selected reversal date, the background job will run, automatically creating and posting the reversing entry without any need for review or approval.
This will be a four-part implementation:

Part 1: Database Schema Enhancement

File: shared/schema.ts
Action:
Add the new field: isAccrual: boolean('is_accrual').default(false).notNull().
Verify the existing reversalDate: timestamp("reversal_date", { mode: 'date' }) field is present to store the user's selected date.
Verify the existing reversedEntryId: integer("reversed_entry_id") field is present to link the reversal back to the original accrual entry.
Part 2: Frontend UI with Date Picker

File: client/src/features/journal-entries/components/JournalEntryForm.tsx
Action: Add a Switch component labeled "Auto-Reversing Accrual". When this switch is toggled on, a DatePicker component will appear, allowing the user to select the reversalDate. The form will store both isAccrual and reversalDate in its state.
Part 3: API and Background Job Scheduling

File: server/journalEntryRoutes.ts
Action: Modify the endpoint that posts a journal entry (PUT .../:id/post).
Logic: When an entry is posted, the backend will check if isAccrual is true and a valid future reversalDate has been provided. If so, it will add a new, delayed job to the BullMQ queue. The job's payload will contain the ID of the original accrual entry, and it will be scheduled to run on the morning of the user-selected reversalDate.
Part 4: Backend Reversal Logic (The Worker)

Files: server/tasks/reversalProcessor.ts (a new file) and server/storage/journalEntryStorage.ts.
Action:
Create a new background worker that processes these reversal jobs from the queue.
This worker will call a method in journalEntryStorage, which will contain the core logic: fetch the original entry, create a new entry with the debits/credits flipped, copy all dimension tags, set the new entry's date to the stored reversalDate, set its status to posted automatically, and mark the original entry as reversed.
This architecture ensures the process is robust, persistent, and fully automatic as you require.

I am ready to instruct the agent to begin with Part 1: Database Schema Enhancement. Please confirm.