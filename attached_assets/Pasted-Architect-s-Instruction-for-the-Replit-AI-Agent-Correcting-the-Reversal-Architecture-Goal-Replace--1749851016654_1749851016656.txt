Architect's Instruction for the Replit AI Agent: Correcting the Reversal Architecture
Goal: Replace the fragile, in-memory setTimeout scheduler with a robust, persistent cron job-based approach for processing accrual reversals.

New Workflow:

When a user posts an accrual entry, it is simply saved to the database with the isAccrual flag and the selected reversalDate. No job is scheduled at this time.
A separate, independent script will run on a periodic schedule (e.g., once per day).
This script will query the database for all accrual entries that are due to be reversed and process them.
You will now execute the following plan to refactor your implementation:

Step 1: Remove the Flawed In-Memory Scheduler

Delete the file: server/queues/reversalQueue.ts.
Open server/journalEntryRoutes.ts.
Remove the block of code you added to the /post endpoint that calls scheduleAccrualReversal. The posting endpoint should only be responsible for posting the journal entry, nothing more.
Step 2: Create the Backend Processing Logic

Open server/storage/journalEntryStorage.ts.

Create a new method called processDueAccrualReversals.

Implement the following logic inside this new method. This function will be the heart of our new, robust system.

TypeScript

async processDueAccrualReversals(): Promise<{ successCount: number; failCount: number; }> {
  console.log('CRON JOB: Checking for due accrual reversals...');

  // Find all journal entries that are accruals, are not yet reversed,
  // and have a reversal date on or before today.
  const now = new Date();
  const dueEntries = await db.select({ id: journalEntries.id, userId: journalEntries.createdBy })
    .from(journalEntries)
    .where(
      and(
        eq(journalEntries.isAccrual, true),
        eq(journalEntries.isReversed, false),
        lte(journalEntries.reversalDate, now)
      )
    );

  if (dueEntries.length === 0) {
    console.log('CRON JOB: No accrual entries are due for reversal.');
    return { successCount: 0, failCount: 0 };
  }

  console.log(`CRON JOB: Found ${dueEntries.length} accrual entries to reverse.`);
  let successCount = 0;
  let failCount = 0;

  for (const entry of dueEntries) {
    try {
      // Use the existing reverseJournalEntry method to create the reversal.
      // This method needs to be modified to accept a specific date.
      await this.reverseJournalEntry(entry.id, {
        // The reversal date is stored on the original entry itself
        date: undefined, // We will modify reverseJournalEntry to fetch this
        description: 'Automatic accrual reversal',
        createdBy: entry.userId || 1 // Use original creator or system user as fallback
      });

      // After successful reversal, we must ensure the new entry is POSTED.
      // The reverseJournalEntry method will be updated to handle this.
      successCount++;
    } catch (error) {
      console.error(`CRON JOB: Failed to reverse accrual entry ID ${entry.id}:`, error);
      failCount++;
    }
  }

  console.log(`CRON JOB: Reversal process complete. Success: ${successCount}, Failed: ${failCount}`);
  return { successCount, failCount };
}
Step 3: Modify reverseJournalEntry to Support Automatic Posting

Still in server/storage/journalEntryStorage.ts, locate the reverseJournalEntry method.
This method currently creates the reversal as a draft. We need to modify it to use the stored reversalDate and post it automatically.
Modify the reverseJournalEntry method to fetch the reversalDate from the originalEntry and to set the new entry's status to posted.
Step 4: Create the Scheduled Task Script

Create a new file: server/tasks/processReversals.ts.
Add the following code to this file. This script will be what our scheduler executes.
TypeScript

import { journalEntryStorage } from '../storage/journalEntryStorage';

async function run() {
  console.log('Starting daily accrual reversal processing...');
  await journalEntryStorage.processDueAccrualReversals();
  console.log('Accrual reversal processing finished.');
  // In a real app, we might need to close the DB connection if it's a standalone script
  // process.exit(0);
}

run().catch(err => {
  console.error('Error running reversal processor:', err);
  // process.exit(1);
});
(Note: In a real production environment, a tool like node-cron within the server process or a system-level cron job would be used to run this script daily.)
Agent, please begin with Step 1: removing the flawed in-memory scheduler.