MANDATORY Fix for All Dimension-Related Issues
Agent, you will follow this two-part plan precisely to fix all outstanding bugs with the Dimensions feature. All previous attempts are to be discarded.

Part 1: Fix the Crash on the Main Dimensions Page

File to Modify: client/src/pages/manage/DimensionsPage.tsx

Action: The useQuery hook is fetching an object, but the component is trying to map it as an array. You must correctly unwrap the data property before passing it to the UI.

Replace the existing useQuery for dimensions with this exact code:

TypeScript

const { data: dimensionsResponse, isLoading, error } = useQuery<any>({
  queryKey: ['dimensions', selectedClientId],
  queryFn: async () => {
    if (!selectedClientId) return null;
    return apiRequest(`/api/clients/${selectedClientId}/dimensions`);
  },
  enabled: !!selectedClientId,
});

// Correctly and safely unwrap the nested data array
const dimensions = (dimensionsResponse && Array.isArray(dimensionsResponse.data))
  ? dimensionsResponse.data
  : [];
Part 2: Fix the Refresh Issue in the "Manage Values" Dialog

File to Modify: client/src/features/manage/DimensionValuesManager.tsx

Action: This component has become overly complex. Simplify it and ensure the mutations correctly invalidate the cache. This is the only thing needed to fix the refresh bug.

Remove all useQuery hooks from this file. This component should not fetch its own data. It must rely on the dimension object passed to it as a prop.
Remove all manual refetchQueries and refetchDimensions calls. They are unnecessary and are causing issues.
Ensure every single mutation (createValueMutation, updateValueMutation, deleteValueMutation) has a simple onSuccess handler that only does two things: shows a toast message and invalidates the query.
Example of the correct, simple onSuccess handler for ALL mutations in this file:

TypeScript

onSuccess: () => {
  toast({ title: "Success", description: "Your action was successful." });

  // This is the ONLY line needed to trigger a refresh.
  queryClient.invalidateQueries({ queryKey: ['dimensions', selectedClientId] });

  // Perform any necessary local state cleanup (e.g., closing a modal).
},
This two-part solution will stabilize the entire feature. The main page will no longer crash, and the "Manage Values" dialog will update instantly after any change.