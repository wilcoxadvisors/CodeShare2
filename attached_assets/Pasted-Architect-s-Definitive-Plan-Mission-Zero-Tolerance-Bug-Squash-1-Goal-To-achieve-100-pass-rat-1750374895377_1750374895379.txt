Architect's Definitive Plan: Mission - Zero-Tolerance Bug Squash

1. Goal:

To achieve 100% pass rate on our verification checklist by fixing all outstanding data persistence and workflow bugs. The module must be stable, reliable, and trustworthy.

2. Definitive Plan:

This will be a multi-stage mission targeting each category of failure.

Stage 1: Fix All Data Persistence Failures (#6, #7, #10)

Problem: Reference Suffix, Date, and Auto-accrual data is being lost on save. This is a complete failure of the frontend to correctly construct the data payload for the backend.

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Action: The formData object created in the handleSaveDraft, handleSubmitForApproval, and handlePostEntry functions is fundamentally incorrect. The agent must replace the formData object in all three of those functions with the following, correct structure. This is not optional.

JavaScript

// This exact object structure must be used in all submission handlers.
const formData = {
  date: journalData.date,
  referenceNumber: journalData.referenceNumber,
  referenceUserSuffix: journalData.referenceUserSuffix || "",
  description: journalData.description,
  status: "draft", // (or "pending_approval" or "posted")
  isAccrual: journalData.isAccrual,
  reversalDate: journalData.isAccrual ? journalData.reversalDate : null,
  lines: lines.map(transformLineForBackend) // Assumes the helper function is correct
};
Stage 2: Fix All Attachment Failures (#5, #9)

Problem: Attachments are not being saved on create/edit, and not loaded on edit. This is a failure of both the frontend submission logic and the backend retrieval logic.
Action 1 (Frontend): In client/src/features/journal-entries/components/JournalEntryForm.tsx, the onSuccess handlers for the createEntry and updateEntry mutations must call the attachment upload function.
JavaScript

onSuccess: async (result) => {
  const entryId = result.id || result.entry?.id;
  if (uploadPendingFilesRef.current && entryId) {
    await uploadPendingFilesRef.current(entryId);
  }
  // ... then invalidate queries
}
Action 2 (Backend): In server/storage/journalEntryStorage.ts, the getJournalEntry function must be corrected to reliably include files. The previous fix was insufficient. The agent must ensure the function looks like this:
TypeScript

// In getJournalEntry...
const entry = await db.query.journalEntries.findFirst({ ... });
if (entry) {
    if (includeFiles) {
        // This manual fetch is mandatory.
        const files = await this.getJournalEntryFiles(id);
        (entry as any).files = files || [];
    }
    return entry;
}
Stage 3: Fix Cache Invalidation & UI State (#4, #8)

Problem: The journal entry list is not updating, and the attachment UI shows an upload button in read-only mode.
Action 1 (Cache): In client/src/features/journal-entries/components/JournalEntryForm.tsx, inside the onSuccess handlers, the invalidation call must be precise.
JavaScript

queryClient.invalidateQueries({
  queryKey: ["journal-entries", effectiveClientId, entityId],
  exact: true,
});
Action 2 (UI State): In client/src/features/journal-entries/components/AttachmentSection.tsx, the upload button and file input must be wrapped in a conditional check.
JavaScript

{isInEditMode && (
  <div>
    {/* ... The file <input> and related UI ... */}
  </div>
)}
4. Final Verification

After this mission is complete, we will run the entire verification checklist again. I expect every single data-related bug to be resolved. This is our top and only priority.