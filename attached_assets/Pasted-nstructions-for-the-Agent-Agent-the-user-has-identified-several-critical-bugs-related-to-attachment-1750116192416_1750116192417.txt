nstructions for the Agent
Agent, the user has identified several critical bugs related to attachments and navigation in the Journal Entry module. The root cause is improper state management and cache invalidation.

Mission: You will fix the attachment workflow by correcting the navigation logic and implementing proper, proactive cache invalidation.

Plan:

Part 1: Fix the Navigation Bug

File to Modify: client/src/features/journal-entries/pages/JournalEntryDetail.tsx

Action: Locate the onClick handler for the "Edit" button.

Required Logic Change: The Maps(...) call within this handler is using a non-hierarchical URL. You must correct it to build the full, proper URL, including the current clientId and entityId.

Correct URL Structure: /clients/${clientId}/entities/${entityId}/journal-entries/${entryId}/edit

Part 2: Fix the Stale Data (Cache Invalidation)

File to Modify: client/src/features/journal-entries/hooks/attachmentQueries.ts

Action: Locate the useDeleteJournalEntryFile mutation hook.

Required Logic Change: The onSuccess handler for this mutation is not correctly invalidating all necessary data. It needs to refetch both the attachment list AND the main journal entry object.

TypeScript

// Inside useDeleteJournalEntryFile -> onSuccess:
onSuccess: (data, variables) => {
    toast({ title: "File Deleted" });

    // 1. Invalidate the specific query for the attachment list
    queryClient.invalidateQueries({
        queryKey: ['journalEntryAttachments', variables.journalEntryId],
        exact: true,
    });

    // 2. ALSO invalidate the main query for the journal entry itself
    // This ensures the `files` array within the JE object is updated.
    queryClient.invalidateQueries({
        queryClient.invalidateQueries({
            queryKey: [getJournalEntryUrl(variables.clientId, variables.entityId, variables.journalEntryId)]
        });
    });
},
Part 3: Fix the Permissions Bug

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx
Component: AttachmentSection
Action: The logic that determines if files can be modified is flawed. It should only be possible to add or delete files if the user is actively editing a draft journal entry.
Required Logic Change: Find the canModifyAttachments constant. Ensure its logic checks that isInEditMode is true AND status is 'draft'. This will correctly disable the file dropzone and delete buttons when just viewing the entry.
Your first task is to execute Part 1: Fix the Navigation Bug. Correct the Maps call for the "Edit" button to use the full, hierarchical URL.