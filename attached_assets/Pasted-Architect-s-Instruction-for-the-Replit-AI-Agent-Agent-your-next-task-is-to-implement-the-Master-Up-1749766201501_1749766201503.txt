Architect's Instruction for the Replit AI Agent
Agent, your next task is to implement the "Master Upload" functionality. This will allow the user to upload a single CSV file to create and update values across multiple dimensions.

Part 1: Backend - Implement Master Upload Endpoint
Goal: Create a new, robust API endpoint that can parse the master CSV, validate its contents, and perform create/update operations on the database.

Create New API Route:

File to Modify: server/routes/dimensionRoutes.ts
Action: Add a new POST route: /api/clients/:clientId/master-values-upload.
Middleware: This route must use multer to handle a single file upload named file.
Implement Complex Route Handler Logic:

This handler must perform a multi-step validation process, similar to the COA import: a. Parse the CSV: Expect headers like dimension_code, value_code, value_name, value_description, and is_active. b. Pre-fetch Data: For the given clientId, fetch all existing dimensions and dimension values from the database. This data will be used for validation. c. Iterate and Validate Rows: Loop through each row of the parsed CSV. i. Find the dimensionId by matching the row's dimension_code with the pre-fetched dimensions. If not found, log it as an error for that row. ii. Check if a value with the same value_code already exists for that dimension. iii. If it exists, it's an UPDATE. If not, it's a CREATE. d. Return Detailed Results: After processing, the API should return a detailed JSON summary, such as: { created: 50, updated: 12, errors: [ { row: 5, message: "Invalid dimension_code 'XYZ'" } ] }.
Create New Storage Method:

File to Modify: server/storage/dimensionStorage.ts
Action: Create a new method, for example, bulkUpsertDimensionValues.
Logic: This method must take the processed data from the API and perform all the required database inserts and updates within a single database transaction to ensure data integrity.
Part 2: Frontend - Connect Upload UI
(To be performed after the backend endpoint is complete)

File to Modify: client/src/pages/manage/DimensionsPage.tsx
Action: Wire up the "Upload Master CSV" button.
Logic:
Create a useMutation hook to POST the selected file to the new /api/clients/:clientId/master-values-upload endpoint.
While the mutation is pending, show a loading state (e.g., a spinner).
On onSuccess, display the detailed results summary from the API and call queryClient.invalidateQueries to refresh the entire page's data.
On onError, display a user-friendly error message.
Agent, please begin with Part 1: Implementing the new master-values-upload backend endpoint and its complex validation logic.