Specific cause identified:
The server setup includes a graceful shutdown handler which immediately closes the HTTP server and database connections if it receives a certain signal (e.g., SIGINT, SIGTERM):

Here's the key snippet from your uploaded file:

javascript
Copy
Edit
const gracefulShutdown = async (signal: string) => {
  log(`Received ${signal}, gracefully shutting down...`);
  
  // Close HTTP server first to stop accepting new connections
  await new Promise<void>((resolve) => {
    server.close(() => {
      log('HTTP server closed');
      resolve();
    });
  });
  
  // Then close all database connections
  try {
    await pool.end();
    log('Database connections closed');
  } catch (err) {
    log(`Error closing database connections: ${err}`, 'error');
  }
  
  log('Shutdown complete');
  process.exit(0);
};
The problem is not with this code itself, but rather that something is causing the gracefulShutdown function to run immediately on server startup.

Reasons why this might occur:
Incorrect invocation of shutdown signal:
Somewhere else in your application or initialization code (e.g., an earlier middleware or setup step) could be inadvertently calling gracefulShutdown.

Environment or initialization script error:
Your application may be encountering an exception or error during initialization (e.g., initDatabase(), route registration), which triggers a shutdown signal or uncaught error handler.

Recommended next steps to fix this issue:
1. Check the logs immediately before the shutdown:

Check your logs for the following entry:

php-template
Copy
Edit
Received <signal>, gracefully shutting down...
Determine what <signal> is being logged (e.g., SIGINT, SIGTERM, etc.).
This will indicate precisely what triggered the shutdown.

2. Review initialization functions carefully:

await initDatabase();

await registerRoutes(app);

await setupVite(app, server); (development mode)

serveStatic(app); (production mode)

Ensure none of these throw errors or exit prematurely.

3. Check the startup environment and scripts:

Make sure your environment variables and other configurations (database credentials, file paths) are correct and available during startup.

Check for accidental calls to process.exit() or exceptions thrown at module loading time.

How to debug quickly:
You can add more logging to immediately pinpoint what's causing the shutdown. For example:

javascript
Copy
Edit
(async () => {
  try {
    log('Starting initialization...');
    await initDatabase();
    log('Database initialized.');

    startEntityIdsMonitoring();
    log('Monitoring initialized.');

    const server = await registerRoutes(app);
    log('Routes registered.');

    // ... continue logging each step
  } catch (error) {
    log(`Initialization error: ${error}`, 'error');
    process.exit(1);
  }
})();
By doing so, you'll quickly see where the script stops executing.