Updated Instructions.md for Wilcox Advisors Accounting System.

only modify for changes
ðŸ“Œ Onboarding Flow (Explicitly Updated)
The onboarding workflow is simplified to explicitly include only:
â€¢	Client Setup
o	Collect: Name, Legal Name, Address, Tax Info, Industry, Contacts
â€¢	Default Entity Creation
o	Automatically created after successful Client creation.
o	Uses explicitly the Clientâ€™s Name and Industry as defaults.
Note:
â€¢	Historical Data, Consolidation Group, and Chart of Accounts (CoA) setups are explicitly excluded from onboarding.
â€¢	Historical data will be explicitly handled through the Journal Entry batch upload module.
________________________________________
ðŸ“Œ Industry Dropdown Alignment & Consistency
â€¢	Maintain industry dropdown lists explicitly from a single source of truth at:
bash
CopyEdit
client/src/lib/industryUtils.ts
â€¢	Explicitly ensure ALL components (ClientSetupCard.tsx, EntityManagementCard.tsx, EntityForm.tsx, ClientOnboardingForm.tsx, etc.) import and utilize this centralized source.
â€¢	Immediately remove duplicate implementations of utility functions like ensureIndustryValue explicitly from individual components.
________________________________________
ðŸ“Œ Core Accounting Tasks (Explicitly Corrected Status)
ðŸ”„ Task B.1: Chart of Accounts (CoA) â€“ IN PROGRESS
â€¢	Priority:
o	Explicitly fix and verify the import/export functionality after recent refactoring.
o	Making sure the manual journal entries work
o	Finalize the UI/UX enhancements and clearly document all edge-case validations.
â€¢	Ensure consistency and explicitly verify hierarchical CoA across multiple entities.
ðŸ”„ Task B.2: General Ledger & Journal Entries (GL/JE) â€“ IN PROGRESS
â€¢	Clearly finalize and explicitly verify batch journal entry upload functionality and UI.
â€¢	Expand comprehensive automated testing explicitly covering all key edge cases.
ðŸ”² Task B.3: Accounts Payable Backend Foundation â€“ NOT STARTED
â€¢	Next explicit priority after completion and verification of B.1 and B.2.
________________________________________
ðŸ“Œ Continuous Refactoring & Code Quality Requirements
Throughout every task explicitly:
â€¢	Refactor continuously from monolithic to modular/microservice architecture:
o	Clearly ensure each module handles single, explicit responsibilities.
o	Immediately extract logic from large files/functions into smaller, maintainable, explicitly named modules and services.
â€¢	Proactively search for and remove explicitly:
o	Duplicate implementations, particularly resulting from refactoring.
o	Outdated or unused code, especially from old testing, agent mistakes, or deprecated implementations.
o	Run tools like ts-prune or Knip periodically to clearly detect unused or outdated code explicitly:
bash
CopyEdit
npx ts-prune
npx knip
o	Explicitly review results and safely remove verified unnecessary code.
________________________________________
ðŸ“Œ Immediate Verification Checklist (Explicitly Required)
â€¢	Onboarding explicitly matches simplified flow:
o	Client â†’ Automatic Default Entity creation
â€¢	Industry dropdown lists explicitly aligned and consistent everywhere.
â€¢	Task B.1 import/export functionality explicitly fixed post-refactoring.
â€¢	Continuous refactoring explicitly evident in PRs/code changes.
â€¢	All new and existing modules clearly documented explicitly.
â€¢	Regular execution of unused code detection scripts (ts-prune, knip).

