Prompt 1: Debug & Verify Manual Journal Entry CREATION Flow

"The user reports issues with the basic manual journal entry setup. Let's debug the creation workflow end-to-end.

Objective: Ensure a user can navigate to the 'New Journal Entry' page, fill the form, add lines, see correct balance calculations, successfully submit, and have the entry saved as a 'draft'.

Steps:

Navigate & Initialize:

Go to the page for creating new entries (likely routed to client/src/features/journal-entries/pages/NewJournalEntry.tsx).
Verify the form (client/src/features/journal-entries/components/JournalEntryForm.tsx or client/src/components/forms/ManualJournalEntry.tsx) loads with default values, including today's date and at least one empty line, using defaultJournalEntry from useJournalEntry.ts. Ensure the correct entityId and clientId are defaulted from the context.
Form Interaction & Line Management:

Test filling out header fields (Date, Description, Reference Number).
For line items:
Can you select an account from the Chart of Accounts dropdown? (Verify account fetching works).
Can you input Debit or Credit amounts? Does the input correctly handle numbers and formatting?
Can you add new lines using the 'Add Line' button? Does it use addNewLine from useJournalEntry.ts?
Can you remove lines? Does it use removeLine? Can you remove the last line (should ideally be prevented if JE requires >= 1 line)?
Does the entityCode field populate correctly (e.g., default to the entry's entity)? Can it be changed for intercompany entries?
Balance Calculation Display:

As you add/modify line amounts, do the displayed Debit/Credit totals update correctly?
Does the 'Balanced'/'Unbalanced' status update in real-time? Verify this uses calculateTotals from useJournalEntry.ts.
For entries involving multiple entityCode values on lines, does the UI show if each entity is balanced? Verify this uses calculateEntityBalances.
Client-Side Validation:

Before submitting, does the form trigger validation? Verify this uses validateJournalEntry from useJournalEntry.ts.
Are validation errors (e.g., missing fields, unbalanced state, invalid amounts, both debit/credit on one line) clearly displayed to the user next to the relevant fields or in a summary area?
Submission & API Call:

On clicking 'Save' or 'Submit', trace the createJournalEntry mutation call in useJournalEntry.ts.
Crucially, inspect the apiRequest:
Is the method POST?
Is the URL correct (/api/journal-entries)?
Inspect the data payload: Does it match the structure expected by the backend (createJournalEntrySchema in shared/validation.ts)? Are clientId, entityId, and createdBy included? Is the date formatted correctly? Are the lines formatted correctly (e.g., does the backend expect { type: 'debit', amount: 100 } or { debit: '100', credit: '0' }? Ensure consistency).
Use browser developer tools (Network tab) to see the exact request being sent and the server's response.
Response Handling:

If the API call succeeds, is the success toast shown? Does the UI navigate away or reset correctly?
If the API call fails (e.g., backend validation error, database error): Is the error toast shown? Are specific error messages from the server displayed to the user (check formatZodError usage in server/errorHandling.ts)? Check backend logs (journalEntryRoutes.ts logs errors) for details."