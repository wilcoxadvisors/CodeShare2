Below is a concise “recipe” you can drop straight into JournalEntryForm.tsx.
It solves both problems:

Client-side length & duplicate check (so 400s don’t come back for obvious issues).

Editing an existing entry no longer trips the duplicate check on itself.

1. Add a util right inside the component file (or export it)
ts
Copy
Edit
/** Returns true when the proposed referenceNumber is already used
 *  in another JE that belongs to the same entity. */
function isReferenceDuplicate(
  referenceNumber: string,
  allEntries: JournalEntry[],        // ← the 42 cached rows you already have
  currentEntryId?: number            // ← undefined when creating a new one
) {
  const normalized = referenceNumber.trim().toLowerCase();
  return allEntries.some(e =>
    e.id !== currentEntryId &&            // ignore “myself” when editing
    e.referenceNumber.trim().toLowerCase() === normalized
  );
}
2. Wire it into react-hook-form validation
Find the reference-number <Input> (or <Controller> block) and add the rule:

tsx
Copy
Edit
<Input
  {...register('referenceNumber', {
    required: 'Reference is required',
    minLength: {
      value: 3,
      message: 'Reference must be at least 3 characters'
    },
    validate: value =>
      !isReferenceDuplicate(
         value,
         cachedEntries,          // you already fetch these with useQuery
         editing ? currentEntryId : undefined
      ) || 'Reference already in use for this entity'
  })}
/>
cachedEntries can be obtained from the same useJournalEntries() query ­– no extra request needed.

3. Guard inside handleSubmit (belt-and-suspenders)
Just before you mutate:

ts
Copy
Edit
if (
  isReferenceDuplicate(
    data.referenceNumber,
    cachedEntries,
    editing ? currentEntryId : undefined
  )
) {
  setError('referenceNumber', {
    type: 'duplicate',
    message: 'That reference number is already used'
  });
  return;     // don’t hit the API
}
4. Pass the entry id when editing
If you weren’t already:

ts
Copy
Edit
mutation.mutate({
  ...payload,
  ...(editing && { id: currentEntryId })   // let backend skip self
});
5. Show server-side details (already working!)
Your improved apiRequest now surfaces { message: '…' }.
Wire that into a toast or setError('_form', { message }) and you’re done.

Result
Users see instant feedback (“reference already in use” or “≥3 chars”).

The backend still protects you, but you rarely hit that 400 branch.

Editing an entry with its existing reference no longer errors.

Drop those snippets in, run the form, and the duplicate-reference headache should disappear. Let me know if you hit anything else!