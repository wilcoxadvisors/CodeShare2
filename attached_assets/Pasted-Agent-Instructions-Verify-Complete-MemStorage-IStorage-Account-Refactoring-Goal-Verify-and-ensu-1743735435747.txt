Agent Instructions: Verify & Complete MemStorage/IStorage Account Refactoring

Goal: Verify and ensure the completion of the refactoring task for the Account module: MemStorage must delegate all account methods, IStorage must be simplified, related classes updated, and storage.ts cleaned of unused account-specific helpers.

Relevant Files:

server/storage.ts
server/storage/accountStorage.ts
Implementation & Verification Steps:

Open File: Open server/storage.ts.
Verify MemStorage Delegation:
Action: Carefully examine the MemStorage class definition again.
Action: Confirm that every account-related method body (like getAccount, getAccounts, createAccount, updateAccount, deleteAccount, getAccountsTree, seedClientCoA, importCoaForClient, etc.) consists only of a delegation call using this.accounts.methodName(...). Use the method signatures from IAccountStorage in accountStorage.ts as the definitive list.
Action: Confirm the private accounts: Map<...> and private currentAccountId properties, and the this.accounts = new Map() initialization, have been removed from MemStorage.
Action: If any method still has its original implementation OR if the properties/initialization remain, fix it now by implementing the correct delegation and removing the old code/properties.
Verify IStorage Simplification:
Action: Examine the IStorage interface definition again.
Action: Confirm that all individual account method signatures (e.g., getAccount(...), createAccount(...), etc.) have been removed.
Action: Confirm that the interface now correctly includes the accounts: IAccountStorage; property definition (ensure IAccountStorage is imported).
Action: If the interface is not correct, fix it now.
Verify Class Updates for Interface:
Action: Examine the DatabaseStorage class definition. Confirm it includes the public property public accounts: IAccountStorage; initialized in the constructor with accountStorage.
Action: Examine the MemStorage class definition. Confirm it includes the public property public accounts: IAccountStorage; initialized in the constructor with accountStorage.
Action: If these properties are missing, add them now.
Final Cleanup of Account Helpers:
Action: Review server/storage.ts one last time.
Action: Delete any remaining private helper methods related only to the old account logic that was inside MemStorage (like normalizeHeaderField, getCaseInsensitiveValue, normalizeImportRows, etc., but only if they are confirmed to exist in accountStorage.ts). Ensure these are not used by other non-account modules still in storage.ts.
Restart & Report:
Action: Restart the application (npm run dev or equivalent).
Action: Report build success or failure.
Action: Explicitly confirm that this specific refactoring task is now complete:
All account methods in MemStorage now delegate via this.accounts.
IStorage interface has been simplified.
MemStorage and DatabaseStorage correctly implement the simplified IStorage.
Unused account helper methods have been removed from storage.ts.