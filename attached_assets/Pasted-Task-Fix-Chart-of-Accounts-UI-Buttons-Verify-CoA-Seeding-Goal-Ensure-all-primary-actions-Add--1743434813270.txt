Task: Fix Chart of Accounts UI Buttons & Verify CoA Seeding

Goal: Ensure all primary actions (Add, Edit, Delete, Import, Export) on the Chart of Accounts page are functional and that new clients automatically receive the standard Chart of Accounts upon creation. Improve general UI/UX responsiveness.

Part 1: Verify & Fix Automatic CoA Seeding

Review createClient:
Action: Open server/storage.ts.
Action: Locate the createClient method within the DatabaseStorage class.
Verify: Check if this method reliably calls this.seedClientCoA(newlyCreatedClientId) after the new client record is successfully inserted and before the transaction (if any) is committed.
Implement Fix (If Needed):
Action: If the call to seedClientCoA is missing or incorrectly placed, modify the createClient method to ensure it is called correctly for every newly created client within the same transaction.
Report: State whether a fix was needed and confirm that createClient now includes the call to seedClientCoA.
Part 2: Fix/Implement CoA UI Button Functionality

Review ChartOfAccounts.tsx:
Action: Open client/src/pages/ChartOfAccounts.tsx.
Implement Add/Edit Account Logic:
Action: Identify the button/trigger for adding a new account and the edit action (likely on each row). These probably open a dialog containing the AccountForm component.
Action: Verify or implement the necessary TanStack Query mutations:
useAddAccount: Should use useMutation to call POST /api/clients/:clientId/accounts (Verify this endpoint exists and is correct, or adjust if needed).
useUpdateAccount: Should use useMutation to call PUT /api/clients/:clientId/accounts/:accountId.
Action: Ensure the AccountForm component calls the appropriate mutation (useAddAccount or useUpdateAccount) when submitted.
Action: Implement onSuccess handlers for both mutations to invalidate relevant queries (e.g., queryClient.invalidateQueries(['accounts', clientId]) and queryClient.invalidateQueries(['accounts', 'tree', clientId])) to refresh the account list/tree.
Implement Delete Account Logic:
Action: Identify the delete button/action (likely on each row).
Action: Implement a confirmation step (e.g., using <AlertDialog>) before proceeding.
Action: Verify or implement the useDeleteAccount mutation:
Should use useMutation to call DELETE /api/clients/:clientId/accounts/:accountId (Verify endpoint). The backend should handle this as a soft delete (setting isActive = false).
Action: Ensure the confirmation action calls the useDeleteAccount mutation.
Action: Implement onSuccess handler to invalidate queries and refresh the list/tree.
Verify Import/Export Buttons:
Action: Briefly confirm the "Import" button(s) and "Export CSV" / "Export Excel" buttons exist.
Action: Verify they are connected via onClick to the corresponding handler functions (handleImport..., handleExportCsv, handleExportToExcel) that were recently implemented/fixed.
Report UI Logic Changes: Describe the implementation/verification status for Add, Edit, Delete, Import, and Export button logic, including the TanStack Query mutations added/confirmed.
Part 3: Improve UI/UX & Mobile Responsiveness

Review Layout (ChartOfAccounts.tsx):
Action: Review the overall structure, ensuring standard responsive components (like those from Shadcn UI - <Card>, <Button>, <Dialog>, <Table> etc.) are used.
Action: Pay special attention to the main table displaying the accounts (DataTable?). If it contains many columns, ensure it handles smaller screens gracefully (e.g., allows horizontal scrolling, hides less critical columns on mobile, or uses a responsive table approach). Implement necessary adjustments if needed.
Action: Ensure all interactive elements (buttons, icons) have clear labels or tooltips and sufficient spacing for touch interaction. Use icons from lucide-react where appropriate for clarity.
Report UI/UX Changes: Describe any adjustments made to improve layout, responsiveness, or clarity.