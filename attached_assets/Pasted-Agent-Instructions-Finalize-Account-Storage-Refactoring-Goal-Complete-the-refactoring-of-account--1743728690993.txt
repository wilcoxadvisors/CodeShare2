Agent Instructions: Finalize Account Storage Refactoring

Goal: Complete the refactoring of account-related logic out of server/storage.ts by updating MemStorage to use delegation and simplifying the IStorage interface.

Relevant Files:

server/storage.ts (Primary file to modify)
server/storage/accountStorage.ts (Contains IAccountStorage and the accountStorage instance)
Implementation Steps:

Part 1: Refactor MemStorage to Delegate Account Methods

Open File: Open server/storage.ts.
Locate Class: Find the class MemStorage implements IStorage { ... } definition.
Remove Properties: Delete the following property declarations from within the MemStorage class:
private accounts: Map<number, Account>;
private currentAccountId: number = 1;
Remove Initialization: Delete the line this.accounts = new Map(); from the MemStorage constructor.
Implement Delegation: For each account-related method signature currently implemented within MemStorage (e.g., getAccount, getAccounts, getAccountsByType, createAccount, updateAccount, deleteAccount, getAccountsTree, seedClientCoA, getAccountsForClient, generateCoaImportPreview, importCoaForClient, markAccountInactive, accountHasTransactions):
Replace the entire method body with a delegation call to the corresponding method on the imported accountStorage instance.
Example for getAccount:
TypeScript

async getAccount(id: number): Promise<Account | undefined> {
  // Delegated to accountStorage module
  return accountStorage.getAccount(id);
}
Example for createAccount:
TypeScript

async createAccount(insertAccount: InsertAccount): Promise<Account> {
  // Delegated to accountStorage module
  return accountStorage.createAccount(insertAccount);
}
Continue this pattern for all account methods listed in the delegation section of IStorage.
Part 2: Simplify IStorage Interface

Locate Interface: Find the export interface IStorage { ... } definition in server/storage.ts.
Import: Ensure IAccountStorage is imported from ./storage/accountStorage.
TypeScript

import { IAccountStorage, /* other needed imports */ } from './storage/accountStorage';
Remove Signatures: Delete all individual method signatures related to accounts (e.g., getAccount(...), getAccounts(...), createAccount(...), getAccountsTree(...), importCoaForClient(...), etc.).
Add Property: Add a single property definition that references the imported interface:
TypeScript

export interface IStorage {
  // ... other non-account methods ...

  // Account methods are now accessed via this property
  accounts: IAccountStorage;

  // ... potentially other delegated properties like users, clients, etc. ...
}
Part 3: Update Storage Classes for Simplified Interface

Locate Classes: Find the DatabaseStorage and MemStorage class definitions.
Add Public Property: In both DatabaseStorage and MemStorage, add a public property that implements the new accounts property from IStorage and assign the imported accountStorage instance to it.
In DatabaseStorage:
TypeScript

export class DatabaseStorage implements IStorage {
  public accounts: IAccountStorage; // Add this property
  // ... other properties ...

  constructor() {
    this.accounts = accountStorage; // Assign instance
    // ... other constructor logic ...
  }
  // ... delegated methods (already done) ...
  // ... other non-delegated methods ...
}
In MemStorage:
TypeScript

export class MemStorage implements IStorage {
  public accounts: IAccountStorage; // Add this property
  // ... other properties (excluding the removed 'accounts' map) ...

  constructor() {
    this.accounts = accountStorage; // Assign instance
    // ... other constructor logic (excluding 'this.accounts = new Map()') ...
  }
  // ... delegated account methods (implemented in Part 1) ...
  // ... other non-delegated methods ...
}
Part 4: Clean Up storage.ts (Carefully)

Review File: Scan server/storage.ts again.
Remove Unused Code: Identify and delete any helper functions, type definitions (like AccountType), or constants that were only used by the now-removed account method implementations within MemStorage. Be cautious not to remove anything still used by other parts of the file (e.g., Fixed Assets, Reporting, Budgets etc.).
Part 5: Verification

Restart: Restart the application (npm run dev or equivalent).
Report: Report if the application builds and restarts successfully without type errors. Describe how to manually test (e.g., perform create/read/update/delete operations on accounts via the UI or API tests) to ensure the delegation works correctly.