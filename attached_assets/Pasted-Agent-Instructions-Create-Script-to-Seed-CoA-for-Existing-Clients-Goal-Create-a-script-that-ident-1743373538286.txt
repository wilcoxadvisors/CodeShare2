Agent Instructions: Create Script to Seed CoA for Existing Clients

Goal: Create a script that identifies existing clients without a Chart of Accounts and seeds the standard CoA template (standardCoaTemplate) for them.

Relevant Files:

Create: scripts/seed-existing-clients-coa.ts
Create: scripts/seed-existing-coa.sh
Create: scripts/README.md
Reference: server/storage.ts (Contains seeding logic pattern)
Reference: server/coaTemplate.ts (Contains standardCoaTemplate)
Reference: shared/schema.ts (Definitions for clients and accounts tables)
Reference: server/db.ts (For database connection)
Implementation Steps:

Create Script File (seed-existing-clients-coa.ts):

Action: Create the file scripts/seed-existing-clients-coa.ts.
Action: Add the necessary imports at the top: Drizzle (db, eq, isNull, accounts, clients, AccountType - adjust paths as needed), standardCoaTemplate from ../server/coaTemplate (adjust path).
Action: Implement an async function findClientsWithoutCoA(): Promise<number[]>:
Use db.selectDistinct({ id: clients.id }) with a leftJoin on accounts where accounts.clientId equals clients.id.
Filter using .where(isNull(accounts.id)).
Return the array of client IDs: return result.map(row => row.id);.
Action: Implement an async function seedCoAForClient(clientId: number): Promise<void>:
Use await db.transaction(async (tx) => { ... });.
Inside the transaction, create const codeToIdMap = new Map<string, number>();.
Loop through standardCoaTemplate: for (const item of standardCoaTemplate)
Resolve parentId using item.parentCode and codeToIdMap. Log warnings if a parent code isn't found.
Prepare the full account data object, including clientId and the resolved parentId (or null).
Insert using const inserted = await tx.insert(accounts).values(accountData).returning({ id: accounts.id });.
Store the ID: if (inserted[0]?.id) { codeToIdMap.set(item.code, inserted[0].id); }.
Action: Implement the main async execution block:
Call findClientsWithoutCoA().
Log how many clients were found needing seeding.
Loop through the found clientIds:
Wrap the call in a try/catch: try { await seedCoAForClient(clientId); console.log(...); } catch (error) { console.error(...); }.
Log a final summary.
Include process.exit(0) / process.exit(1).
Create Run Script (seed-existing-coa.sh):

Action: Create the file scripts/seed-existing-coa.sh.
Action: Add the following content:
Bash

#!/bin/bash
# Runs the script to seed existing clients with the standard CoA
# WARNING: Run with caution. Backup database first if needed.
echo "Executing CoA seeding script for existing clients..."
npx tsx ./scripts/seed-existing-clients-coa.ts "$@"
echo "Script execution finished."
Action: Make the script executable: chmod +x scripts/seed-existing-coa.sh.
Create Documentation (scripts/README.md):

Action: Create the file scripts/README.md.
Action: Add content explaining what seed-existing-clients-coa.ts does (seeds standard CoA for clients without any accounts), how to run it (./scripts/seed-existing-coa.sh), and a warning that it's typically a one-time administrative task and should be run with caution after backing up data if necessary.
Verification Plan (Report Only):

Action: Report that the script scripts/seed-existing-clients-coa.ts, the runner scripts/seed-existing-coa.sh, and the scripts/README.md have been created.
Action: State clearly: "This script is intended for manual execution and should not be run automatically now. Verification involves running ./scripts/seed-existing-coa.sh manually later and checking the database/API."