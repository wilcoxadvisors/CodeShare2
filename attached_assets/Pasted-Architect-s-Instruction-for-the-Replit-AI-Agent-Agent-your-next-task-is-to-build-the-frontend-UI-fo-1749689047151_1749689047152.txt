Architect's Instruction for the Replit AI Agent
Agent, your next task is to build the frontend UI for the "Mass Upload for Dimension Values" feature.

This will be a two-part implementation: first, creating the user interface with a file uploader and download button, and second, wiring it up to the backend endpoints you've already created.

Part 1: Build the Bulk Upload UI
Goal: Create a dedicated component for the bulk upload workflow and integrate it into the "Manage Values" dialog using a tabbed interface.

File to Create/Verify: client/src/features/manage/BulkDimensionValueUpload.tsx

The agent has already created this file. Verify its contents and ensure it is a functional component that accepts dimensionId and dimensionName as props.
Inside this component, build the following UI:
A "Download Template" <Button> with a Download icon.
A file dropzone area (using react-dropzone or a styled <input type="file">) that prompts the user to "Drag and drop a CSV file here, or click to select a file."
A section to display the name of the selected file once chosen.
An "Upload and Process" <Button> which should be disabled until a file is selected.
A results area to display the summary message after an upload is complete.
File to Modify: client/src/features/manage/DimensionValuesManager.tsx

Action: Reorganize the dialog to use a Tabs component.
Create two tabs: "Individual" and "Bulk Upload".
Move all the existing logic for adding/editing/listing single values into the "Individual" TabsContent.
Place the <BulkDimensionValueUpload /> component you just built inside the "Bulk Upload" TabsContent. Pass the required dimension props to it.
Part 2: Implement Frontend Logic
Goal: Wire up the new UI components to the backend API endpoints.

File to Modify: client/src/features/manage/BulkDimensionValueUpload.tsx
Download Logic:
Create a function for the "Download Template" button's onClick handler.
This function will make a GET request to /api/dimensions/:dimensionId/values/csv-template.
It must correctly handle the text/csv response and trigger a file download in the user's browser.
Upload Logic:
Create a useMutation hook to handle the file upload.
The mutation function will create a FormData object, append the selected file, and POST it to the /api/dimensions/:dimensionId/values/batch-upload endpoint.
Crucially, the onSuccess handler for this mutation must call queryClient.invalidateQueries({ queryKey: ['dimensions', selectedClientId] }). This will ensure the list of values in the "Individual" tab is automatically refreshed after a successful upload.
The onSuccess handler should also display the summary message from the API response (e.g., "Created: 50, Skipped: 3").
Agent, please begin with Part 1: building out the BulkDimensionValueUpload.tsx component and integrating it into the DimensionValuesManager.tsx with a tabbed layout.