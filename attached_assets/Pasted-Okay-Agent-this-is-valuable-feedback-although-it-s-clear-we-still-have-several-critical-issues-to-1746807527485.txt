Okay, Agent, this is valuable feedback, although it's clear we still have several critical issues to resolve before the Journal Entry (JE) and attachment functionalities are stable. The previous assessment that Bug #7 was resolved was premature.

Let's pause any thoughts on "Dimensions & Smart Rules" and concentrate on fixing these core problems. Based on your latest report and the console logs:

User/Agent Reported Issues & Our Debugging Focus:

"Still have to reload after selecting a client. Entities do not show right away in the selector." (Issue 1)

Problem Area: This indicates a problem with state propagation or query re-fetching when the client/entity context changes.
Action for Agent:
EntityContext & Consumers: In GlobalContextSelector.tsx (or the component handling client/entity selection), log precisely when selectedClientId and currentEntity are updated in EntityContext.
JournalEntries Query: In client/src/features/journal-entries/pages/JournalEntries.tsx, re-examine the useQuery that fetches journal entries:
Ensure its queryKey dynamically includes clientId and entityId (e.g., ['/api/journal-entries', clientId, entityId]).
Confirm the enabled option is correctly set (e.g., !!clientId && !!entityId).
Log the query's status (isLoading, isFetching, data) when the selected client/entity changes to see if it's re-fetching or if its inputs are updating as expected.
Entity Selector: If "Entities do not show right away in the selector" itself, this points to an issue in how EntitySelector.tsx consumes or reacts to changes in selectedClientId from EntityContext to filter/display entities.
"JE ID changes when editing." (Issue 3)

Problem Area: This is highly critical. If the ID of a JE is being altered during an edit operation, it can lead to data corruption or incorrect updates.
Action for Agent:
In client/src/features/journal-entries/components/JournalEntryForm.tsx:
When an existing JE is loaded (e.g., for JE ID 137 from your logs), log existingEntry.id.
In the handleSubmit function, before the updateJournalEntry mutation is called, log the id that is part of the journalData (or equivalent payload) being prepared for the mutation.
If attachments are involved, log the entryId being used for file operations.
We need to pinpoint if/where this ID is changing on the client side. The backend log you provided shows the PUT request for JE 137 returns a success response also for ID 137, which is good, but the client behavior is what the user is reporting.
File Attachment Issues (Bug #7):

"when edit a JE uploading an attachment does not show. But appears to save." (Issue 2)
Observation: The console log shows repeated 400 Bad Request errors for POST /api/clients/250/entities/391/journal-entries/137/files. This contradicts "appears to save." A 400 error means the server rejected the upload.
Action for Agent:
Get 400 Response Body: What is the exact JSON error message or details in the response body of that 400 error? This is crucial.
Server-Side Expectations: Re-verify server/attachmentRoutes.ts. What is the exact FormData structure it expects for the files field? Does it require any other metadata fields in the FormData?
UI Update: If the upload were to succeed, ensure the onSuccess callback for the upload mutation correctly invalidates the attachment list query (e.g., ['journalEntryAttachments', entryId]) so the UI refreshes.
"Can not remove attachments once added." (Issue 4)
Action for Agent:
Attempt to delete an attachment.
Provide the full network request (URL, method, headers) and server response (status, headers, body) for the DELETE call from browser dev tools.
Provide client-side console logs during this delete attempt.
Review useDeleteJournalEntryFile in attachmentQueries.ts and its usage. Is the correct hierarchical URL being used? Is the backend route handling DELETE correctly? What are the permission checks for deletion in attachmentRoutes.ts (the log mentions "Prevents deletion for non-draft/non-pending entries" â€“ is the JE in an appropriate state)?
JE Posting & Update Flow:

"Cant post entry" (Issue 5)
Observation from logs: When "Post button clicked," the logs show DEBUG: Posting existing entry with ID: 137 followed immediately by DEBUG: Posting journal entry with ID: undefined.
Action for Agent: This undefined ID is almost certainly the cause. Trace the entryId from the "Post" button click in JournalEntryDetail.tsx (or JournalEntryForm.tsx if posting from there) to the actual data payload sent to the updateJournalEntry mutation (which handles posting by setting status: 'posted'). Why is the ID being lost or becoming undefined in the context of the posting action?
"JE does not update when edited" (Issue 6 - previous report) & "Takes a while for an entry to update causing confusion" (Issue 7)
Observation from logs: The PUT to /api/clients/.../journal-entries/:id for a draft update now returns a 200 OK with JSON data. This is good.
Action for Agent:
Confirm the data is persisted correctly on the backend after a draft update (e.g., check database or re-fetch via a hard refresh).
If the backend update is successful, the delay or lack of immediate UI update is client-side. In the onSuccess of the "update draft JE" mutation:
Are you invalidating all necessary query keys? This includes the JE list (['/api/clients/.../journal-entries', clientId, entityId]) and the specific JE detail (['/api/clients/.../journal-entries/:id', entryId]).
Is the JournalEntryForm being repopulated or reset with the new data from the mutation's response?
The "takes a while" could be due to slow cache invalidation and re-fetch, or inefficient re-rendering.
"appears debits and credits are fixed in the list." (Issue 6 - Positive Note)

Action for Agent: This is great news! Please confirm that the server-side changes in server/storage/journalEntryStorage.ts to include pre-calculated totals in the list view, and the corresponding client-side changes in JournalEntries.tsx to use these entry.totals.debit and entry.totals.credit, are indeed the reason for this fix.
"creating a new je is untested." (Issue 5 from prior list)

Action for Agent: Once JE Update and Post are more stable, this must be thoroughly tested end-to-end, including attachment handling for brand new JEs.
Immediate Focus for Agent:

Posting (Issue 5): Resolve the undefined ID issue when attempting to post. This is fundamental.
JE Update UI (Issue 6 & 7): Ensure client-side state and UI reflect backend updates promptly after saving a draft. Focus on React Query cache invalidation.
Attachment Deletion (Issue 4): Provide detailed request/response information for a delete attempt.
Attachment Upload 400 (Issue 2): Get the full 400 response body from the server to understand why it's rejecting the upload.
Please tackle these with detailed logging and by examining network requests/responses. We need to ensure data integrity and a responsive UI.