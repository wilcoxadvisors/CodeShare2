Agent Instructions: Implement Dashboard Structure for Guided Setup (Phase 2, Step 4)

Goal: Refactor the Admin Dashboard (client/src/pages/Dashboard.tsx) to include the structure for a multi-step guided setup flow, including a stepper and conditional rendering logic for setup "cards".

Relevant Files:

client/src/pages/Dashboard.tsx
UI components (e.g., from Shadcn UI, Material UI, or custom components for a Stepper)
client/src/components/setup/ClientSetupCard.tsx (and other card components to be created later)
Steps:

Add State Management:
In client/src/pages/Dashboard.tsx, introduce a state variable to manage the current step of the setup flow.
TypeScript

const [activeStep, setActiveStep] = useState(0); // 0 = Client Info, 1 = Entities, etc.
Also, ensure there's state to determine if the setup flow should be shown (e.g., based on whether the client/admin has completed setup previously â€“ you might need a placeholder state like const [setupComplete, setSetupComplete] = useState(false); for now).
Implement Stepper UI:
Integrate a visual stepper component near the top of the relevant dashboard section (e.g., within the 'client-management' tab content, or wherever the "Add Client" modal content was previously handled).
Define the steps based on our outline: ['Client Info', 'Entities', 'Consolidation', 'Chart of Accounts', 'Historical Data', 'Summary & Finalize'].
The stepper should visually indicate the activeStep. Use an existing UI library component if available or create a simple custom one.
Implement Conditional Rendering:
Within the same dashboard section, implement conditional rendering logic based on the activeStep state.
When activeStep is 0, render the existing ClientSetupCard.tsx component.
When activeStep is 1, render EntityManagementCard.tsx.
Add placeholder divs or comments for the other steps (activeStep 2, 3, 4, 5) which will render ConsolidationGroupCard, ChartOfAccountsCard, DataImportCard, and SetupSummaryCard respectively (these components will be created in subsequent steps).
Ensure the appropriate props (like onNext, onBack, clientData, setEntityData) are passed to the rendered card component based on the step. The onNext prop should typically call setActiveStep(prev => prev + 1) and onBack should call setActiveStep(prev => prev - 1).
Integrate Trigger (If using Modal):
If the setup flow is intended to run within a modal dialog triggered by the "Add Client" button (as discussed previously):
Ensure the state (activeStep) is reset to 0 when the dialog opens.
Place the Stepper and conditional rendering logic inside the modal component (<DialogContent>).
The onComplete function (likely from SetupSummaryCard in the final step) should close the dialog.
Verify Basic Structure:
Restart the application and log in.
Trigger the setup flow (either by default on the dashboard or via the "Add Client" modal).
Verify: Does the stepper UI appear? Does the ClientSetupCard render correctly as the first step? Does clicking "Save & Continue" (which should call onNext -> setActiveStep(1)) correctly transition the view to render the EntityManagementCard (or the placeholder for step 1)? Does the "Back" button work?
Report: Confirm the basic stepper structure and conditional rendering for the first two steps are in place and functioning.