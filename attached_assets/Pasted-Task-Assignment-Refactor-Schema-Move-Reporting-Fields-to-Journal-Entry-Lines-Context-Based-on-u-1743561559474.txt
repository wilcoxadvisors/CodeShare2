Task Assignment: Refactor Schema - Move Reporting Fields to Journal Entry Lines

Context:
Based on user feedback, the fsliBucket, internalReportingBucket, and item fields, previously added to the accounts table during Task B.1 finalization, are better suited for individual transaction lines. We need to refactor the schema by removing them from accounts and adding them to the journalEntryLines table definition. This task effectively combines the schema refactoring with the first step of Task B.2 (defining the JE schemas).

Goal:
Modify the Drizzle schema (shared/schema.ts) to remove fsliBucket, internalReportingBucket, and item from the accounts table and add them to the journalEntryLines table. Create the journalEntries and journalEntryLines tables if they don't exist yet.

Instructions:

Action: Navigate to Schema File:

Open CodeShare/shared/schema.ts.
Action: Remove Fields from accounts Table:

Locate the export const accounts = pgTable(...) definition.
Remove the following lines (or similar definitions) from the accounts table schema:
fsliBucket: text('fsli_bucket')
internalReportingBucket: text('internal_reporting_bucket')
item: text('item')
Action: Define Required JE Enums (if not present):

Ensure these enums are defined:
export const journalEntryStatusEnum = pgEnum('journal_entry_status', ['Draft', 'Posted', 'Reversed']);
export const journalEntryLineTypeEnum = pgEnum('journal_entry_line_type', ['Debit', 'Credit']);
Action: Define journalEntries Table Schema (if not present):

Add/ensure the following pgTable export exists:
TypeScript

export const journalEntries = pgTable('journal_entries', {
  id: serial('id').primaryKey(),
  entryDate: timestamp('entry_date', { mode: 'date', withTimezone: true }).notNull(),
  postingDate: timestamp('posting_date', { mode: 'date', withTimezone: true }).notNull(),
  memo: text('memo'),
  status: journalEntryStatusEnum('status').notNull().default('Draft'),
  clientId: integer('client_id').notNull().references(() => clients.id, { onDelete: 'cascade' }),
  entityId: integer('entity_id').references(() => entities.id, { onDelete: 'set null' }),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull().$onUpdate(() => new Date()),
}, (table) => ({
  clientIdIdx: index('je_client_idx').on(table.clientId),
  entityIdIdx: index('je_entity_idx').on(table.entityId),
  entryDateIdx: index('je_entry_date_idx').on(table.entryDate),
  statusIdx: index('je_status_idx').on(table.status),
}));
Action: Define journalEntryLines Table Schema & Add Refactored Fields:

Add/ensure the following pgTable export exists, including the moved fields:
TypeScript

export const journalEntryLines = pgTable('journal_entry_lines', {
  id: serial('id').primaryKey(),
  journalEntryId: integer('journal_entry_id').notNull().references(() => journalEntries.id, { onDelete: 'cascade' }),
  accountId: integer('account_id').notNull().references(() => accounts.id, { onDelete: 'restrict' }),
  type: journalEntryLineTypeEnum('type').notNull(),
  amount: numeric('amount', { precision: 19, scale: 4 }).notNull(),
  description: text('description'),
  // --- Add the refactored fields here (nullable) ---
  fsliBucket: text('fsli_bucket'),
  internalReportingBucket: text('internal_reporting_bucket'),
  item: text('item'), // Consider if this needs relation to vendors/customers later
  // --- End of refactored fields ---
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull().$onUpdate(() => new Date()),
}, (table) => ({
  journalEntryIdIdx: index('jel_journal_entry_idx').on(table.journalEntryId),
  accountIdIdx: index('jel_account_idx').on(table.accountId),
}));
Action: Define Relations (if not present):

Ensure the corresponding relations are defined for journalEntries and journalEntryLines, linking them to each other and to clients, entities, and accounts.
TypeScript

// Example Structure (add within the main relations definition)
export const journalEntryRelations = relations(journalEntries, ({ one, many }) => ({
  journalEntryLines: many(journalEntryLines),
  client: one(clients, { fields: [journalEntries.clientId], references: [clients.id] }),
  entity: one(entities, { fields: [journalEntries.entityId], references: [entities.id] }),
}));

export const journalEntryLineRelations = relations(journalEntryLines, ({ one }) => ({
  journalEntry: one(journalEntries, { fields: [journalEntryLines.journalEntryId], references: [journalEntries.id] }),
  account: one(accounts, { fields: [journalEntryLines.accountId], references: [accounts.id] }),
   // Add relations for 'item' later if it links to vendors/customers table
}));
Action: Generate and Review Migrations:

Run the Drizzle migration generation command: npx drizzle-kit generate:pg
Carefully review the generated SQL migration file. It should include:
ALTER TABLE "accounts" DROP COLUMN "fsli_bucket"; (and similar for the other two)
CREATE TABLE "journalEntries" ...
CREATE TABLE "journalEntryLines" ... (including the new fsli_bucket, internal_reporting_bucket, item columns)
Associated indexes and foreign key constraints.
Verification:

Confirm fsliBucket, internalReportingBucket, item are removed from the accounts table definition in shared/schema.ts.
Confirm journalEntries and journalEntryLines table definitions exist correctly in shared/schema.ts, with the three fields added (nullable) to journalEntryLines.
Confirm relations are defined correctly.
Confirm the generated SQL migration file accurately reflects these changes (DROP COLUMN from accounts, CREATE TABLE for journalEntries/journalEntryLines with correct columns/constraints/indexes).
Reporting:

Report success once the schema is refactored in shared/schema.ts and the migration file has been generated and accurately reviewed.
Provide the content of the generated SQL migration file for final confirmation.
Report any issues encountered. Confirm readiness to proceed with Task B.2 - implementing the JE backend API logic.