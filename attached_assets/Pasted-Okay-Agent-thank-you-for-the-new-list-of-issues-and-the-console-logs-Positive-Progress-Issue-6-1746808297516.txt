Okay, Agent, thank you for the new list of issues and the console logs.

Positive Progress:

Issue 6: Debits and Credits Fixed! The logs (DEBUG - Using pre-calculated totals for entry 133: debit=12, credit=12) strongly indicate that your server-side changes in server/storage/journalEntryStorage.ts to include pre-calculated totals and the client-side updates in client/src/features/journal-entries/pages/JournalEntries.tsx to use them are working. This is excellent news and resolves a significant visual bug in the JE list.
However, several critical issues remain. Let's maintain our focus on stabilizing the core JE and attachment functionalities.

Revised Priority List & Debugging Actions:

JE Posting Failures (User Issue 5: "Cant post entry")

A. Posting a Newly Created JE after File Upload:
Observation: Logs show successful creation of JE 144 (as draft), then successful file upload to JE 144. However, the subsequent step to update its status to "posted" fails with DEBUG: Journal entry update - ID: undefined.
Action for Agent: In client/src/features/journal-entries/components/JournalEntryForm.tsx, within the handleSubmit function (or related logic for creating a new JE and then immediately posting it, especially after attachments are handled):
Ensure that the id of the newly created journal entry (e.g., 144 from newEntry.id) is correctly captured and reliably passed to the mutation function (postJournalEntry.mutate or updateJournalEntry.mutate with status: 'posted') that changes its status to 'posted'. It seems this ID is being lost.
B. Posting an Existing JE (using POST /.../:id/post route):
Observation: The logs show a POST request to /api/clients/250/entities/393/journal-entries/144/post results in a 200 OK but with a text/html response. This is problematic.
Action for Agent:
Server-Side: The route handler for POST /api/clients/:clientId/entities/:entityId/journal-entries/:journalEntryId/post in server/journalEntryRoutes.ts (or wherever it's defined) must be fixed to return a JSON response (e.g., the updated JE with status "posted").
Client-Side (Consideration): Evaluate if this dedicated .../:id/post (POST) endpoint is necessary. The PUT /api/clients/.../journal-entries/:id endpoint already handles status changes (including to "posted") and was seen returning JSON. Using a single, consistent PUT endpoint for all JE updates (including status changes) simplifies the API surface and client logic. Discuss this with the Architect (me) if a change in approach is considered. For now, fix the HTML response.
JE ID Changes When Editing (User Issue 3: "JE ID changes when editing.")

Problem Area: This is extremely critical due to data integrity risk. While the specific logs you shared for JE ID 137 update didn't show the ID changing in the response, the user's report is a major concern.
Action for Agent:
Implement targeted logging as previously discussed: In JournalEntryForm.tsx, log the JE ID when it's loaded for editing, log the ID in the payload before the update mutation is called, and log the ID from the server's response in the onSuccess callback of the mutation.
Try to reproduce the scenario where the ID change is observed. Does it happen for all JEs, or specific ones? Does it happen if you edit, save, then edit again?
Attachment Issues (Bug #7 - User Issues 2 & 4):

Issue 4: "Can not remove attachments once added."
Action for Agent: We still need data on this.
Attempt to delete an attachment.
Provide the full network request (URL, method, headers) and server response (status code, headers, full body) from browser dev tools.
Provide client-side console logs from useDeleteJournalEntryFile and the calling component.
Verify the JE's current status. Your previous work noted: "Prevents deletion for non-draft/non-pending entries." Is the JE in a status that should allow deletion?
Issue 2: "when edit a JE uploading an attachment does not show. But appears to save." (Still seeing 400 error for uploads to existing JEs)
Observation: File upload to new JE 144 succeeded, but upload to existing JE 137 failed with a 400.
Action for Agent:
Get the 400 response body: For the failed POST /api/clients/250/entities/391/journal-entries/137/files, what is the exact JSON error message from the server? This is vital.
Compare Requests: What is different in the client-side construction of the FormData or the XHR/axios request between the successful upload to new JE 144 and the failing upload to existing JE 137?
Server-Side Logic: Review server/attachmentRoutes.ts. Is there any difference in how it handles file uploads for JEs that are newly created versus those that already exist? Are permissions or expected metadata different?
Initial Page Load / Selector Issues (User Issue 1: "Still have to reload after selecting a client. Entities do not show right away in the selector.")

Problem Area: Reactivity of EntityContext and dependant queries.
Action for Agent:
Entity Filtering: In EntityContext or GlobalContextSelector, when a client (e.g., "Client 73") is selected, how is the list of entities filtered for that client? The log Filtered list for Client 73. Length: 0 Array(0) when Full entities list length: 2 suggests the filtering logic applied to allEntities might be incorrect or allEntities isn't being populated correctly/timely for this filter to work immediately.
JE List Query Reactivity: In JournalEntries.tsx, confirm the useQuery for JEs:
The queryKey must include clientId and entityId.
The enabled flag must correctly reflect !!clientId && !!entityId.
When clientId or entityId from the context change, React Query should automatically re-fetch if the query key changes or if refetch() is explicitly called due to dependency changes. Log these values and query states.
JE Update UX (User Issue 7: "Takes a while for an entry to update causing confusion")

Action for Agent: Once the underlying JE update (saving as draft) is confirmed to be working correctly on the backend and the server returns JSON promptly:
Focus on the onSuccess handler of the updateJournalEntry mutation. Ensure queryClient.invalidateQueries is called with the correct and comprehensive set of query keys (for both the JE list and the specific JE detail) to force a refresh of any displayed data.
Use browser performance tools if necessary to identify any slow client-side re-rendering after data updates.
Path Forward:

Agent, please focus your efforts in this order of priority:

JE Posting (Issue 5):
Fix the ID: undefined when trying to post a newly created JE after file uploads.
Ensure the server endpoint used for posting (POST /.../:id/post or PUT /.../:id with status change) returns JSON.
JE ID Changing (Issue 3): Investigate with detailed logging.
Attachment Deletion (Issue 4): Provide network traces and server responses for a delete attempt.
Attachment Upload 400 Error (Issue 2): Get the full 400 response body for uploads to existing JEs.
Provide detailed logs and network information for each step. Your clear reporting on the outcome of these specific actions will guide our next steps. Remember our quality standards regarding clean, non-redundant code.