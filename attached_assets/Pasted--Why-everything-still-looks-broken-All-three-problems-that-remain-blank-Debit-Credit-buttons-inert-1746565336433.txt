 Why everything still looks broken
All three problems that remain (blank Debit/Credit, buttons inert, API “works” but UI still says draft) come from one fetch-layer bug and two rendering typos:

What you see	True root-cause
Debit / Credit cells blank	Table is still rendering line.debit / line.credit instead of the parsed numbers you already compute (debitValue / creditValue).
Edit / Delete / Back don’t fire	The JSX that contains the buttons never mounts because renderActionButtons() returns early when permissionMatrix.status === 'draft' (your local copy never gets the posted status; see next row).
POST seems OK but entry stays draft	apiRequest() does the PUT without credentials:"include" → the backend redirects to the login page and returns HTML. React-Query treats that as success (200), but the returned blob isn’t JSON, so your optimistic cache keeps the old draft object.

You can fix all three in four tiny edits.

1 — Patch the fetch wrapper (queryClient.ts)
diff
Copy
Edit
- return fetch(url, {
-   method,
-   headers,
-   body,
- });
+ return fetch(url, {
+   method,
+   headers,
+   body,
+   credentials: "include",   // <- critical: keep cookie / session on PUT, PATCH, DELETE
+ });
Reload, watch the Network tab: the PUT /api/.../journal-entries/139 should now return plain JSON (status 200/201) instead of an HTML document.

2 — Show the numbers you already calculate
JournalEntryDetail.tsx (same for the Form if you render a preview table):

diff
Copy
Edit
- <TableCell>{line.debit}</TableCell>
- <TableCell>{line.credit}</TableCell>
+ <TableCell className="text-right">
+   {debitValue ? debitValue.toLocaleString(undefined,{minimumFractionDigits:2}) : ""}
+ </TableCell>
+ <TableCell className="text-right">
+   {creditValue ? creditValue.toLocaleString(undefined,{minimumFractionDigits:2}) : ""}
+ </TableCell>
No extra logic; debitValue / creditValue are already defined in the loop.

3 — Stop returning early in renderActionButtons
Inside JournalEntryDetail.tsx:

diff
Copy
Edit
- if (!entry) return <div />;
- const status = entry.status;          // good
- const isOwnEntry = user?.id === journalEntry.createdBy;
+ if (!entry) return <div />;           // keep guard
+ const status = entry.status;
+ const isOwnEntry = user?.id === entry.createdBy;   // <- rename
Make sure every reference in that function is entry, never journalEntry.
(There are usually three left: createdBy, status comparison, and the line loop when you build the payload.)

4 — Refresh the cache after a successful mutation
Right after your updateJournalEntry mutation succeeds:

ts
Copy
Edit
queryClient.invalidateQueries([
  "journal-entry",
  entryId            // whatever key you use in useJournalEntry()
]);
That pulls the fresh posted object (now returned correctly thanks to step 1) and your permission matrix will contain status: "posted". Buttons disappear or change state automatically.

Verifying in <60 seconds
Network tab – PUT returns JSON, not HTML.

Console – debitValue logs the right numbers and cells show them.

Buttons – Edit and Delete handlers fire (no more “click handler took 876 ms” because they’re mounted once, not on every render).

If any step still fails, copy the exact failing line (or Network response) and we’ll zero-in on that part.






