It's clear we're stuck in a loop, and the agent's attempts are introducing new problems while failing to fix the core issues. The fact that Step 1 inputs clear and Step 2 sometimes appears first strongly suggests the state management within the SetupStepper and its child components is flawed, likely due to how state is initialized, passed down, and updated across re-renders or async operations. The sessionStorage fix was a red herring.

We need to step back and enforce a cleaner state management pattern. The parent component (SetupStepper) should own the state for the overall flow (activeStep, clientData, setupEntities), and pass data/callbacks down to the child "Card" components via props.

Here are revised, more structured instructions focusing on this state lift and simplification:

Agent Instructions: Refactor Setup Flow State Management & Fix Bugs
CRITICAL ISSUES: User reports multiple persistent bugs after Checkpoint 64927d04:

Stepper Initialization: Sometimes starts on Step 2 instead of Step 1.
Step 1 Input Clearing: Input fields in ClientSetupCard clear during typing.
Step 1 Navigation: Still fails to reliably navigate to Step 2.
Step 2 Entity List: Entities added via API do not appear in the EntityManagementCard list.
"Use Client Data" Button: Broken.
Goal: Refactor state management for the setup flow to fix these critical bugs and stabilize Steps 1 & 2.

Phase 1: Refactor State Management in SetupStepper.tsx

Centralize State:
Action: Ensure the following states are managed ONLY within SetupStepper.tsx using useState:
activeStep: Initialize reliably to 0. Add logging: console.log("DEBUG SetupStepper: Initializing activeStep state to 0");
clientData: State to hold data from Step 1. Initialize to null or an empty object.
setupEntities: State to hold entities added during Step 2. Initialize to [].
Remove Child State: Ensure ClientSetupCard and EntityManagementCard do not have their own state for clientData or setupEntities. They will receive these via props. (Local form state within ClientSetupCard using useFormState is okay, provided the input clearing bug is fixed).
Create Callback Handlers in SetupStepper.tsx:
Action: Define stable callback functions using useCallback to handle updates from child components:
TypeScript

const handleClientSave = useCallback((data: ClientData) => { // Type ClientData appropriately
  console.log("DEBUG SetupStepper: handleClientSave received:", data);
  setClientData(data);
  // If Step 1 needs to save client via API *before* proceeding:
  // Ensure the API call in ClientSetupCard's onSubmit finishes before calling this.
  console.log("DEBUG SetupStepper: Setting activeStep to 1");
  setActiveStep(1); // Go to Step 2
}, [setActiveStep, setClientData]); // Add dependencies

const handleEntityAdd = useCallback((newEntity: Entity) => { // Type Entity appropriately
  console.log("DEBUG SetupStepper: handleEntityAdd received:", newEntity);
  setSetupEntities(prev => [...prev, newEntity]); // Add new entity to parent state
}, [setSetupEntities]); // Add dependencies

const handleEntityDelete = useCallback((entityId: number) => {
  console.log("DEBUG SetupStepper: handleEntityDelete called for ID:", entityId);
  setSetupEntities(prev => prev.filter(e => e.id !== entityId));
  // TODO: If necessary, add API call here or in EntityManagementCard to delete from DB
}, [setSetupEntities]); // Add dependencies

const handleBack = useCallback(() => {
  console.log(`DEBUG SetupStepper: handleBack called. Current: ${activeStep}. Going to ${activeStep - 1}`);
  setActiveStep(prev => Math.max(0, prev - 1)); // Ensure step doesn't go below 0
}, [activeStep, setActiveStep]); // Add dependencies

const handleNextFromEntities = useCallback(() => {
  console.log(`DEBUG SetupStepper: handleNextFromEntities called. Current: ${activeStep}. Entities count: ${setupEntities.length}`);
  if (setupEntities.length === 0) {
     console.warn("DEBUG SetupStepper: Blocked navigation - No entities added.");
     // TODO: Show toast/message to user
     return;
  }
  const nextStep = activeStep + 1;
  console.log(`DEBUG SetupStepper: Setting activeStep to ${nextStep}`);
  setActiveStep(nextStep); // Go to Step 3
}, [activeStep, setActiveStep, setupEntities]); // Add dependencies
Pass Props Down:
Action: Modify how ClientSetupCard, EntityManagementCard, etc., are rendered within SetupStepper's conditional logic:
TypeScript

// Example for Step 1
{activeStep === 0 && (
  <ClientSetupCard
    // initialData={clientData || {}} // Pass initial data if needed for editing later
    onSave={handleClientSave}
  />
)}
// Example for Step 2
{activeStep === 1 && (
  <EntityManagementCard
    clientData={clientData} // Pass client context if needed
    entities={setupEntities} // Pass the entity list state
    onEntityAdded={handleEntityAdd} // Pass the add handler
    onEntityDeleted={handleEntityDelete} // Pass the delete handler
    onBack={handleBack}
    onNext={handleNextFromEntities}
  />
)}
// Example for Step 3
 {activeStep === 2 && (
    <SetupSummaryCard
       clientData={clientData}
       entities={setupEntities}
       onBack={handleBack}
       onComplete={handleCompleteSetup} // Define handleCompleteSetup
    />
 )}
Phase 2: Simplify Child Components

ClientSetupCard.tsx:
Action: Modify onSubmit. It should:
Validate the form data.
(If applicable) await an API call to save the client.
Call props.onSave(formData) on success. Remove any call to setActiveStep or onNext from within this component.
Action: Re-investigate the input clearing bug using the detailed logging approach for useFormState outlined previously. Fix it.
EntityManagementCard.tsx:
Action: Remove internal setupEntities state. Use props.entities to display the list.
Action: In the createEntityMutation onSuccess (or equivalent API success handler), call props.onEntityAdded(newEntityData).
Action: In the deleteEntityMutation onSuccess (or equivalent), call props.onEntityDeleted(entityId).
Action: The "Continue" button's onClick should simply call props.onNext(). Add a check disabled={props.entities.length === 0} to the button.
Phase 3: Verification

Action: Restart the application.
Verify Initial State: Does the stepper start reliably on Step 0 (ClientSetupCard)?
Verify Step 1 Inputs: Type into fields. Do they clear unexpectedly? (Fix if necessary).
Verify Step 1 Navigation: Submit valid Step 1 data. Check logs. Does handleClientSave run? Does setActiveStep(1) occur? Does Step 2 render?
Verify Step 2 Entity List: Add an entity in Step 2. Check logs. Does handleEntityAdd run in SetupStepper? Does the setupEntities state update? Does the entity appear in the list displayed by EntityManagementCard (using props.entities)?
Verify Step 2 Deletion: Delete the entity added. Does handleEntityDelete run? Does the list update?
Verify Step 2 Navigation: Add at least one entity. Click "Continue". Does handleNextFromEntities run? Does setActiveStep(2) occur? Does Step 3 render?
Report: Detail the results of each verification step (1-7). Provide relevant logs for successful transitions and state updates. Confirm if the core flow (Steps 1->2, Add/Delete Entity in Step 2, Step 2->3) is now working.
