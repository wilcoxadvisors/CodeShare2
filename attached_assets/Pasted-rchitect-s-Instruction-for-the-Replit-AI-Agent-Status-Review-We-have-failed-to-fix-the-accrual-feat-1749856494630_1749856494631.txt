rchitect's Instruction for the Replit AI Agent
Status Review: We have failed to fix the accrual feature. The user is still experiencing a critical date-picker bug and a data persistence bug when editing drafts. My previous instructions were insufficient.

Your Mission: You will implement a definitive, multi-part fix that correctly handles date timezones and simplifies the component's state management to reliably preserve user input.

Part 1: The Final Calendar Fix (Timezone & Crash)
File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Action: You will replace all date handling for the accrual Calendar to be timezone-proof and to prevent crashes from empty date values.

Locate the Button that triggers the reversal date Popover.

Replace its text rendering logic with the following. This code safely checks for a valid date before attempting to format it.

From:
TypeScript

{journalData.reversalDate ? (
  format(new Date(`${journalData.reversalDate}T00:00:00`), "PPP")
) : (
  <span>Select reversal date</span>
)}
To:
TypeScript

{journalData.reversalDate && journalData.reversalDate.length > 0 ? (
  format(new Date(journalData.reversalDate.replace(/-/g, '/')), "PPP")
) : (
  <span>Pick a reversal date</span>
)}
(Note: Using .replace(/-/g, '/') is a more reliable way to have the new Date() constructor correctly interpret a YYYY-MM-DD string without timezone shifts.)

Locate the <Calendar> component inside the PopoverContent.

Replace its onSelect prop with the following logic. This correctly formats the date from the picker into the required string format.

TypeScript

onSelect={(date) => {
  setJournalData((prev) => ({ ...prev, reversalDate: date ? format(date, 'yyyy-MM-dd') : '' }));
}}
Part 2: The Final State Persistence Fix (Draft/Edit)
Root Cause: The component's state logic is too complex. We will simplify it to reliably use the data from existingEntry on load, and then allow the user's changes to take precedence.

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Action: You will replace the flawed useState and useEffect hooks for journalData with a single, simpler, and more robust useEffect implementation.

Delete the existing useState hook for journalData entirely.

Delete any other useEffect hooks that watch existingEntry or journalData. We will replace them all with one.

Insert the following code in their place. This new implementation derives the form's state directly from the props and its own internal state, which is the standard, correct pattern for this scenario.

TypeScript

// Replace the old useState and useEffect for journalData with this:

const [journalData, setJournalData] = useState({
  reference: '',
  referenceNumber: '',
  referenceUserSuffix: '',
  date: getTodayYMD(),
  description: '',
  status: JournalEntryStatus.DRAFT,
  journalType: 'JE',
  supDocId: '',
  isAccrual: false,
  reversalDate: '',
});

useEffect(() => {
  if (existingEntry) {
    setJournalData({
      reference: existingEntry.reference || '',
      referenceNumber: existingEntry.referenceNumber || '',
      referenceUserSuffix: existingEntry.referenceNumber ? existingEntry.referenceNumber.split(':')[1] || "" : "",
      date: existingEntry.date || getTodayYMD(),
      description: existingEntry.description || '',
      status: existingEntry.status || JournalEntryStatus.DRAFT,
      journalType: existingEntry.journalType || 'JE',
      supDocId: existingEntry.supDocId || '',
      isAccrual: existingEntry.isAccrual || false,
      reversalDate: existingEntry.reversalDate || '',
    });
  }
}, [existingEntry]); // Only re-sync the form if the entire existingEntry prop changes.
Agent, this two-part plan is the definitive solution to the bugs you have reported. It corrects the timezone handling and fixes the state management logic that was causing data to be lost. Please implement this now.