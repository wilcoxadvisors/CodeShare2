Architect's Instruction for the Replit AI Agent
Status Review: The user has performed end-to-end testing and found three critical bugs in the Automatic Accrual Reversal feature. Our previous work was incomplete.

Bugs to Fix:

Posting Failure: Accrual data (isAccrual flag and reversalDate) is not correctly saved when an entry is posted.
Draft Failure: Accrual data is not saved when an entry is saved as a draft.
Date Picker Bug: Selecting a date in the calendar results in the previous day being saved due to a timezone issue.
Your mission is to execute a two-part plan to diagnose the persistence bugs and definitively fix the date picker bug.

Part 1: Fix the Off-by-One Date Picker Bug
Root Cause: A timezone mismatch between the browser's local time and UTC is causing the selected date to be shifted back by one day.

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Action: You will replace the date handling logic for the accrual Calendar component with a timezone-safe implementation.

Locate the <Calendar> component inside the "Auto-Reversing Accrual" section.
Replace its onSelect prop with the following new logic. This version manually constructs the date string, avoiding timezone conversion errors.
TypeScript

onSelect={(date) => {
  if (date) {
    // Correctly handle timezone offset by creating date in UTC
    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    setJournalData((prev) => ({ ...prev, reversalDate: format(utcDate, 'yyyy-MM-dd') }));
  } else {
    setJournalData((prev) => ({ ...prev, reversalDate: '' }));
  }
}}
Replace the display logic inside the trigger Button. This ensures the date displayed to the user is also timezone-safe.
From: format(new Date(journalData.reversalDate), "PPP")
To: format(new Date(${journalData.reversalDate}T00:00:00), "PPP")
Part 2: Diagnose the Data Persistence Bugs (Accrual Fields Not Saving)
Root Cause: The isAccrual and reversalDate fields are being lost somewhere between the frontend submission and the final database write. We will now add detailed logging to trace the data and find the exact point of failure.

Action: You will add console.log statements at key points in the data flow.

File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx

Location: Inside the handleSubmit function.
Add this log immediately before the createEntry.mutate or updateEntry.mutate calls to confirm the data is leaving the frontend correctly.
TypeScript

console.log('--- FRONTEND SUBMISSION ---', entryData);
File to Modify: server/journalEntryRoutes.ts

Location: Inside every POST and PUT route that handles journal entry creation or updates.
Add this log at the very beginning of the route handler to see the raw request body.
TypeScript

console.log('--- BACKEND ROUTE: RAW BODY ---', req.body);
Add this log right after the validatedData = ... .parse(...) line to see if our validation schema is stripping the fields.
TypeScript

console.log('--- BACKEND ROUTE: VALIDATED DATA ---', validatedData);
File to Modify: server/storage/journalEntryStorage.ts

Location: Inside the createJournalEntry and updateJournalEntryWithLines methods.
Add this log immediately before the db.insert(...) or db.update(...) calls to see the final data being written to the database.
TypeScript

console.log('--- DATABASE WRITE ---', dataObject); // Replace dataObject with the actual variable name
Agent, please implement this full diagnosis and fix plan. First, apply the date picker fix. Then, add all specified logging. After these changes are applied, we will test again, and the new logs will reveal the exact source of the persistence issue.