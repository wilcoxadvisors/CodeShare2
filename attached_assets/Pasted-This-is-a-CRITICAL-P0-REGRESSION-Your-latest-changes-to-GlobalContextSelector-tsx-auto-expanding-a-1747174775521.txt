This is a CRITICAL P0 REGRESSION. Your latest changes to GlobalContextSelector.tsx (auto-expanding all clients, styling) and potentially the interaction with EntityContext.tsx's localStorage persistence have broken the user's ability to manually switch clients. They are stuck.

The positive aspect from the detailed console logs before this "stuck" issue was that the underlying data fetch for all entities post-login, and the filtering of these entities when a client was successfully selected, was working correctly. The problem now is purely in the UI interaction layer of GlobalContextSelector.tsx and its state management.

Task 1: (IMMEDIATE CRITICAL FIX) Restore User's Ability to Select and Switch Clients Freely & Implement Clear Hierarchical Display

Action - Revisit client/src/components/dashboard/GlobalContextSelector.tsx and client/src/contexts/EntityContext.tsx:

Fix Manual Client Switching (Top Priority):
Remove Aggressive Auto-Expansion: In GlobalContextSelector.tsx, disable or remove the useEffect that attempts to "Auto-expand ALL clients when the dropdown first opens" or "Initialize expansion state whenever clients load/change" to expand all clients. This is likely interfering with manual interaction and the expandedClients state.
TypeScript

// In GlobalContextSelector.tsx, REMOVE or COMMENT OUT useEffects like:
// useEffect(() => {
//   if (open && Array.isArray(clients) && clients.length > 0) { /* ... expands all ... */ }
// }, [open, clients]);
// AND
// useEffect(() => {
//   if (Array.isArray(clients) && clients.length > 0) { /* ... expands all ... */ }
// }, [clients]);
Ensure selectClient Works: When a user clicks on a client in the dropdown:
The selectClient(clientId) function must reliably call setSelectedClientId(newClientId) and setCurrentEntity(null) from EntityContext.
Crucially, it should NOT have intermediate steps that set selectedClientId to null if a valid new client is chosen, as this was identified as a potential cause of being "stuck."
The expandedClients state within GlobalContextSelector should be updated such that the newly selected client becomes expanded, and others can optionally be collapsed (or retain their user-set expansion state). For example: setExpandedClients(prev => ({ ...prev, [newClientId]: true })); (This just ensures the selected one is expanded; collapsing others might be too aggressive if not desired).
Verify localStorage in EntityContext.tsx: Ensure loading from localStorage on init and saving selectedClientId and currentEntityId on change does not conflict with the manual selection flow. The persistence should reflect the user's actual last valid selection.
Implement Clear Hierarchical Display (Creator/Owner's Desired UX):
When the selector dropdown is opened:
List all available clients.
Each client item should have an expand/collapse icon (e.g., chevron).
Only if a client is expanded by the user (or if it's the selectedClientId which could be auto-expanded), then render its associated entities (filtered from allEntities) as sub-items directly beneath it.
The useEffect you added in GlobalContextSelector.tsx that sets expandedClients based on the selectedClientId from context is good for ensuring the active client is expanded:
TypeScript

// Keep this or similar logic to expand the *currently selected* client
useEffect(() => {
  if (selectedClientId) {
    console.log(`ARCHITECT_DEBUG_SELECTOR_UI: Auto-expanding selected client ${selectedClientId} to show entities`);
    setExpandedClients(prev => ({ ...prev, [selectedClientId]: true }));
  }
}, [selectedClientId]);
The CSS and styling changes you made for visual distinction are likely good but ensure they support this user-driven or active-client-driven expansion.
Handle showEntities Prop: Ensure that when showEntities={false} is passed to GlobalContextSelector.tsx (e.g., for Chart of Accounts page):
The entity part of the selection is hidden.
Clicking a client sets selectedClientId and immediately closes the dropdown.
The main button correctly displays only the selected client.
Testing & Verification:

Scenario 1: Manual Client & Entity Switching.
Log in. A default client/entity may be selected due to persistence or initial auto-select (if you implement a safe one-time default).
Open selector. Click a different Client X.
Expected: Client X becomes selected. Client X expands in the list. Entities for Client X are shown beneath it. The first entity for Client X is auto-selected. Data in the main application view (e.g., JE list) updates for Client X / new Entity.
Within expanded Client X, click a different Entity Z.
Expected: Entity Z becomes selected. Data updates.
Repeat with another Client C. Confirm you are not stuck and can always switch.
Scenario 2: Persistence.
Select Client C / Entity W.
Reload the page.
Expected: Client C / Entity W are restored and active. Data loads. The selector, when opened, shows Client C expanded with its entities.
Provide ARCHITECT_DEBUG_ logs for these scenarios.
Focus solely on fixing the client/entity selector interaction and display (Task 1 here) until the Creator/Owner confirms it meets their needs and they are no longer stuck. We must resolve this P0 bug.