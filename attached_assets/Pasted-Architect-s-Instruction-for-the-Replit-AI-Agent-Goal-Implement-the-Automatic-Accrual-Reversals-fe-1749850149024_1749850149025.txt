Architect's Instruction for the Replit AI Agent
Goal: Implement the "Automatic Accrual Reversals" feature (Task B.2.2) with a user-selectable reversal date.

New Workflow:

A user creates a journal entry and toggles an "Is Accrual?" switch.
This reveals a date picker, allowing them to select a specific future date for the reversal.
When the user posts the original entry, the system will schedule a background job.
On the morning of the selected reversal date, the background job will run automatically, creating and posting the reversing entry.
This will be a four-part implementation:

Part 1: Database Schema Enhancement

File: shared/schema.ts
Action: We will add one new field and ensure two existing fields are suitable for this feature.
Add isAccrual: boolean('is_accrual').default(false).notNull().
Verify the existing reversalDate: date("reversal_date") field is present to store the user's selected date.
Verify the existing reversalForEntryId: integer('reversal_for_entry_id') field is present to link the reversal back to the original accrual entry.
Part 2: Frontend UI with Date Picker

File: client/src/features/journal-entries/components/JournalEntryForm.tsx
Action: Add a Switch component labeled "Auto-Reversing Accrual". When this switch is toggled on, a DatePicker component will appear, allowing the user to select the reversalDate. The form will store both isAccrual and reversalDate in its state.
Part 3: API and Background Job Scheduling

File: server/journalEntryRoutes.ts
Action: Modify the endpoint that posts a journal entry (PUT .../:id/post).
Logic:
When an entry is posted, the backend will check if isAccrual is true and a valid future reversalDate has been provided.
If so, it will use the BullMQ job queue (already in our tech stack) to schedule a new background job.
This job will be delayed and set to execute on the morning of the user-selected reversalDate. The job's payload will contain the ID of the original accrual entry.
Part 4: Backend Reversal Logic (The Worker)

File: server/tasks/reversalProcessor.ts (a new file will be created for this) and server/storage/journalEntryStorage.ts.
Action:
Create a new background worker that processes jobs from the queue.
This worker will call a new method in journalEntryStorage, such as createAndPostReversingEntry.
This storage method will contain the core logic: it will fetch the original entry, create a new entry with the debits/credits flipped, copy all dimension tags, set the new entry's date to the stored reversalDate, set its status to posted, and mark the original entry as reversed.