I totally get how frustrating this is: you’ve fixed a lot of code, yet on-screen nothing seems to budge.
Below is a short-list of hard-stoppers that will still make the UI look “dead” even though your API code is now correct. Treat them like a checklist—each one can keep the Debit/Credit cells empty and prevent the Edit / Delete / Back buttons from ever mounting or firing.

🔍 What to check	How it breaks things	One-liner to prove / fix
1. entry is undefined for one render	The first render returns early (if (!entry) return …) so the action buttons & table never mount; subsequent renders keep diffing against “nothing” and React never re-adds the handlers.	console.log('entry at render', entry); – should never log undefined after data is fetched. If it is undefined, wrap your useJournalEntry() query with suspense or keep the spinner until isFetching === false.
2. getDebit / getCredit return 0 because the line objects fail the type-guard	isClientFormatLine and isServerFormatLine both return false, so your fallback (else) returns 0.	Temporarily add
if (!isClientFormatLine(l) && !isServerFormatLine(l)) console.warn('Unknown line format', l); in the map-loop. If you see warnings, extend the type-guards (sometimes the backend sends "amount": "1" string not number).
3. You still render line.debit / line.credit	Even if you compute debitValue you never show it.	In each <TableCell> use the parsed value:
{debitValue ? debitValue.toLocaleString(undefined,{minimumFractionDigits:2}) : ''}
4. Permission matrix is built before the entry is posted	Your status stays "draft" in the memo, so the buttons remain hidden.	Build the permission object inside a useMemo that depends on entry.status and invalidate the query on success:
queryClient.invalidateQueries(['journal-entry', entry.id])
5. The HTML response you saw means the PUT still follows a 302	Even with credentials:"include" the backend may redirect to /login because CSRF token / cookie mismatch.	Network-tab 👉 click the PUT row 👉 Response Headers – if you see Location: /login, fix the CSRF token header (XSRF-TOKEN or similar) or disable CSRF for that route in the dev API.

Quick sanity loop
Network tab

PUT / PATCH returns JSON (no <html) and status 200/201.

Console

console.table(entry.lines) shows the numbers you expect.

React DevTools

In JournalEntryDetail props/state you see entry.status === 'posted'.

DOM inspector

The <button> elements are present (if not, render function bailed out).

If any one of those four fails, that’s the exact layer to debug—UI, state, or transport.