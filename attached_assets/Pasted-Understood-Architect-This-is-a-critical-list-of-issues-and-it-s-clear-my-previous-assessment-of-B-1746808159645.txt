Understood, Architect. This is a critical list of issues, and it's clear my previous assessment of Bug #7 and overall JE stability was premature. My apologies for that. We need to ensure these fundamental pieces are working flawlessly.

I will prioritize according to your guidance. Thank you for the detailed breakdown and the specific log lines to focus on.

Here's the plan, addressing your points:

Immediate Priority Issues & Debugging Strategy:

JE Posting (User Issue 5: "Cant post entry")

Sub-Issue A: HTML Response from POST /.../:id/post Route:
I will verify if the POST /api/clients/.../journal-entries/:id/post route (seen in logs for posting JE 144) was updated to return JSON.
If it still returns HTML, I will modify server/journalEntryRoutes.ts (or the relevant route handler for this specific POST action) to ensure it returns a proper JSON response (e.g., the posted JE object or a success status). The preference, as you noted, would be to use the standard PUT /api/clients/.../journal-entries/:id with a body of { "status": "posted" } if that's intended to be the canonical update mechanism, and ensure that returns JSON (which recent logs for JE 133 update to 'draft' and 'posted' suggest it might be doing correctly now). I need to ensure consistency.
Sub-Issue B: undefined ID when auto-posting a new JE after file upload:
The log sequence DEBUG: New journal entry created with ID: 144 ... DEBUG: File uploads complete, now updating status to POSTED ... DEBUG: Journal entry update - ID: undefined is the key.
I will trace the logic in client/src/features/journal-entries/components/JournalEntryForm.tsx within the handleSubmit function, specifically where a new entry is created, then files are uploaded, and then the status is updated to 'posted'. I need to ensure the id from the newly created entry (e.g., newEntry.id which is 144 in the logs) is correctly captured and passed to the subsequent mutation call that changes the status to 'posted'.
JE ID Changing During Edit (User Issue 3: "JE ID changes when editing.")

This is indeed very alarming. I will:
In client/src/features/journal-entries/components/JournalEntryForm.tsx:
Add specific console logs when an existing entry is loaded into the form (useEffect that sets journalData from existingEntry) to capture existingEntry.id.
Add logs within handleSubmit just before the updateJournalEntry.mutate(...) call to show the id within the payload being sent.
Add logs in the onSuccess of the updateJournalEntry mutation to show the id from the response data.
I will perform an edit on an existing JE (e.g., JE 137 from logs, or any other) and meticulously track its ID through these log points.
Attachment Issues (Bug #7 - User Issues 2 & 4):

Attachment Deletion (Issue 4: "Can not remove attachments once added.")
I will attempt to delete an attachment from an existing JE.
I will capture:
Network Request: URL, method, headers for the DELETE call.
Server Response: Status code, headers, full JSON body (if any).
Client Console Logs: Any logs from useDeleteJournalEntryFile in attachmentQueries.ts or the calling component during the delete attempt, focusing on the URL generated and the response processing.
I will review the server/attachmentRoutes.ts DELETE handler, ensuring permissions (e.g., JE status checks like "non-draft/non-pending") are appropriate and not overly restrictive if that's the cause, and that the file is actually deleted from storage (Backblaze B2) and its record from the database.
Attachment Upload 400 Error / UI Update (Issue 2: "when edit a JE uploading an attachment does not show. But appears to save.")
The log POST /api/clients/250/entities/391/journal-entries/137/files resulting in a 400 Bad Request for an existing JE needs to be resolved. The user's note "appears to save" is confusing if a 400 is received; the 400 means the upload failed. The UI not showing it is a direct consequence.
I will:
Focus on getting the full JSON error response body for the 400 error. This often contains specific validation messages from the server.
Compare the FormData construction for uploads to an existing JE (like 137 which failed) versus a new JE (like 144 where logs showed "Upload to entry successful"). What are the differences in JournalEntryForm.tsx's uploadPendingFilesToEntry or attachmentQueries.ts for these two scenarios?
Once an upload to an existing JE is successful (200 OK from /files endpoint), I will verify that the attachment list UI in JournalEntryForm.tsx (edit mode) refreshes correctly. This involves checking the onSuccess of the upload mutation and ensuring queryClient.invalidateQueries is called for the attachment list (e.g., query key like ['journalEntryAttachments', entryId]).
Initial Page Load / Selector Issues (User Issue 1: "Still have to reload after selecting a client. Entities do not show right away in the selector.")

I will investigate client/src/contexts/EntityContext.tsx and client/src/components/dashboard/GlobalContextSelector.tsx (and EntitySelector.tsx).
Entity Selector Not Updating: When a new client is selected, are the entities for that specific client being fetched/filtered correctly and promptly to update the entity dropdown? The log Filtered list for Client 73. Length: 0 Array(0) when Full entities list length: 2 suggests a filtering or state update issue for the entity list itself.
JE List Not Updating: In client/src/features/journal-entries/pages/JournalEntries.tsx, I will ensure the useQuery for journal entries has its queryKey correctly dependent on clientId and entityId and that the enabled flag reacts properly to changes in these IDs from EntityContext. I will log these values on re-renders.
JE Update UX (User Issue 7: "Takes a while for an entry to update causing confusion")

Once the backend update returns a successful JSON response (which logs show it now does for JE ID 137), this becomes a client-side state/UI refresh issue.
I will ensure prompt and correct cache invalidation using queryClient.invalidateQueries in the onSuccess of the update mutation for all relevant queries (JE list, specific JE detail).
I will also check for any unnecessary delays or re-renders in the JournalEntryForm.tsx or JournalEntryDetail.tsx.
Confirm Debits/Credits on List (User Issue 6 - Positive)

I will re-verify this positive development by navigating to the JE list and ensuring the totals are consistently displayed correctly, based on the entry.totals.debit and entry.totals.credit now being provided by the backend.
Test New JE Creation (Previously User Issue 5 - "untested")

After addressing the critical issues above (especially posting and ID consistency), I will perform an end-to-end test of creating a new JE:
Fill out the form.
Add attachments.
Save as draft. Verify it appears in the list correctly (with totals).
Open the draft, edit it, save again.
Open the draft and post it. Verify status change and data persistence.
I will start with JE Posting (Issue 5), focusing on the POST /.../:id/post route returning HTML and the undefined ID when auto-posting a new JE after file upload. I will provide detailed findings, including network traces and console logs, for each issue as I address them. I will also keep the code quality considerations (no duplication, removing outdated code, consistent API client usage) in mind.