Instruction for the Replit AI Agent
Agent, your next task is to build the UI to add, edit, and deactivate values for each dimension.

This involves creating a management interface that will appear when a user wants to manage the specific values (e.g., "Sales", "Marketing") for a given dimension (e.g., "Department").

Follow this detailed implementation plan:

Part 1: Backend & Schema Enhancement

File to Modify: shared/schema.ts
Action: The dimensionValues table currently lacks a status field. Add an isActive column to enable deactivation.
TypeScript

// In shared/schema.ts, update the dimensionValues table
export const dimensionValues = pgTable('dimension_values', {
  id: serial('id').primaryKey(),
  dimensionId: integer('dimension_id').references(() => dimensions.id).notNull(),
  code: text('code').notNull(),
  name: text('name').notNull(),
  // Add this line
  isActive: boolean('is_active').notNull().default(true), 
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});
Action: After modifying the schema, you will need to create and run a new database migration to apply this change.
File to Modify: server/storage/dimensionStorage.ts
Action: Ensure the updateDimensionValue function can accept and persist changes to the new isActive property.
Part 2: Create the Dimension Values Management Component

Action: Create a new component file at client/src/features/manage/DimensionValuesManager.tsx.
Component Specification:
This component should accept a dimension object prop.
List Values: Display the list of values from dimension.values. Each item in the list should show its name, code, and current status (Active or Inactive).
Add New Value: Include a simple form with name and code inputs and an "Add Value" button. This form will be used to create new dimension values.
Edit/Toggle Actions: Each value in the list must have:
An "Edit" button.
A "Deactivate" / "Activate" button.
Mutations: Use useMutation from @tanstack/react-query to handle the API calls:
Creation: The "Add Value" button will trigger a mutation that calls the POST /api/dimensions/:dimensionId/values endpoint.
Updating: The "Edit" functionality will trigger a mutation calling PUT /api/dimension-values/:id.
Toggling Status: The "Deactivate"/"Activate" button will also use the PUT /api/dimension-values/:id endpoint to change the isActive status.
Part 3: Integrate the Component into the Dimensions Page

File to Modify: client/src/pages/manage/DimensionsPage.tsx
State Management:
Introduce useState to manage which dimension is selected for value management (e.g., const [managingDimension, setManagingDimension] = useState<Dimension | null>(null);).
Dialog Integration:
Add a "Manage Values" button inside the CardContent of each dimension card.
When this button is clicked, set the managingDimension state to that card's dimension object. This will trigger a <Dialog> to open.
The <Dialog> component's open prop should be controlled by !!managingDimension. The onOpenChange should set managingDimension to null when the dialog is closed.
Inside the <DialogContent>, render the new <DimensionValuesManager /> component, passing the managingDimension object to it as a prop.
Data Refresh: On a successful mutation from within the DimensionValuesManager dialog (create, update, or toggle), ensure you call queryClient.invalidateQueries({ queryKey: ['dimensions', selectedClientId] }) so the main DimensionsPage automatically updates with the new data when the dialog is closed.
Agent, please begin with Part 1: Enhancing the backend and schema.