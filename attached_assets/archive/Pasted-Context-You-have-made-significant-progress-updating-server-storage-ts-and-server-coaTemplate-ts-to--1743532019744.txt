Context:
You have made significant progress updating server/storage.ts and server/coaTemplate.ts to use accountCode instead of code. Some references might remain, and we need to ensure the refactoring is complete and correct before verifying the fix.

Goal:
Ensure all references to the old code property within server/storage.ts are correctly updated to accountCode, verify the code using the TypeScript compiler, and then proceed with the planned verification steps (re-seeding, UI checks).

Instructions:

Action: Final Search for code References:

Use grep strategically within server/storage.ts one last time to find any remaining instances where the old code property might still be accessed. Focus on patterns like:
account.code
accounts.code
newAccount.code
row.code (specifically within CoA-related functions like import)
templateAccount.code
existingAccount.code (or similar variable names)
Potentially code: within object literals where accountCode: is now expected (e.g., where: { clientId, code: ... } should become where: { clientId, accountCode: ... }).
Example grep command: grep -nE "(\.code|\scode:)" server/storage.ts (Adjust regex as needed to be more specific if this yields too many false positives).
Action: Fix ALL Remaining References:

Carefully review the output from the grep command.
Edit server/storage.ts and correct all remaining identified instances, ensuring they use accountCode appropriately.
Action: Verify with TypeScript Compiler:

Run the TypeScript compiler check to catch any errors or incorrect types resulting from the refactoring: npx tsc --noEmit
If errors occur: Analyze the compiler errors (they often point directly to incorrect property names or types) and fix them in server/storage.ts. Repeat the tsc check until it passes without errors related to storage.ts.
Report the outcome of the tsc check (pass or fail, and any errors encountered/fixed).
Action: Proceed with Verification (From Previous Task):

Crucial: Once server/storage.ts is fully updated and the tsc check passes, immediately proceed to Part 2 (Re-Seed Data) and Part 3 (Verify Seeding and UI Display) from the previous "Debug and Fix CoA Data Seeding & Display" task. This involves:
Running the updated ./scripts/seed-existing-coa.sh script (monitor logs).
Verifying CoA seeding for a new client created via the UI.
Verifying CoA data display in the UI for both the new client and an existing, re-seeded client.
Verification:

Confirm that a final grep search was performed and all remaining .code references were fixed in server/storage.ts.
Confirm that npx tsc --noEmit runs successfully without errors related to server/storage.ts.
Confirm that the agent proceeds to execute the re-seeding and UI verification steps.
Reporting:

Report completion of the refactoring in server/storage.ts.
Report the results of the npx tsc --noEmit check.
Then, proceed directly to the reporting requirements for Part 2 and Part 3 of the previous task, including:
Console output from running seed-existing-coa.sh.
Explicit PASS/FAIL for Step 5 (New Client UI Verification).
Explicit PASS/FAIL for Step 6 (Existing Client UI Verification).