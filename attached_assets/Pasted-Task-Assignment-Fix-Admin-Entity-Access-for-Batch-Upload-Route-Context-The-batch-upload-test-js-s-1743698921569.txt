Task Assignment: Fix Admin Entity Access for Batch Upload Route

Context: The batch-upload-test.js script fails with a "You don't have access to this entity" error when calling POST /api/entities/:entityId/journal-entries/batch, even when authenticated as 'admin'. Admins are intended to have implicit access to all entities belonging to clients. The authorization check needs to be fixed.

Goal: Modify the authorization logic for the entity-specific batch upload endpoint to correctly grant access to admin users, allowing the test script to proceed.

Instructions:

Action: Review Authorization Logic:

Open the file containing the POST /api/entities/:entityId/journal-entries/batch route handler (likely server/batchUploadRoutes.ts or potentially server/routes.ts).
Examine the middleware applied to this specific route (e.g., requireAuth, any custom access check middleware).
Identify the exact code responsible for checking if the authenticated user has access to the :entityId specified in the URL.
Verify: Does this logic include a condition that explicitly checks if req.user.role === 'admin'? If the user is an admin, the entity access check should likely be bypassed (assuming the entity ID itself is valid).
Action: Modify Authorization Logic:

If the check in Step 1 does not correctly handle the admin role, modify the authorization logic.
Ensure that if req.user && req.user.role === 'admin', the middleware or route handler allows the request to proceed without performing further entity-specific ownership or access checks (it should still validate that the entity exists, perhaps).
If the check is within a reusable middleware, ensure the modification doesn't inadvertently grant admin access where it shouldn't. If it's specific to this route, modify it directly.
Action: Clean Up Test Script (test/batch-upload-test.js):

Open test/batch-upload-test.js.
Remove any code added previously that attempts to grant entity access via API calls (e.g., axios.post('/api/users/1/entity-access', ...)). This explicit grant should not be necessary for the admin user.
Confirm the script is using the correct admin credentials (admin/password123) for login.
Confirm the script targets the correct entity-specific batch upload route (e.g., /api/entities/130/journal-entries/batch, using a valid entityId like 130 that belongs to a client).
Action: Restart and Test:

Restart the application server (npm run dev).
Execute the test script: cd test && node batch-upload-test.js.
Verification:

The authorization logic for the POST /api/entities/:entityId/journal-entries/batch route correctly checks for req.user.role === 'admin' and grants access accordingly.
The test script no longer attempts unnecessary explicit permission grants for the admin user.
The test script test/batch-upload-test.js now executes the batch upload POST request without receiving the "You don't have access to this entity" error. (It might fail later for other reasons, but the auth block should be resolved).
Reporting:

Describe the modification made to the authorization logic (which file, what change).
Confirm the cleanup of the test script.
Report the full output of the node test/api-journal-entries.js execution, specifically stating whether the entity access error is resolved. Provide any new errors if the script still fails.