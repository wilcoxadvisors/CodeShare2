Based on the history and your feedback, here's a breakdown of the current situation and the next steps:

Summary of Recent Work & Issues:

Focus: The recent work centered on implementing a modal-based, multi-step "Add Client" flow within the Admin Dashboard's Client Management section (Dashboard.tsx, SetupStepper.tsx, ClientSetupCard.tsx, EntityManagementCard.tsx, SetupSummaryCard.tsx).
Navigation Fixed: An issue where clicking sidebar links caused logout was resolved by using React Router <Link> components (Sidebar.tsx).
Setup Flow Refinements: Several iterations were made to fix bugs in the setup flow, including:
Making email fields optional.
Addressing a 400 error during entity creation.
Improving back/next navigation logic.
Ensuring data (client, entities) flows correctly between steps.
Adding data refetching (useQueryClient().invalidateQueries) upon completion to update the client list.
Persistent Critical Bug: Despite fixes in checkpoints cf97c323, 13a15c7a, and d8d3099d aimed at isolating entities, you're still observing:
Entity Cross-Contamination: When adding a new client, the "Entities" step (EntityManagementCard) incorrectly shows entities belonging to other clients or is pre-populated.
Deletion Issue: You couldn't delete this incorrectly appearing entity.
New Request: You also want functionality on the main client list page to Edit clients and Mark them as Inactive (soft delete) instead of hard deletion.
Troubleshooting the Entity Cross-Contamination:

This is the most critical issue. The agent's last attempt tried using a setupEntities state and clearing it, but it seems ineffective. The root cause likely lies in how the state for entities within the modal is managed or initialized:

State Reset: The state array holding the entities for the current setup session (likely within SetupStepper or passed down to EntityManagementCard) might not be reliably reset to an empty array [] each time the "Add Client" modal is opened for a new client. Check the component's initialization logic and any useEffect hooks tied to the modal's visibility or the client data being processed.
Data Fetching: EntityManagementCard should only display entities held in its session state (setupEntities). It should not be fetching or displaying entities from the database based on the client ID during the initial setup flow for a new client. Fetching should only occur if editing an existing client.
Props/Data Flow: Review how clientData and entityData are passed between the stepper and card components. Ensure that stale entityData isn't persisting across different setup sessions.
Action Plan:

Fix Entity Isolation (Highest Priority):
Instruct the Agent: Focus on SetupStepper.tsx and EntityManagementCard.tsx. Verify that the state holding the list of entities for the setup flow is guaranteed to be empty when starting a new client setup via the modal. Modify the logic to ensure a clean slate every time.
Confirm Deletion: Once the entity list is correctly isolated to the current session, re-test deleting an entity added during that session.
Implement Client Edit/Inactivate (Lower Priority):
After the "Add Client" flow is bug-free, work can begin on adding "Edit" and "Deactivate" buttons/icons to the client list on the dashboard.
This will require:
Frontend changes to display the controls and potentially open a form/modal for editing.
Backend API endpoints (likely in adminRoutes.ts) to handle updating client details and setting an isActive flag (similar to the soft delete for consolidation groups).
Database method updates to support these operations.
Next Step:

Let's focus entirely on fixing the entity isolation bug in the "Add Client" modal first, as it's preventing core functionality.

Please instruct the agent to re-examine SetupStepper.tsx and EntityManagementCard.tsx, ensuring the entity state is correctly and completely reset when initiating a new client setup.