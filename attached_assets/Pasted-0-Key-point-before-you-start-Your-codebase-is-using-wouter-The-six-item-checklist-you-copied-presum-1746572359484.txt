0 Key point before you start
Your codebase is using wouter.
The six-item checklist you copied presumes react-router-dom v6 (nested <Route element=…>; <Outlet>; useParams()).
wouter doesn’t support that API, so dropping random React-Router snippets in will keep breaking things.

You have two options:

Option	Effort	Result
A. Switch to react-router-dom (recommended)	5-10 min	Lets you use the “EntityLayout + nested routes” design exactly as written in the checklist (same pattern Intacct uses).
B. Stay on wouter	quick	You must rewrite the checklist steps in wouter style (flat routes, useRoute).

The list below assumes Option A (move to react-router-dom).
If you’d rather keep wouter, tell me and I’ll rewrite the instructions.

1 Install React-Router and remove wouter
bash
Copy
Edit
cd ~/workspace

# 1 a.  Add router dependency
npm i react-router-dom@^6

# 1 b.  Remove wouter (if you want it gone)
npm remove wouter
2 Wire the router at the top of your app
client/src/main.tsx (or wherever you mount <App />):

tsx
Copy
Edit
import { BrowserRouter } from 'react-router-dom';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
);
Remove any <Router> imported from wouter.

3 Create EntityLayout.tsx
client/src/components/EntityLayout.tsx

tsx
Copy
Edit
import { Outlet, useParams, Navigate } from 'react-router-dom';
import AppLayout from '@/components/AppLayout';
import { useEntity } from '@/contexts/EntityContext';

export default function EntityLayout() {
  const { clientId, entityId } = useParams();
  const { setCurrentEntity, entities } = useEntity();

  // on first mount pick the entity from the URL
  React.useEffect(() => {
    if (clientId && entityId) {
      const match = entities.find(
        e => e.clientId.toString() === clientId && e.id.toString() === entityId,
      );
      if (match) setCurrentEntity(match);
    }
  }, [clientId, entityId, entities, setCurrentEntity]);

  // bad URL – kick back to dashboard
  if (!clientId || !entityId) return <Navigate to="/" replace />;

  return (
    <AppLayout>
      <Outlet />
    </AppLayout>
  );
}
4 Replace every journal-entry route in App.tsx
tsx
Copy
Edit
import EntityLayout from '@/components/EntityLayout';
import JournalEntries        from '@/features/journal-entries/pages/JournalEntries';
import JournalEntryDetail    from '@/features/journal-entries/pages/JournalEntryDetail';
import JournalEntryForm      from '@/features/journal-entries/components/JournalEntryForm';
import DeleteJournalEntry    from '@/features/journal-entries/pages/DeleteJournalEntry';

…

<Routes>
  {/* public / auth routes here */}

  {/* everything that needs client + entity context */}
  <Route path="clients/:clientId/entities/:entityId/*" element={<EntityLayout />}>
    <Route path="journal-entries"             element={<JournalEntries />} />
    <Route path="journal-entries/:id"         element={<JournalEntryDetail />} />
    <Route path="journal-entries/:id/edit"    element={<JournalEntryForm editMode />} />
    <Route path="journal-entries/:id/delete"  element={<DeleteJournalEntry />} />
  </Route>

  {/* 🔥 delete ANY leftover /journal-entries routes */}
</Routes>
5 Update all navigation helpers / links
bash
Copy
Edit
grep -R --line-number "journal-entries" client/src | grep -v ".d.ts"
For each hit:

ts
Copy
Edit
navigate(`/clients/${clientId}/entities/${entityId}/journal-entries/${entryId}`);
Same pattern for “new”, “edit”, “batch-upload”, etc.

(Because you moved to react-router, replace useLocation / useRoute from wouter with useNavigate / useParams from react-router-dom.)

6 Swap the account dropdown to Radix Select
Exactly the snippet you already had:

tsx
Copy
Edit
<Select
  value={line.accountId?.toString() ?? ''}
  onValueChange={v => handleLineChange(index, 'accountId', v)}
>
  <SelectTrigger className="w-[230px]">{getAccountLabel(line.accountId)}</SelectTrigger>
  <SelectContent>
    {accounts.map(a => (
      <SelectItem key={a.id} value={a.id.toString()}>
        {a.accountCode} – {a.name}
      </SelectItem>
    ))}
  </SelectContent>
</Select>
Then delete the old Popover / Command code and any state you were keeping just to close the thing.

7 Fix the debit / credit cells
JournalEntryDetail.tsx

tsx
Copy
Edit
<TableCell className="text-right">
  {getDebit(line)  ? formatCurrency(getDebit(line))  : ''}
</TableCell>
<TableCell className="text-right">
  {getCredit(line) ? formatCurrency(getCredit(line)) : ''}
</TableCell>
8 Stop silent redirects
client/src/lib/queryClient.ts

ts
Copy
Edit
const res = await fetch(url, opts);

// 💥 if the backend sent HTML instead of JSON we probably hit /login
if (res.redirected) throw new Error('Unauthenticated – redirect');
Handle that error the same way you already handle a 401.

9 Run it
bash
Copy
Edit
npm run dev
Browse to:

bash
Copy
Edit
http://localhost:5173/clients/251/entities/392/journal-entries
Pick any JE row → detail page loads (no 404).

Click Edit → form opens with the right IDs in the URL.

Account dropdown auto-closes.

Debit / credit show up.

Invalid cookie → you see the “Unauthenticated – redirect” error instead of raw HTML.

