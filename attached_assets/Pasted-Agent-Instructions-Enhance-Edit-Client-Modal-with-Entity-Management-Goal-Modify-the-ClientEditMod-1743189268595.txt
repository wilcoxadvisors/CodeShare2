Agent Instructions: Enhance Edit Client Modal with Entity Management

Goal: Modify the ClientEditModal to display a list of the client's associated entities and add "Edit" and "Deactivate/Reactivate" actions for each entity.

Relevant Files:

client/src/components/dashboard/ClientEditModal.tsx (Primary file to modify)
client/src/components/dashboard/ClientEditForm.tsx (Existing form for client details)
Need to create: client/src/components/dashboard/EntityEditModal.tsx (Or adapt existing entity form logic)
server/adminRoutes.ts, server/routes.ts (For entity API endpoints: PUT /api/admin/entities/:id or /api/entities/:id)
shared/schema.ts (Entity structure, active field)
Shadcn UI Components: Table, DropdownMenu or Button, Dialog, AlertDialog.
TanStack Query (useQuery, useMutation).
Implementation Steps:

Display Entities in ClientEditModal.tsx:

Action: Open client/src/components/dashboard/ClientEditModal.tsx.
Action: Ensure the useQuery fetching clientData includes the entities array in its type definition (e.g., Client & { entities: Entity[] }). The backend GET /api/admin/clients/:id already provides this [cite: CodeShare/server/adminRoutes.ts].
Action: Inside the DialogContent, below the existing <ClientEditForm ... /> component, add a new section. Use an <h2> or similar for a title like "Associated Entities".
Action: Conditionally render the entity list: If clientData?.entities && clientData.entities.length > 0, render a Table (using Shadcn's Table, TableHeader, TableBody, TableRow, TableHead, TableCell).
Include columns for "Entity Name", "Status" (Active/Inactive based on entity.active), and "Actions".
If no entities exist, display a message like "No associated entities found."
Action: In the "Status" column cell, display "Active" or "Inactive" based on the entity.active boolean field [cite: CodeShare/shared/schema.ts].
Add Entity Actions Column & Handlers in ClientEditModal.tsx:

Action: In the "Actions" column cell of the entity Table, add buttons or a DropdownMenu for entity-specific actions.
Action: Add state variables within ClientEditModal to manage a separate modal for editing an entity:
TypeScript

const [isEntityEditModalOpen, setIsEntityEditModalOpen] = useState(false);
const [selectedEntityForEdit, setSelectedEntityForEdit] = useState<Entity | null>(null); // Use Entity type
Action: Define handler functions within ClientEditModal:
handleEditEntity(entity: Entity): Sets selectedEntityForEdit and setIsEntityEditModalOpen(true).
handleToggleEntityStatus(entity: Entity): (Will implement logic in Step 4).
Action: In the "Actions" cell, add:
An "Edit" button/menu item calling handleEditEntity(entity) on select/click.
A "Deactivate" or "Reactivate" button/menu item calling handleToggleEntityStatus(entity) on select/click. The label should depend on entity.active.
Create EntityEditModal.tsx & Form:

Action: Create a new component client/src/components/dashboard/EntityEditModal.tsx.
Action: This component should accept props like entity: Entity | null, isOpen, onOpenChange, and an onUpdateSuccess callback.
Action: Use Shadcn's Dialog structure.
Action: Inside, create or adapt an entity editing form (similar to ClientEditForm or logic from EntityManagementCard). Use react-hook-form, zod, and Shadcn form components for fields like Name, Industry, etc. Pre-populate using the entity prop.
Action: Implement the form's onSubmit handler:
Use useMutation to call the entity update endpoint (PUT /api/admin/entities/:id or /api/entities/:id). Pass the updated entity data.
In onSuccess: Invalidate the parent modal's query (queryClient.invalidateQueries(['clientDetails', entity.clientId])), show a success toast, and call props.onUpdateSuccess() (which should close this entity edit modal).
In onError: Show an error toast.
Implement Deactivate/Reactivate Logic in ClientEditModal.tsx:

Action: Implement the handleToggleEntityStatus(entity: Entity) function defined in Step 2.
Action: Inside this function, first, store the entity to be toggled in a state variable (needed for the confirmation dialog). Then, open a confirmation dialog (AlertDialog from Shadcn).
Action: Define a mutation using useMutation specifically for toggling the status. The mutation function will call PUT /api/admin/entities/:id or /api/entities/:id with the payload { active: !entity.active }.
Action: In the AlertDialog, on confirming the action, trigger this toggle status mutation.
Action: In the mutation's onSuccess: Invalidate the clientDetails query (queryClient.invalidateQueries(['clientDetails', entity.clientId])) to refresh the entity list in the ClientEditModal. Show a success toast.
Action: In onError: Show an error toast.
Integrate EntityEditModal in ClientEditModal.tsx:

Action: Import EntityEditModal into ClientEditModal.tsx.
Action: Render <EntityEditModal entity={selectedEntityForEdit} isOpen={isEntityEditModalOpen} onOpenChange={setIsEntityEditModalOpen} onUpdateSuccess={() => queryClient.invalidateQueries(['clientDetails', clientId])} /> (adjust props as needed, ensure parent query invalidation on success).
Verification:

Action: Restart the application.
Action: Report build success.
Action: Describe manual test steps:
Open the Dashboard, click "Edit Client" for a client with entities.
Verify the "Associated Entities" list/table appears below the client form within the modal.
Verify entity names and statuses (Active/Inactive) are displayed correctly.
Click the "Edit" action for an entity. Verify the EntityEditModal opens with the correct entity's data.
Modify data in the entity edit modal and save. Verify it closes, a success toast appears, and the entity list in the main ClientEditModal updates.
Click "Deactivate" for an active entity. Confirm the action in the AlertDialog. Verify the status changes to "Inactive" in the list and a success toast appears.
Click "Reactivate" for an inactive entity. Confirm. Verify the status changes back to "Active".
Please proceed with implementing these enhancements to the client editing workflow. Start by displaying the entities list within the ClientEditModal.