Yes — go ahead and replace every remaining unformatNumber call with safeParseAmount (or, in the places where you just want the raw numeric string, with safeParseAmount(value).toString() as you’ve started doing).

Below is a quick, deterministic way to finish the swap so you don’t miss a corner-case or introduce a typo.

1 ⃣ Replace the helpers in JournalEntryForm.tsx
bash
Copy
Edit
# From repo root — lists every surviving occurrence
grep -n --color 'unformatNumber' \
   client/src/features/journal-entries/components/JournalEntryForm.tsx
For each line:

Where	Old code	New code
validation / totals	parseFloat(unformatNumber(line.debit))	safeParseAmount(line.debit)
handlers (handleLineChange,
handleDebouncedLineChange)	const numericValue = unformatNumber(value);	const numericValue = safeParseAmount(value).toString();
table inputs – onChange	const rawValue = unformatNumber(e.target.value);	const rawValue = safeParseAmount(e.target.value).toString();
table inputs – onBlur (where you re-format with commas)	parseFloat(unformatNumber(e.target.value))	safeParseAmount(e.target.value)

When you’re done, run grep again — it should return no matches.

Tip: if you keep the blur re-formatting, you can still use the existing formatNumberWithSeparator(); just feed it safeParseAmount(..).toString().

2 ⃣ Remove the old helper
Delete the now-unused snippet:

ts
Copy
Edit
// Function to unformat number (remove commas) for processing
const unformatNumber = (value: string) => value?.replace(/,/g, '') || '';
The compiler will complain if anything still references it.

3 ⃣ Smoke-test the form
Add several lines mixing:

plain numbers (1000)

numbers with commas (1,234.56)

numbers prefixed with a currency symbol ($200.00)

Save as Draft ➜ ensure totals/debits/credits all look correct.

Post the entry ➜ Network tab should show clean type/amount pairs.

4 ⃣ (Optional) wrap the Debit/Credit inputs
If you find yourself parsing / formatting in several places, consider a small reusable component:

tsx
Copy
Edit
const MoneyInput = ({
  value,
  onChange,
  ...rest
}: React.InputHTMLAttributes<HTMLInputElement>) => {
  const [internal, setInternal] = useState(value ?? '');

  return (
    <input
      {...rest}
      value={internal}
      onChange={e => {
        const raw = safeParseAmount(e.target.value).toString();
        setInternal(raw);
        onChange?.(raw as unknown as React.ChangeEvent<HTMLInputElement>);
      }}
      onBlur={() => setInternal(formatNumberWithSeparator(internal))}
      inputMode="decimal"
    />
  );
};
That removes duplication in both Detail and Form screens.

After these tweaks the last three bugs you listed should be closed:
✅ Blank Debit/Credit columns – both formats parsed via shared helpers.

✅ POST / Save-as-draft 400s – number strings are cleaned before payload validation.

✅ Error banner on Post – keep the toast.error you already added; it now triggers only on genuine API failures.