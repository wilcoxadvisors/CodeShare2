Agent Instructions: Investigate Deactivation & Test Dashboard Client Actions

Goal: First, investigate if a UI element for deactivating clients already exists on the dashboard. Second, create and run a comprehensive automated test script to verify the end-to-end functionality of all client actions (View Details, Edit Client/Entities, Deactivate Client if possible).

Part 1: Investigate Client Deactivation UI

Re-examine Dashboard.tsx:
Action: Open client/src/pages/Dashboard.tsx.
Action: Search again specifically for any DropdownMenuItem, Button, or other interactive element labeled "Deactivate", "Disable", or similar within the client list rendering logic (both desktop table and mobile view).
Action: Check if any existing element calls a function related to setting the client's active status to false or makes a PUT request to /api/admin/clients/:id with { active: false }.
Action: Report your findings. Is there already a UI element present for deactivating a client, or was the user perhaps testing via API or another method?
Part 2: Create Comprehensive Test Script

Create Test File:
Action: Create a new test script file, for example: test/dashboard-client-actions.js. Use Node.js and node-fetch (similar to previous test scripts like test/frontend-complete-flow-verification.js).
Script Logic:
Action: Implement the following sequence within the script:
Authentication: Authenticate as admin (admin/password123). Store the session cookie.
Fetch Initial Data: Simulate loading the dashboard by making a GET request to /api/admin/dashboard or /api/admin/clients to get a list of clients. Select a client ID known to have associated entities for testing (e.g., Client ID 1 if it exists and has entities).
Test View Details: Simulate fetching client details via GET /api/admin/clients/:id. Verify the request returns a 200 status and includes client data and an entities array in the response.
Test Edit Client (Open & Load): Simulate fetching client details again (GET /api/admin/clients/:id) to mimic loading data for the edit modal. Verify 200 status and data presence.
Test Edit Entity (within Edit Client context):
Identify an entity ID from the previously fetched entities array.
Simulate updating that entity via PUT /api/admin/entities/:entityId (or the non-admin version /api/entities/:entityId if appropriate for the test context, ensuring authentication) with some changed data (e.g., update name). Verify a 2xx status code on success.
Test Toggle Entity Status (within Edit Client context):
Select an entity ID again. Get its current active status.
Simulate toggling the status via PUT /api/admin/entities/:entityId (or non-admin) with payload { active: !currentStatus }. Verify a 2xx status code.
(Optional but recommended) Simulate toggling it back to its original status with another PUT request, verifying 2xx status.
Test Save Client: Simulate saving the main client edit form via PUT /api/admin/clients/:clientId with some updated client data (e.g., update contact name). Verify a 2xx status code.
Test Deactivate Client (Conditional):
If your investigation in Part 1 confirmed a UI does exist and you know how it triggers the API: Simulate deactivating the client via PUT /api/admin/clients/:clientId with { active: false }. Verify a 2xx status code.
If no UI exists: Skip this specific test step in the script for now.
Logging: Add clear console.log statements before each step (e.g., "TESTING: View Client Details...", "TESTING: Update Entity...") and log the status code received for each simulated API call. Log "SUCCESS" or "FAILURE" based on the status code.
Part 3: Execute and Report

Run the Script:
Action: Execute the test script: node test/dashboard-client-actions.js.
Report Results:
Action: Report the findings from the deactivation investigation (Part 1).
Action: Provide the full console output from the test script execution (Part 3.1).
Action: Summarize which actions (View Details, Edit Client Load, Edit Entity, Toggle Entity Status, Save Client, Deactivate Client [if tested]) passed or failed based on the script output.