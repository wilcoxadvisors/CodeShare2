Task Assignment: Verify Manual Journal Entry Form Functionality (Task B.2, Step 3 Verification)

Context: The agent has created the ManualJournalEntry.tsx component in client/src/components/forms/ and integrated it onto a test page accessible via the route /manual-journal-entry-test. We need to perform UI and functional tests to verify it meets the requirements.

Goal: Thoroughly test the manual journal entry form's UI rendering, input handling, validation, and successful submission capabilities.

Instructions:

Action: Navigate to Test Page:

Ensure the application is running (npm run dev).
Open the web application in a browser and navigate to the /manual-journal-entry-test route.
Action: Verify Initial UI Rendering:

Check that the main form elements are visible: Date input, Description textarea, a table structure for lines, Add Line button, Submit button, and fields displaying Total Debits, Total Credits, and Balance (initially 0 or empty).
Verify the lines table initially shows at least two empty rows.
Verify each line row contains: an Account selector, a Debit input, a Credit input, a line Description input, and a Remove button.
Action: Test Account Selector:

Click on the Account selector in the first line row.
Confirm that it displays a list of accounts fetched from the backend (Chart of Accounts for the current client context). Check if loading/error states are handled gracefully if the fetch is slow or fails (though success is expected).
Select a valid account (e.g., "Cash").
Action: Test Line Management & Balance Display:

Click the "Add Line" button. Verify a new empty line row is added to the table.
Select accounts for the first two lines. Enter 100.00 in the Debit field of the first line. Verify the Credit field for that line clears (if it had a value) and the Total Debits updates to 100.00, Total Credits remains 0.00, and Balance shows 100.00.
Enter 100.00 in the Credit field of the second line. Verify the Debit field for that line clears and the Total Credits updates to 100.00, and Balance shows 0.00.
Click the "Remove Line" button for one of the lines. Verify the line is removed and the Totals update correctly.
Action: Test Input Constraints:

In a single line, try entering a value in the Debit field, then try entering a value in the Credit field. Confirm only the latest entry remains and the other field is cleared/zeroed out. Repeat vice-versa.
Action: Test Frontend Validations:

Clear all inputs. Click Submit. Verify that error messages appear indicating Date and Description are required, and that the entry must balance / have lines.
Enter Date and Description. Add only one line with valid data. Click Submit. Verify an error message indicates at least two lines might be needed (or that it's unbalanced).
Create an unbalanced entry (e.g., Debit $100 on line 1, Credit $50 on line 2). Click Submit. Verify an error message appears stating "Debits must equal credits" (or similar) and the form does not submit.
Action: Test Successful Submission:

Fill out the form completely with valid data: Select a Date, enter a Description.
Add two or more lines with valid accounts selected.
Ensure the lines are balanced (Total Debits === Total Credits, and not zero).
Click the Submit button.
Observe: Verify the Submit button enters a loading/disabled state.
Observe: Verify a success notification (e.g., toast message) appears upon successful submission.
Observe: Verify the form fields (Date, Description, Lines) are cleared after successful submission.
(If possible) Check Network: Open browser developer tools, go to the Network tab. Verify that clicking Submit triggered a POST request to the correct backend endpoint (e.g., /api/journal-entries) with a JSON payload matching the entered data structure (including date, description, and lines array with accountId, type, amount).
Action: Test Backend Error Handling (Simulated):

Review the component code (client/src/components/forms/ManualJournalEntry.tsx).
Verify that the useMutation hook's onError callback is implemented to display an error message (e.g., toast notification) if the backend API call fails.
Verification:

All UI elements render correctly (Step 2).
Account selector fetches and displays accounts (Step 3).
Line addition/removal works, and balance totals update correctly (Step 4).
Debit/Credit inputs enforce mutual exclusivity (Step 5).
Frontend validation prevents submission for required fields, unbalanced entries, and potentially insufficient lines (Step 6).
Successful submission results in a POST request with correct data, a success notification, and form clearing (Step 7).
Error handling for backend submission failures is implemented (Step 8).
Reporting:

Report PASS/FAIL for each verification step (Steps 2-8).
For Step 7, explicitly confirm the POST request was observed with the correct payload structure.
For Step 8, confirm the onError handling is present in the code.
Provide details on any failures encountered. Screenshots or specific error messages are helpful if tests fail.

Sources and related content
