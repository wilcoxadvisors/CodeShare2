üìå REPLIT AGENT TASK INSTRUCTIONS (REVISED)
Current Issue Context:
The recent storage-layer refactoring broke the Chart of Accounts (CoA) module. The following are explicitly confirmed:

CoA is client-specific (each client has its own distinct CoA).

Every newly onboarded client must automatically receive a generic, standard CoA by default.

Import and export functionality (CSV/Excel) for CoA are currently broken as well.

‚úÖ Step-by-Step Instructions (Clearly Ordered):
‚öôÔ∏è Step 1: Verify Storage Logic for Client-Specific Accounts
Open file explicitly:

plaintext
Copy
Edit
server/storage/accountStorage.ts
Explicitly confirm:

CRUD methods (createAccount, getAccountTree, updateAccount, etc.) explicitly handle clientId correctly.

Account queries explicitly include filtering by clientId.

When creating accounts, explicitly verify clientId association is enforced clearly.

Add explicit debug logging temporarily to verify data explicitly:

typescript
Copy
Edit
console.log("DEBUG createAccount for clientId:", clientId);
‚öôÔ∏è Step 2: Ensure Default Generic CoA Creation for New Clients
Open client creation logic explicitly:

plaintext
Copy
Edit
server/storage/clientStorage.ts
Verify explicitly:

Upon new client creation (createClient), ensure generic standard CoA is created automatically.

Confirm logic explicitly delegates generic CoA creation clearly to accountStorage.createDefaultAccounts(clientId).

Explicitly verify the generic accounts exist clearly within storage or constants.

Example logic to explicitly ensure generic CoA creation:

typescript
Copy
Edit
async createClient(clientData: Client) {
  const newClient = await db.insert(clients).values(clientData).returning('*');
  await accountStorage.createDefaultAccounts(newClient.id); // explicit delegation
  return newClient;
}
Temporarily add explicit debug logging:

typescript
Copy
Edit
console.log("DEBUG createClient: created generic CoA for clientId:", newClient.id);
‚öôÔ∏è Step 3: Verify & Fix Import/Export Logic (CSV/Excel)
üëâ IMPORT FUNCTIONALITY
Open file explicitly:

plaintext
Copy
Edit
server/routes/accountRoutes.ts
Explicitly confirm import endpoint:

plaintext
Copy
Edit
POST /api/accounts/import
Clearly verify it uses updated accountStorage.importAccounts(clientId, csvData) logic.

Open import logic explicitly in accountStorage.ts, explicitly confirm:

Parsing logic clearly handles CSV data accurately.

Correctly associates imported accounts explicitly with the specified clientId.

Does not incorrectly overwrite existing active accounts unless explicitly intended.

Provides clear error feedback/logging for data validation errors explicitly.

Temporarily explicitly log import details:

typescript
Copy
Edit
console.log("DEBUG accountStorage import for clientId:", clientId);
üëâ EXPORT FUNCTIONALITY
Explicitly confirm export endpoint:

plaintext
Copy
Edit
GET /api/accounts/export?clientId=<id>
Clearly verify it calls accountStorage.exportAccounts(clientId) method correctly.

In accountStorage.ts explicitly confirm export logic:

Correctly retrieves accounts explicitly by clientId.

Formats output clearly as CSV/Excel format explicitly.

Ensure no broken references or missing account fields.

Add temporary explicit debug logs for verification:

typescript
Copy
Edit
console.log("DEBUG accountStorage export for clientId:", clientId);
‚öôÔ∏è Step 4: Run Explicit Verification Tests
Execute explicit verification script:

bash
Copy
Edit
node verify-storage-modules.js
Clearly log and provide the output and any explicit errors or issues identified.

‚öôÔ∏è Step 5: Explicitly Verify Database Schema
Open schema file explicitly:

plaintext
Copy
Edit
shared/schema.ts
Confirm explicitly:

Account table explicitly includes clientId (foreign key clearly defined).

Constraints (UNIQUE constraints on accountCode per client, foreign key references, etc.) are explicitly correct.

Use database tool (PgAdmin, DBeaver) explicitly to confirm:

Schema definitions and constraints exactly match the definition in the schema file.

‚öôÔ∏è Step 6: Explicitly Verify Frontend API Calls
Open frontend component explicitly:

plaintext
Copy
Edit
src/components/CoATree.tsx
Clearly confirm API endpoints explicitly called:

Fetch: /api/accounts/tree?clientId=<id>

Import: /api/accounts/import

Export: /api/accounts/export?clientId=<id>

Temporarily explicitly log frontend API responses:

typescript
Copy
Edit
console.log("DEBUG CoATree fetch/import/export response:", response);
Explicitly provide browser console logs showing success or failure.

üö© AGENT OUTPUT (Structured & Explicit)
After following the above steps, clearly provide the following structured summary explicitly:

Cause of Issue Identified (why CoA and import/export broke explicitly)

Files Checked & Changes Made (explicitly list each file modified)

Backend Verification Script Output (clearly detailed)

Generic CoA Initialization Verification (explicit confirmation and details)

Import/Export Functionality Verification (explicit success/failure, include logs)

Explicit Recommended Next Steps if issues persist