Next Task - Continue Refactoring storage.ts:

Following our plan to improve maintainability by breaking down the monolithic storage.ts file, the next logical step is to extract the storage logic for Clients and Entities.

Here are the instructions for the Replit agent:

Task Assignment: Refactor Client & Entity Storage Logic

Context: We are continuing the refactoring of server/storage.ts. Account and Journal Entry logic has already been moved to dedicated modules (accountStorage.ts, journalEntryStorage.ts). This task focuses on extracting Client and Entity related storage logic.

Goal: Create new clientStorage.ts and entityStorage.ts files (or a combined clientEntityStorage.ts if preferred) containing the interfaces and implementations for Client and Entity CRUD operations. Update related files to use these new modules.

Instructions:

Action: Create clientStorage.ts File:

Create the file: CodeShare/server/storage/clientStorage.ts.
Add necessary imports (e.g., db, clients, Client, InsertClient, error handling).
Define an IClientStorage interface with method signatures for Client operations (e.g., getClients, createClient, getClientById, updateClient, deleteClient). Copy signatures from IStorage in storage.ts.
Create and export an implementation class (e.g., ClientStorage implements IClientStorage).
Move the complete implementation code for all Client-related methods from DatabaseStorage and MemStorage in CodeShare/server/storage.ts into this new ClientStorage class.
Export an instance: export const clientStorage = new ClientStorage();.
Action: Create entityStorage.ts File:

Create the file: CodeShare/server/storage/entityStorage.ts.
Add necessary imports (e.g., db, entities, Entity, InsertEntity, userEntityAccess, error handling).
Define an IEntityStorage interface with method signatures for Entity operations (e.g., getEntitiesByClientId, createEntity, getEntityById, updateEntity, deleteEntity, getUserEntityAccess, grantUserEntityAccess - copy from IStorage).
Create and export an implementation class (e.g., EntityStorage implements IEntityStorage).
Move the complete implementation code for all Entity-related methods (and User Entity Access methods) from DatabaseStorage and MemStorage in CodeShare/server/storage.ts into this new EntityStorage class.
Export an instance: export const entityStorage = new EntityStorage();.
Action: Modify Original server/storage.ts:

Open CodeShare/server/storage.ts.
Remove all Client-related and Entity-related method signatures from the IStorage interface.
Remove the complete implementations of all Client and Entity methods (and User Entity Access methods) from both the DatabaseStorage class and the MemStorage class.
Remove any imports that are now unused after removing Client/Entity logic.
Action: Update Consuming Files:

Open CodeShare/server/clientRoutes.ts: Update imports and calls to use clientStorage instead of storage.
Open CodeShare/server/adminRoutes.ts: Update imports and calls for Client/Entity operations to use clientStorage or entityStorage as appropriate.
Open CodeShare/server/routes.ts: Check if any direct calls to storage for Client/Entity methods exist (e.g., in test endpoints) and update them to use the new storage instances. Ensure registration logic doesn't break.
Review other files: Briefly check other route files (like accountRoutes, journalEntryRoutes, etc.) or storage files (accountStorage, journalEntryStorage) for any potential dependencies on the monolithic storage object for Client/Entity info and update them if necessary (though ideally dependencies should be minimal).
Action: Verify Application Startup & Basic Tests:

Restart the application server (npm run dev). Confirm it starts without errors.
Run Key Tests: Execute tests that rely heavily on Client and Entity data to ensure the refactoring didn't break them. This might include:
cd test && node api-journal-entries.js (uses client/entity context implicitly)
cd test && node batch-upload-test.js (uses entity context)
Run any specific tests related to client/entity creation or the setup flow if available (check test/ directory).
Verification:

New files server/storage/clientStorage.ts and server/storage/entityStorage.ts exist with the respective logic.
The original server/storage.ts no longer contains Client/Entity storage logic/interface methods.
clientRoutes.ts, adminRoutes.ts, and potentially other files correctly import and use the new storage modules.
The application server starts successfully.
Relevant automated tests (api-journal-entries.js, batch-upload-test.js, others if applicable) pass successfully.
Reporting:

Confirm creation/modification of the specified files.
Report PASS/FAIL for server startup verification.
Report PASS/FAIL for the test script executions performed.
State readiness to refactor the next domain (e.g., Consolidation Groups).

Sources and related content
