Mission: Implement the Final "Confirm and Process" Mutation

Goal: To connect the frontend "Intelligent Review" screen to our backend processing service. This will be achieved by creating a new useMutation hook that, when triggered, sends the user-approved data to the backend for final persistence.

1. Architectural Plan
This final mutation is the trigger for the entire import process. It must be robust and provide clear feedback to the user.

Target File: client/src/features/journal-entries/components/IntelligentReviewScreen.tsx.

Logic:

A new useMutation hook named processBatchMutation will be created.

This mutation will call our POST /api/clients/:clientId/journal-entries/batch-process endpoint.

It will pass a payload containing the approvedEntries that have been filtered and corrected by the user.

It will use the onSuccess and onError handlers to provide clear toast notifications to the user, confirming the result of the operation.

Crucially, on success, it will perform a comprehensive cache invalidation to ensure the main journal entry list is updated.

UI Integration: The "Confirm and Process" button's onClick handler will be updated to call this new mutation. The button's disabled state will be tied to the mutation's isPending status to prevent duplicate submissions.

2. Surgical Code Implementation
Step 1: Add the Processing Mutation to IntelligentReviewScreen.tsx

Action: Open the target file and add the new useMutation hook.

Instruction: Add the following code inside the IntelligentReviewScreen component function, after the existing state hooks.

TypeScript

// Inside IntelligentReviewScreen component

const params = useParams();
const clientId = params.clientId;
const entityId = params.entityId; // Assuming entityId is in the route for context
const queryClient = useQueryClient();

const processBatchMutation = useMutation({
  mutationFn: (payload: { approvedEntries: any[] }) => {
    return apiRequest(`/api/clients/${clientId}/journal-entries/batch-process`, {
      method: 'POST',
      data: { ...payload, entityId }, // Pass the entityId for entry creation
    });
  },
  onSuccess: (response) => {
    toast({
      title: "Batch Processed Successfully",
      description: response.message,
    });
    // On success, invalidate the main JE list and return the user to the starting point
    queryClient.invalidateQueries({ queryKey: ['journal-entries', clientId, entityId] });
    onReturnToConfig(); // Go back to the upload form
  },
  onError: (error: any) => {
    toast({
      title: "Processing Failed",
      description: error?.error?.message || "An unexpected error occurred.",
      variant: "destructive",
    });
  },
});
Step 2: Update the "Confirm and Process" Button

Action: Locate the "Confirm and Process" button at the bottom of the JSX.

Instruction: Modify the onClick and disabled props to integrate the new mutation.

Find this:

TypeScript

<Button onClick={onProcess} disabled={batchSummary.entriesWithErrors > 0}>
  Confirm and Process {batchSummary.validEntries} Entries
</Button>
Change it to this:

TypeScript

<Button
  onClick={() => {
    const payload = {
      approvedEntries: filteredAndSortedGroups.filter(g => g.isValid)
    };
    processBatchMutation.mutate(payload);
  }}
  disabled={batchSummary.entriesWithErrors > 0 || processBatchMutation.isPending}
>
  {processBatchMutation.isPending ? (
    <>
      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      Processing...
    </>
  ) : (
    `Confirm and Process ${batchSummary.validEntries} Entries`
  )}
</Button>
3. Verification Plan
Navigate to the /batch-import URL and upload a valid test file.

Proceed to the review screen. Ensure there are no validation errors.

Click the "Confirm and Process" button.

Expected Result:

The button text should change to "Processing..." and become disabled.

After a moment, a "Batch Processed Successfully" toast notification should appear.

The UI should automatically navigate back to the initial configuration and upload screen.

Navigate to the main journal entry list page. Verify that the new entries created from your test file are present.