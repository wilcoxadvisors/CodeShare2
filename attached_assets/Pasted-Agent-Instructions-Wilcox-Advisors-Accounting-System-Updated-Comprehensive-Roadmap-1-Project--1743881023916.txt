Agent Instructions: Wilcox Advisors Accounting System (Updated Comprehensive Roadmap)

1. Project Overview & Goal
Project: Wilcox Advisors Accounting System (WAAS)
Goal: Build a scalable, best-in-class SaaS accounting platform inspired by Odoo and Sage Intacct, transitioning from manual processes ‚Üí API automation ‚Üí AI/ML enhancements ‚Üí ERP functionality.
Target Audience: Initially small businesses, later medium and large enterprises.
Tech Stack: React (Vite, TypeScript, Shadcn UI), Node.js (Express, TypeScript), PostgreSQL (Drizzle ORM), Python (Flask, TensorFlow/PyTorch, scikit-learn, XAI).
Code Location: CodeShare/

2. Business Model & Long-Term Vision
Revenue Model: Tiered SaaS subscriptions (Basic/Pro/Enterprise), implementation fees, add-on services, data monetization (aggregated/anonymized).
Automation Goal: Automate accounting processes progressively, leveraging AI for forecasting, categorization, anomaly detection, and insights.
Data Strategy: Robust anonymization, clear privacy policies, and explicit user consent mechanisms. Focus on data quality for AI/ML and monetization.
Future ERP Capabilities: Expand to full ERP features for standalone use by finance teams.
Future-Proofing: Blockchain and IoT integrations planned for audit trails and expense tracking.

3. Current Development Status
Phase 1 (Stabilization & Migration): ‚úÖ COMPLETE.
- Database migrations, backend refactoring, initial setup flows stable.

Phase 2 (Guided Setup Flow): ‚úÖ COMPLETE.
- Verified 3-step client onboarding process (SetupStepper.tsx).
- Addressed state management, navigation, and persistence.

Phase 3 (Core Accounting Features): IN PROGRESS.
- Task B.1 (Chart of Accounts): ‚úÖ COMPLETE.
  - Client-specific hierarchical CoA implementation.
  - Import/export functionalities, UI enhancements verified.
- Task B.2 (General Ledger & Journal Entries): ‚úÖ COMPLETE.
  - Backend/frontend CRUD implementations verified.
  - Batch upload functionality tested and verified.
- Task B.3 (Accounts Payable): NEXT TASK.
  - Implement vendor CRUD operations, AP bills schema, and backend APIs.

Recent Enhancements (Explicitly Completed):
- ‚úÖ Auto-generated client/entity codes (format: CLIENTCODE-0001).
- ‚úÖ Soft deletion (inactive status via `deletedAt` timestamp).
- ‚úÖ Restoration functionality (backend APIs and UI components).
- ‚úÖ Audit logging of deletion/restoration actions.

4. Immediate Tasks & Priorities
Next Immediate Task:
- üìù Explicitly verify UI/UX of soft deletion/restoration.
  - Confirm UI clarity for inactive/deleted items.
  - Explicitly test end-to-end restoration process.
- üìù Move explicitly to Task B.3 (Accounts Payable backend foundation):
  - Vendors and AP Bills schema.
  - Implement vendor CRUD storage/API.

5. Explicitly Defined Roadmap & Prioritized Tasks
Phase B (Core Accounting Modules):
- Implement Accounts Receivable (AR) module.
- Other modules: Debt, Inventory, Fixed Assets, Lease Accounting, Prepaids.
- Ensure integration with CoA and GL.
- GAAP/IFRS compliant financial statements.

Phase C (Reporting & Data Collection):
- Optimize backend logic for standard financial reports.
- Backend APIs for custom reporting.
- Implement data collection with explicit consent and anonymization.

Phase D (API Integrations & Automation):
- Connect explicitly to Plaid, Stripe, Gusto, Ramp/Concur.
- Automate journal entries from API data.

Phase E (AI/ML & Forecasting):
- Verify Python ML service integration.
- Implement AI forecasting, auto-categorization, anomaly detection, NLP.

Phase F (Final Polish & Testing):
- Complete comprehensive automated testing.
- Update all technical/user documentation.
- Deployment and CI/CD pipeline setup.

Phase G (Long-Term Future-Proofing):
- Explore blockchain and IoT expense tracking integrations.

6. Agent Best Practices & Guidelines
- Prioritize explicitly defined tasks and ensure each step is verified before moving forward.
- Maintain consistent, modular design structure (domain-specific storage modules).
- Regularly test functionality explicitly through automated unit/integration tests.
- Write clear, well-documented, and maintainable code.
- Implement explicit error handling and user-friendly error messages.
- Maintain detailed documentation and adhere to linting/formatting standards (ESLint, Prettier).

7. Explicit Code Quality & Cleanup Strategy
- Regularly run ESLint and Prettier for formatting consistency.
- Use tools like ts-prune for detecting and removing unused code.
- Leverage TypeScript strict settings (`npx tsc --noEmit`) for static analysis.
- Incrementally refactor large or complex files into modular domain-specific modules.
- Ensure comprehensive automated tests are in place before and after refactoring.

Next Session Starting Point:
- Explicitly begin by verifying UI/UX of the recently implemented soft deletion/restoration functionality.
- Once confirmed, explicitly proceed with implementing Accounts Payable backend features (Task B.3).

End of updated instructions.