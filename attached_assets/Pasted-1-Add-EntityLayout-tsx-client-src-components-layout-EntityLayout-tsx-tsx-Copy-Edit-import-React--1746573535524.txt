1. Add EntityLayout.tsx
client/src/components/layout/EntityLayout.tsx

tsx
Copy
Edit
import React, { useEffect } from 'react';
import { Outlet, useParams, useNavigate } from 'react-router-dom';
import { useEntity } from '@/contexts/EntityContext';
import AppLayout from '@/components/AppLayout';

/**
 * Wraps every “entity-scoped” route.
 *  – Reads :clientId / :entityId from the URL
 *  – Pushes the matching entity into EntityContext
 *  – Shows child routes (<Outlet/>) inside the normal AppLayout shell
 */
const EntityLayout: React.FC = () => {
  const { clientId: clientIdStr, entityId: entityIdStr } =
    useParams<'clientId' | 'entityId'>();
  const clientId = Number(clientIdStr);
  const entityId = Number(entityIdStr);

  const { currentEntity, entities, setCurrentEntity } = useEntity();
  const navigate = useNavigate();

  /* On mount / param-change: ensure the EntityContext is set */
  useEffect(() => {
    if (!clientId || !entityId) return;                // bad URL

    // Already correct – no work.
    if (currentEntity?.id === entityId) return;

    const match = entities.find(e => e.id === entityId && e.clientId === clientId);
    if (match) {
      setCurrentEntity(match);
    } else {
      // No such entity for this user – bounce them back somewhere safe.
      navigate('/dashboard', { replace: true });
    }
  }, [clientId, entityId, entities, currentEntity, setCurrentEntity, navigate]);

  return (
    <AppLayout>
      {/* children routes render here */}
      <Outlet />
    </AppLayout>
  );
};

export default EntityLayout;
Directory note: you already created client/src/components/layout/; place the file there (or move if you prefer another path – just keep the import path in App.tsx consistent).

2. Import EntityLayout in App.tsx
At the top of App.tsx add:

tsx
Copy
Edit
import EntityLayout from '@/components/layout/EntityLayout';
3. Route tree (React-Router 6)
Inside the <Routes> block, nest every Journal-Entry-related route under the layout:

tsx
Copy
Edit
<Routes>
  {/* public / auth routes … */}

  <Route
    path="clients/:clientId/entities/:entityId/*"
    element={<EntityLayout />}>
    <Route
      path="journal-entries"
      element={<ProtectedRoute component={JournalEntries} />}
    />
    <Route
      path="journal-entries/new"
      element={<ProtectedRoute component={NewJournalEntry} />}
    />
    <Route
      path="journal-entries/:id"
      element={<ProtectedRoute component={JournalEntryDetail} />}
    />
    <Route
      path="journal-entries/:id/edit"
      element={<ProtectedRoute component={JournalEntryForm} />}
    />
    <Route
      path="journal-entries/:id/delete"
      element={<ProtectedRoute component={DeleteJournalEntry} />}
    />
  </Route>

  {/* fallback / 404 routes … */}
</Routes>
Delete every old “loose” /journal-entries/* route so there’s only one place that matches.

4. Clean up leftover wouter calls
You’ve already migrated most files. Run one last check:

bash
Copy
Edit
grep -R "from 'wouter'" client/src | grep -v '.d.ts'
Replace any stragglers with the right React-Router-DOM hooks:

wouter	react-router-dom
import { Link }	import { Link }
useLocation()	const location = useLocation(); (comes from RRD)
const [match, params] = useRoute('…')	const params = useParams<'…'>();
const [, navigate] = useLocation()	const navigate = useNavigate();

5. Re-start Vite
bash
Copy
Edit
npm run dev
The "EntityLayout is not defined" error disappears, and every JE URL:

bash
Copy
Edit
/clients/251/entities/392/journal-entries
/clients/251/entities/392/journal-entries/140
/clients/251/entities/392/journal-entries/140/edit
now has working client / entity context, no 404s, and no need for manual useRoute parsing.

