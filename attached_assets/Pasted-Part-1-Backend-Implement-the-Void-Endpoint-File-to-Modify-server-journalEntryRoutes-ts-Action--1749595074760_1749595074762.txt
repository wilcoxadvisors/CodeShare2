Part 1: Backend - Implement the Void Endpoint
File to Modify: server/journalEntryRoutes.ts

Action:
Add a new route handler for POST /api/clients/:clientId/entities/:entityId/journal-entries/:id/void. This handler will perform the necessary checks and then call the existing journalEntryStorage.updateJournalEntry function to change the entry's status.

Locate the section in the file for other hierarchical POST or PUT routes, such as near the /reverse or /post endpoints.

Add the following new route handler block in that area to implement the missing "void" endpoint:

TypeScript

// In server/journalEntryRoutes.ts

/**
 * ---------------------------------------------------------------------------
 * Hierarchical void route POST /api/clients/:clientId/entities/:entityId/journal-entries/:id/void
 * ---------------------------------------------------------------------------
 */
app.post(
  '/api/clients/:clientId/entities/:entityId/journal-entries/:id/void',
  isAuthenticated,
  asyncHandler(async (req: Request, res: Response) => {
    const clientId = parseInt(req.params.clientId, 10);
    const entityId = parseInt(req.params.entityId, 10);
    const id = parseInt(req.params.id, 10);
    const user = req.user as { id: number, role?: string };
    const { voidReason } = req.body;

    if (Number.isNaN(clientId) || Number.isNaN(entityId) || Number.isNaN(id)) {
      return throwBadRequest('Invalid client, entity, or journal entry ID');
    }

    // Check for admin role
    if (user.role !== 'admin') {
      return throwForbidden('Only administrators can void posted journal entries.');
    }

    // Check for void reason
    if (!voidReason) {
      return throwBadRequest('A reason is required to void a posted journal entry.');
    }

    // Get the entry to be voided
    const originalEntry = await journalEntryStorage.getJournalEntry(id);
    if (!originalEntry || originalEntry.entityId !== entityId || originalEntry.clientId !== clientId) {
      return throwNotFound('Journal Entry not found for the specified client and entity.');
    }

    // Only "posted" entries can be voided
    if (originalEntry.status !== 'posted') {
      return throwBadRequest(`Cannot void a journal entry with status '${originalEntry.status}'.`);
    }

    // Update the entry status to 'voided'
    const voidedEntry = await journalEntryStorage.updateJournalEntry(id, {
      status: 'voided',
      rejectionReason: voidReason, // Use rejectionReason field to store the void reason
      rejectedBy: user.id, // Log who voided the entry
      rejectedAt: new Date(),
    });

    res.status(200).json({
      message: 'Journal entry has been voided successfully.',
      entry: voidedEntry,
    });
  })
);
Part 2: Frontend - Connect the "Void" Button
The frontend already has a "Void" button and dialog. We just need to make sure it calls our new backend endpoint.

File to Modify: client/src/features/journal-entries/pages/JournalEntryDetail.tsx

Action:
Locate the voidEntry mutation and update its mutationFn to call the new hierarchical endpoint.

Find the voidEntry = useMutation({ ... }) block (around line 937).

Replace the entire mutationFn with the following corrected version, which calls our new endpoint and includes the voidReason.

TypeScript

// In client/src/features/journal-entries/pages/JournalEntryDetail.tsx

const voidEntry = useMutation({
  mutationFn: async () => {
    if (!entryId) throw new Error('Journal entry ID is required');
    if (!clientId || !currentEntity?.id) {
      throw new Error('Client ID and Entity ID are required for journal entry operations');
    }

    // --- THIS IS THE CORRECTED PART ---
    const voidUrl = `/api/clients/<span class="math-inline">\{clientId\}/entities/</span>{currentEntity.id}/journal-entries/${entryId}/void`;
    return await apiRequest(voidUrl, {
      method: 'POST',
      data: {
        voidReason: voidReason, // Pass the reason from the dialog's state
      },
    });
    // --- END OF CORRECTION ---
  },
  onSuccess: () => {
    setShowVoidDialog(false);
    setVoidReason(''); // Clear the reason on success
    toast({
      title: 'Success',
      description: 'Journal entry has been voided',
    });
    refetch(); // Refetch the entry data to show the new status
  },
  onError: (error: any) => {
    setShowVoidDialog(false);
    toast({
      title: 'Error',
      description: `Failed to void journal entry: ${error.message}`,
      variant: 'destructive',
    });
  },
});
Verification:
After applying these changes, navigate to a "Posted" journal entry, click the "Void" button, enter a reason in the dialog, and confirm. The entry's status should update to "voided" on the detail page.