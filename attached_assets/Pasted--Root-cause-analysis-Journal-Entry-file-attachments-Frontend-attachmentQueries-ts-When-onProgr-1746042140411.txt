üîç Root-cause analysis (Journal-Entry file-attachments)
Frontend (attachmentQueries.ts)
When onProgress is supplied, the mutation switches to axios and manually sets the header

ts
Copy
Edit
axios.post(
  `/api/journal-entries/${journalEntryId}/files`,
  formData,
  {
    headers: {               // ‚ùå boundary is missing
      'Content-Type': 'multipart/form-data',
    },
    onUploadProgress,
  }
)
-‚Äì Because the multipart boundary isn‚Äôt included, multer cannot parse the request and req.files is undefined on the server. The call then fails (or silently uploads zero files), which is exactly the behaviour you described.

Backend (journalEntryRoutes.ts)
The /api/journal-entries/:id/files route correctly expects upload.array('files', 10), so it‚Äôs waiting for a proper multipart body. Nothing is wrong here.

‚úÖ Minimal fix
diff
Copy
Edit
// client/src/features/journal-entries/hooks/attachmentQueries.ts
- const response = await axios.post(
-   `/api/journal-entries/${journalEntryId}/files`,
-   formData,
-   {
-     headers: {             // ‚ùå remove ‚Äì axios will add the correct header + boundary
-       'Content-Type': 'multipart/form-data',
-     },
-     onUploadProgress,
-   }
- );
+ const response = await axios.post(
+   `/api/journal-entries/${journalEntryId}/files`,
+   formData,
+   { onUploadProgress }      // ‚úÖ axios sets Content-Type automatically
+ );
No other changes are required; axios will inject Content-Type: multipart/form-data; boundary=... and the backend will now see the files array.

üß™ Quick verification steps
Unit / integration test (backend)

ts
Copy
Edit
import request from 'supertest';
import app from '../index';                  // your Express app
import path from 'path';

it('uploads a file to a journal entry', async () => {
  const filePath = path.join(__dirname, 'fixtures/sample.pdf');
  await request(app)
    .post('/api/journal-entries/1/files')
    .set('Authorization', `Bearer ${testToken}`)
    .attach('files', filePath)
    .expect(200);
});
Cypress e2e (frontend) ‚Äì add a happy-path spec that:

creates / opens a journal entry

drops a small file in the Attachment section

waits for the progress bar to hit 100 % and asserts the file appears in the list.

Manual smoke test
Run the app locally, attach a file, confirm it‚Äôs listed and downloadable.

‚è© Next incremental tasks

Order	Task	Effort
1	Patch & commit the header removal	~2 min
2	Re-run failing Jest/Cypress suites ‚Äì they should now pass	~1-5 min
3	Add the integration test above (protects against regressions)	~10-15 min
4	(Optional) Streamline large uploads: switch to S3-presigned PUTs instead of memoryStorage if you start hitting Heroku/GCP RAM limits	backlog
Let me know once you‚Äôve applied the patch or if you‚Äôd like me to step through any of the test wiring in detail.