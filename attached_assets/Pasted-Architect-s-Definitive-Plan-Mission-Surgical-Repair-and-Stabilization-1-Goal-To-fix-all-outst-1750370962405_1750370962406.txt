Architect's Definitive Plan: Mission - Surgical Repair and Stabilization

1. Goal:

To fix all outstanding critical data integrity, state management, and workflow bugs in the existing useState-based Journal Entry module. This plan will be executed through precise, targeted modifications, not file replacements.

2. Definitive Plan - CRITICAL BUGS

Stage 1: Fix All Data Persistence Bugs (#6, #7, #10)

Problem: The Reference suffix, Date, and Auto-accrual fields are not being saved because the data payload sent to the server is incomplete.
File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx
Action: Locate the handleSaveDraft function. The formData object within it is missing key fields. The agent must modify this object to correctly pull all data from the journalData state.
Apply this exact structure to the formData object inside handleSaveDraft and all other submission handlers (handleSubmitForApproval, handlePostEntry):
JavaScript

const formData = {
  date: journalData.date,
  referenceNumber: journalData.referenceNumber,
  // FIX #6: Ensure the optional suffix is included
  referenceUserSuffix: journalData.referenceUserSuffix || "", 
  description: journalData.description,
  status: "draft", // or "pending_approval", "posted"
  // FIX #10: Ensure accrual data is included
  isAccrual: journalData.isAccrual,
  reversalDate: journalData.isAccrual ? journalData.reversalDate : null,
  lines: lines.map(/*...existing transformation...*/)
};
For the Date bug (#7): This same fix ensures that the correct journalData.date from the state is always sent, preventing it from changing.
Stage 2: Fix Attachment Save/Load Workflow (#5, #9)

Problem: Attachments are not being loaded on edit and are not being saved correctly on update. This is a failure in both the backend data retrieval and the frontend UI logic.
Action 1 (Backend Fix):
File: server/storage/journalEntryStorage.ts
Instruction: In the getJournalEntry function, after the main entry is fetched, the agent must add a manual query to fetch the associated files and attach them to the response.
JavaScript

// Inside getJournalEntry, after fetching the entry...
if (entry) {
    // ...
    // FIX #5: Manually fetch and attach files
    if (includeFiles) {
        const files = await this.getJournalEntryFiles(id);
        (entry as any).files = files || [];
    }
    return entry;
}
Action 2 (Frontend Fix):
File: client/src/features/journal-entries/components/AttachmentSection.tsx
Instruction: The "Upload" button should not be visible when viewing a posted entry. Wrap the file input <div> in a conditional render.
JavaScript

// FIX #8: Conditionally render the upload input
{isInEditMode && (
  <div className="mb-4">
    <Label htmlFor="file-upload" /* ... */>Upload Files</Label>
    <input id="file-upload" /* ... */ />
  </div>
)}
Stage 3: Fix Stale Data on List Page (#4)

Problem: The journal entry list doesn't update after a save, requiring a refresh. The cache invalidation is not working correctly.
File to Modify: client/src/features/journal-entries/components/JournalEntryForm.tsx
Action: In the onSuccess callbacks for both the createEntry and updateEntry mutations, the invalidateQueries call must be made more specific.
TypeScript

// In both createEntry and updateEntry onSuccess callbacks...
queryClient.invalidateQueries({
  // FIX #4: Use the exact query key for the list
  queryKey: ["journal-entries", effectiveClientId, entityId],
  exact: true 
});
3. Next Steps

First, the agent will execute this three-stage plan to fix all critical data bugs. After you verify these fixes, we will proceed with a separate mission to address the UI/UX polish items (#1, #2, #3).