The final task is to implement the ability to attach supporting documents to journal entries (Issue #7).

Requirements:

Implement the UI within the main JE form component (client/src/features/journal-entries/components/JournalEntryForm.tsx), but display it only when editing an existing entry (isEditMode is true).
Allow uploading multiple files at once.
Implement a drag-and-drop UI for uploads (with a fallback button).
Allow users to delete previously uploaded attachments.
Restrict allowed file types to: PDF, JPG, JPEG, PNG, GIF, DOC, DOCX, XLS, XLSX, TXT, CSV.
Objective: Implement backend API/storage and frontend UI/logic for multi-file attachments within the JE edit form.

Backend Tasks:

Storage Logic (server/storage/journalEntryStorage.ts):

Implement createJournalEntryFile: Handle file storage (e.g., save to ./public/uploads/journal-entries/:journalEntryId/) and insert metadata into journalEntryFiles.
Implement getJournalEntryFiles: Query and return file records for a journalEntryId.
Implement deleteJournalEntryFile: Delete DB record and file from disk.
API Routes (server/journalEntryRoutes.ts):

Create POST /api/journal-entries/:id/files: Use multer for upload.array('attachments', 10), disk storage, file type filter (allow specified types). Iterate req.files, call storage function for each. Return created records.
Create GET /api/journal-entries/:id/files: Call storage function, return list.
Create DELETE /api/journal-entry-files/:fileId: Call storage function. Return 204 or error.
Create GET /api/journal-entry-files/:fileId/download: Find file record, use res.download().
Frontend Tasks (client/src/features/journal-entries/components/JournalEntryForm.tsx):

Conditional UI Section: Wrap the entire attachment UI in a conditional block that only renders if isEditMode is true.
UI Elements: Inside the conditional block:
Add a "File Attachments" title/section.
Implement a drag-and-drop zone (using react-dropzone). Show feedback. Include fallback button.
Display a list of attached files (show filename, icon, size, Delete button).
State & Hooks:
Use useGetAttachments query hook (calling GET /api/journal-entries/:id/files) to fetch the list based on the current journalEntryId (only if isEditMode).
Use useUploadAttachments mutation hook (calling POST /api/journal-entries/:id/files).
Use useDeleteAttachment mutation hook (calling DELETE /api/journal-entry-files/:fileId).
Upload Logic:
Handle file selection/drop (multiple files).
Filter files client-side based on allowed types.
Use FormData for multiple 'attachments'.
Call useUploadAttachments mutation. Show progress. Handle success (invalidate useGetAttachments query) and errors.
Display & Download Logic:
Render the list based on useGetAttachments data.
Link filenames to the download route (/api/journal-entry-files/:fileId/download).
Delete Logic:
Implement "Delete" button onClick.
Call useDeleteAttachment mutation with the fileId.
Handle success (invalidate useGetAttachments query) and errors.
Report: Confirm implementation of backend (storage, routes, multer, filter), frontend (conditional UI in form, drag-drop, list, delete), and hooks/logic."