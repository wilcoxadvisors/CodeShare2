Updated Instructions for Wilcox Advisors Accounting System
ðŸ“Œ Onboarding Flow (Explicitly Updated)
The onboarding workflow is simplified to explicitly include only:

Client Setup

Collect: Name, Legal Name, Address, Tax Info, Industry, Contacts

Default Entity Creation

Automatically created after successful Client creation.

Uses explicitly the Clientâ€™s Name and Industry as defaults.

Note:

Historical Data, Consolidation Group, and Chart of Accounts (CoA) setups are explicitly excluded from onboarding.

Historical data will be explicitly handled through the Journal Entry batch upload module.

ðŸ“Œ Industry Dropdown Alignment & Consistency
Maintain industry dropdown lists explicitly from a single source of truth at:

bash
Copy
Edit
client/src/lib/industryUtils.ts
Explicitly ensure ALL components (ClientSetupCard.tsx, EntityManagementCard.tsx, EntityForm.tsx, ClientOnboardingForm.tsx, etc.) import and utilize this centralized source.

Immediately remove duplicate implementations of utility functions like ensureIndustryValue explicitly from individual components.

ðŸ“Œ Core Accounting Tasks (Explicitly Corrected Status)
ðŸ”„ Task B.1: Chart of Accounts (CoA) â€“ IN PROGRESS
Priority:

Explicitly fix and verify the import/export functionality after recent refactoring.

Finalize the UI/UX enhancements and clearly document all edge-case validations.

Ensure consistency and explicitly verify hierarchical CoA across multiple entities.

ðŸ”„ Task B.2: General Ledger & Journal Entries (GL/JE) â€“ IN PROGRESS
Clearly finalize and explicitly verify batch journal entry upload functionality and UI.

Expand comprehensive automated testing explicitly covering all key edge cases.

ðŸ”² Task B.3: Accounts Payable Backend Foundation â€“ NOT STARTED
Next explicit priority after completion and verification of B.1 and B.2.

ðŸ“Œ Continuous Refactoring & Code Quality Requirements
Throughout every task explicitly:

Refactor continuously from monolithic to modular/microservice architecture:

Clearly ensure each module handles single, explicit responsibilities.

Immediately extract logic from large files/functions into smaller, maintainable, explicitly named modules and services.

Proactively search for and remove explicitly:

Duplicate implementations, particularly resulting from refactoring.

Outdated or unused code, especially from old testing, agent mistakes, or deprecated implementations.

Run tools like ts-prune or Knip periodically to clearly detect unused or outdated code explicitly:

bash
Copy
Edit
npx ts-prune
npx knip
Explicitly review results and safely remove verified unnecessary code.

ðŸ“Œ Immediate Verification Checklist (Explicitly Required)
 Onboarding explicitly matches simplified flow:

Client â†’ Automatic Default Entity creation

 Industry dropdown lists explicitly aligned and consistent everywhere.

 Task B.1 import/export functionality explicitly fixed post-refactoring.

 Continuous refactoring explicitly evident in PRs/code changes.

 All new and existing modules clearly documented explicitly.

 Regular execution of unused code detection scripts (ts-prune, knip).

