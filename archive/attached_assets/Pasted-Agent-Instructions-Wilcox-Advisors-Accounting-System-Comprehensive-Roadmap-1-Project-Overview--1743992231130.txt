Agent Instructions: Wilcox Advisors Accounting System (Comprehensive Roadmap)
1. Project Overview & Goal
Project: Wilcox Advisors Accounting System
High-Level Goal: Build a best-in-class, scalable SaaS accounting platform, inspired by Odoo's open-source backend logic where applicable.
Phased Approach: Manual First -> API Automation -> AI/ML Enhancements -> Full Automation & ERP Features.
Target Audience: Small, medium, and large businesses.
Tech Stack: React (Vite, TypeScript, TanStack Query, Shadcn UI), Node.js (Express, TypeScript), PostgreSQL (Drizzle ORM), Python (for AI/ML).
Code Location: CodeShare/ folder.
Reference Docs: (Note: Original references were to uploaded files - Business Plan.docx, Outline for Accounting System Integration.docx, etc. These are conceptual references based on past context.)
2. Business Model & Long-Term Vision
Revenue: Tiered SaaS subscriptions (Basic/Pro/Enterprise) + Add-ons + Implementation Fees. Aggressive growth targets ($10M revenue/2k clients by Year 5).
Automation Goal: Progressively automate accounting and finance processes, moving from manual input to API-driven workflows enhanced by AI/ML.
Data Strategy: Implement data collection mechanisms to enable selling data and creating valuable reports for investors and economists. Ensure robust anonymization, transparent privacy policies, and explicit user consent are in place. Design the system to maximize data availability for AI/ML and forecasting.
ERP Evolution: The long-term goal is to expand the feature set so the platform can be sold and used as a standalone ERP system directly by client finance teams.
Future-Proofing: Considerations for Blockchain audits and IoT expense tracking are planned for later phases.
3. Current Development Status
Phase 1 (Stabilization & Migration): COMPLETE. Database migration (junction table for consolidation groups) is finished. Backend logic updated. Code cleanup done.

Recent Fix: ✅ Fixed server crash during migrations by correcting the conditional check in add-soft-deletion-and-audit-logs.ts that was causing premature process termination.
Phase 2 (Guided Setup Flow): COMPLETED. The 3-step "Add Client" modal flow (SetupStepper.tsx + Cards) accessed via Dashboard.tsx is now stable.

Update: All critical setup flow bugs have been fixed (Checkpoints through f0cc5d4f), including state management, navigation, and database persistence issues.
Phase 3 (Core Accounting Features): IN PROGRESS.

Current Update: Task B.1 (Chart of Accounts) is now COMPLETE. This includes implementation of client-specific hierarchical CoA, backend/frontend management, code -> accountCode refactoring, import/export functionality (CSV/Excel) with fixes for update logic and UI improvements, resolution of display bugs, and successful verification. Schema refactoring was performed to move reporting fields (fsliBucket, internalReportingBucket, item) from accounts to journalEntryLines.
Current Update: Task B.2 (General Ledger / Journal Entries) backend logic and API are COMPLETE and verified via automated tests. Frontend UI (ManualJournalEntry.tsx) created and passed initial verification. Batch Upload backend logic is implemented and verified via tests. Task B.2 is COMPLETE.
Storage Layer Refactoring: COMPLETE. The monolithic storage system has been successfully refactored:
Client Storage: ✅ Successfully refactored all client-related storage logic to server/storage/clientStorage.ts.
Entity Storage: ✅ Created entityStorage.ts module with clear delegation pattern.
✅ Verified no entity logic remains directly in storage.ts.
✅ Implemented interfaces (IEntityStorage) with clear CRUD methods.
✅ Updated DatabaseStorage and MemStorage to delegate correctly.
✅ Documented entityStorage.ts thoroughly.
Account Storage: ✅ Refactored all account-related storage logic to server/storage/accountStorage.ts.
Journal Entry Storage: ✅ Refactored all journal entry logic to server/storage/journalEntryStorage.ts.
Consolidation Storage: ✅ Refactored consolidation group logic to server/storage/consolidationStorage.ts.
User Storage: ✅ Refactored user-related logic to server/storage/userStorage.ts.
Budget Storage: ✅ Refactored budget-related logic to server/storage/budgetStorage.ts.
Form Storage: ✅ Refactored form-related logic to server/storage/formStorage.ts.
Asset Storage: ✅ Refactored fixed asset logic to server/storage/assetStorage.ts.
Report Storage: ✅ Refactored reporting logic to server/storage/reportStorage.ts.
User Activity Storage: ✅ Refactored user activity tracking to server/storage/userActivityStorage.ts.
Audit Log Storage: ✅ Implemented audit log functionality to server/storage/auditLogStorage.ts.
Content Storage: ✅ Implemented content storage for website content management to server/storage/contentStorage.ts.
Phase 4 (Website Content Management): IN PROGRESS (As of 2025-04-06).

✅ Completed Tasks:
Authentication Middleware: ✅ Passport.js authentication middleware verified and fixed to correctly use req.user for authenticated user data.
Homepage Content Schema: ✅ Created and verified homepageContent schema in shared/schema.ts.
Content Storage: ✅ Implemented CRUD storage methods for homepage content in server/storage/contentStorage.ts.
RESTful API Endpoints: ✅ Created and verified API endpoints for content management in server/routes/contentRoutes.ts.
Admin UI Component: ✅ Developed AdminWebsiteContent.tsx component for managing website content with tabbed interface.
Blog Integration: ✅ Verified blog posts CRUD operations with authentication in server/routes/blogRoutes.ts.
Admin Dashboard Integration: ✅ Successfully integrated AdminWebsiteContent component into Dashboard.tsx while preserving existing blog management UI.
UI/UX Enhancements: ✅ Enhanced AdminWebsiteContent with improved responsive layouts, visual hierarchy, and better user interaction patterns.
Blog Management UI: ✅ Improved BlogContentManager with refined tabs, better filtering controls, search functionality, and enhanced subscriber management interface.
📌 Current State:
Admin Dashboard integration is complete with responsive designs across all device sizes.
Blog management functionality has been verified and enhanced with improved UI/UX.
Homepage content management is fully operational with responsive component designs.
Blog subscription form errors have been resolved, improving user experience.
Comprehensive verification documents have been created for ongoing quality assurance.
🎯 Immediate Next Steps:
Begin AI integration planning for automated blog content generation.
Begin implementing the accounting module, focusing on batch journal entry uploads.
Plan for analytics dashboard to track website content performance.
Verification Status (COMPLETED):
    * **Consolidation Storage:** ✅ Refactored consolidation group logic to server/storage/consolidationStorage.ts.
    * **User Storage:** ✅ Refactored user-related logic to server/storage/userStorage.ts.
    * **Budget Storage:** ✅ Refactored budget-related logic to server/storage/budgetStorage.ts.
    * **Form Storage:** ✅ Refactored form-related logic to server/storage/formStorage.ts.
    * **Asset Storage:** ✅ Refactored fixed asset logic to server/storage/assetStorage.ts.
    * **Report Storage:** ✅ Refactored reporting logic to server/storage/reportStorage.ts.
    * **User Activity Storage:** ✅ Refactored user activity tracking to server/storage/userActivityStorage.ts.
 Verified clientStorage.ts delegation and documentation.
 Verified entityStorage.ts delegation and documentation.
 Verified journalEntryStorage.ts delegation and documentation.
 Verified additional specialized modules (formStorage.ts, userActivityStorage.ts, etc.).
 Confirmed no direct domain logic remains in storage.ts.
 Confirmed interfaces (IStorage) accurately reflect the modular structure.
 Verification script passed successfully: node verify-storage-modules.js.
 User activity storage verification passed: node verify-user-activity-storage.cjs.
 Confirmed all modules and methods have clear, updated documentation.
Next Immediate Task:
📝 Review UI/UX verification document for content management components.
📝 Begin AI integration planning for blog content generation.
📝 Move to Task B.3: Accounts Payable Backend Foundation (Vendors, AP Bills Schema; Vendor CRUD Storage/API).
4. Overall Project Roadmap & Agent Tasks (Prioritized)
Phase A: Stabilize Core Setup Flow (COMPLETED)

(Task A.1) ✅ Fix Final DB Save & Dashboard Update
(Task A.2) ✅ Fix Stepper Initialization
(Task A.3) ✅ Fix Industry Display
(Task A.4) ✅ Fix State Loss on Back Navigation
(Task A.5) ✅ Fix Step 1 Input Clearing
Additional Completed Tasks:
✅ Dashboard Client Actions: View Details, Edit Client, Deactivate Client.
Phase B: Core Accounting Module (COMPLETED - Moving to B.3)

(Task B.1) Customizable Chart of Accounts (CoA): COMPLETE
✅ Design/Finalize hierarchical schema (shared/schema.ts)
✅ Implement backend CRUD API (server/accountRoutes.ts, /accounts/tree)
✅ Basic CRUD API Testing
✅ Backend Hierarchy Implementation
✅ Single Header Context Selector
✅ Frontend Hierarchy UI (Display & Add/Edit Forms)
✅ CoA Import/Export functionality (CSV/Excel, update logic, accountCode refactor)
✅ Fixed CoA Import Deletion Logic (inactive marking)
✅ Enhanced CoA Import UI (simplified workflow)
✅ CoA Automated Testing (Import/Export API verified)
✅ Refactored Account storage logic to server/storage/accountStorage.ts.
(Task B.2) General Ledger (GL) and Journal Entries (JE): COMPLETE
✅ Design/Finalize JE schema (shared/schema.ts, reporting fields moved)
✅ Implement backend CRUD API (server/journalEntryRoutes.ts, validation debit=credit)
✅ Build frontend UI for manual JE creation (ManualJournalEntry.tsx in components/forms/) - Verified via test page.
✅ Implement logic for processing batch JE uploads (Backend API in batchUploadRoutes.ts, storage logic) - Verified via test script.
✅ Refactored Journal Entry storage logic to server/storage/journalEntryStorage.ts.
(AI Link - Future): Consider hooks for "JE learning".
(Task B.3) Accounting Modules: NEXT
📝 Next: Implement Accounts Payable (AP) backend foundation (Vendors, AP Bills Schema; Vendor CRUD Storage/API).
📝 Implement Accounts Receivable (AR) module.
📝 Implement other modules (Debt/Notes Payable, Inventory, Fixed Assets, Lease Accounting, Prepaid Expenses).
📝 Ensure integration with CoA and GL.
📝 Design/implement GAAP/IFRS financial statements with footnotes.
Phase C: Website Content Management (NEARLY COMPLETE)

(Task C.1) ✅ Authentication & Backend: Authentication middleware verified and fixed, with proper user access control.
(Task C.2) ✅ Content Schema & Storage: Homepage content schema and storage methods created and verified.
(Task C.3) ✅ Admin UI Component: AdminWebsiteContent component developed with tabbed interface for content management.
(Task C.4) ✅ Dashboard Integration: AdminWebsiteContent component integrated into Dashboard while preserving existing UI.
(Task C.5) Blog Management & Integration:
✅ Backend CRUD operations verified
✅ Fixed homepage blog previews and "View Articles" link (Issue #6)
✅ Resolved subscription form submission error (Issue #7)
✅ Enhanced UI/UX for content management with responsive designs
✅ Improved BlogContentManager with better tabs, filters, and search
(Task C.6) AI Content Generation (NEXT):
📝 Plan integration of financial news feeds
📝 Design AI content draft generation process
📝 Create admin review workflow for AI-generated content
Phase D: Reporting (Standard & Custom) & Data Collection

(Task D.1) Standard Reporting: Finalize/optimize backend logic (consolidation-group-methods.ts) for TB, IS, BS, CF reports. Build reliable frontend display components.
(Task D.2) Custom Reporting:
Define backend API capabilities for fetching data with flexible filters.
Build a frontend UI for custom report building.
(Task D.3) Data Collection and Analysis:
Implement data collection mechanisms.
Ensure anonymization, privacy policies, and user consent.
Design for AI/ML and forecasting.
Prioritize state-of-the-art, innovative, customer-focused, easy-to-use solutions.
Create a great design (trustworthy, trendy, fun).
Phase E: API Integrations & Automation

(Task E.1) Implement Integrations: Connect to Plaid, Stripe, Gusto, Ramp/Concur etc.
(Task E.2) Automate JE Creation: From fetched API data (AI assistance).
(AI Assistance): Explore Plaid, document analysis. Odoo/Sage Intacct inspiration.
Phase F: AI/ML & Predictive Forecasting

(Task F.1) Verify Python Service Integration: Check DB access for python_service/ml_service.py.
(Task F.2) Implement AI/ML and Predictive Forecasting: Models for forecasting, auto-categorization, anomaly detection, NLP queries. Advanced analytics features. Prioritize state-of-the-art, innovative design.
(Task F.3) Implement Other AI Features: Auto-categorization, anomaly detection, NLP from plans.
Phase G: Future Enhancements

(Task G.1) ✅ Implement Client Edit/Deactivate (Done).
(Task G.2) Comprehensive Testing: Expand unit, integration, E2E tests.
(Task G.3) Documentation: Update all technical and user documentation.
(Task G.4) Deployment Prep: Finalize cloud configuration, CI/CD, monitoring.
(Task G.5) AI-driven proactive website health monitoring and autonomous code updates.
(Task G.6) XAI integration to enhance explainability and transparency in the accounting system.
Phase H: Future-Proofing (Long Term)

(Task H.1) Explore Blockchain & IoT integrations.
5. General Guidelines for Agent
Prioritize: Focus on AI integration planning, then move to Task B.3: Accounts Payable Backend Foundation.
Maintain Structure: Keep the client-specific accounting design consistent. Follow established patterns (e.g., modular storage).
Test Thoroughly: Ensure functionality works. Write/run automated tests (unit, integration, API).
Log When Needed: Use console.log("DEBUG Component: Action:", value) for tracing complex logic.
Verify Incrementally: Test each specific feature/fix thoroughly before moving on.
Recommended verification command: node verify-storage-modules.js should be run after each significant backend change.
Simplify: Avoid unnecessary complexity. Focus on clean state management.
Ask for Clarification: If unsure, ask before proceeding.
Design Considerations: Prioritize state-of-the-art, innovative, customer-focused, easy-to-use design. Aim for trust, trendiness, and fun.
Data Strategy: Keep data collection/strategy goals in mind during design.
Code Quality: Write clean, well-organized, documented code. Follow linting/formatting rules.
Efficiency: Prioritize efficient algorithms and data structures.
Error Handling: Implement robust error catching and user-friendly messages.
Documentation: Maintain clear documentation and code comments.
6. Code Quality & Cleanup Strategy
Automated Linting and Formatting:
Tools: Use ESLint and Prettier via project configurations (.eslintrc.js, .prettierrc.json).
Agent Action: Run linting/formatting commands periodically (e.g., npx eslint . --fix, npx prettier . --write) to fix issues automatically.
Automated Unused Code/Dependency Detection:
Tools: Consider using tools like ts-prune or Knip to find unused exports, files, types, and dependencies.
Agent Action: Run these tools periodically. Based on reports, remove identified unused items after reviewing for potential impacts.
Manual Code Review:
Agent Action: On completion of major features or key milestones, conduct a code review focused on identifying code smells, duplicated code, and potential refactoring opportunities.
Performance Profiling:
Tools: Use browser performance tools for frontend (especially Lighthouse); use Node.js profiling tools for backend.
Agent Action: Identify and address performance bottlenecks, focusing on critical paths first.
Documentation Quality:
Agent Action: Ensure comprehensive technical (code) and user documentation is created and maintained, with a focus on clarity and completeness.
Regression Testing:
Agent Action: Implement a robust suite of automated tests for each critical system component, ensuring new changes don't break existing functionality.
Specific Focus Areas:
Storage Logic: Further decompose remaining monolithic pieces.
API Layer: Continue enhancing route organization and documentation.
Frontend State Management: Identify and clean up redundant state.
TypeScript Type Safety: Enhance type coverage, especially for API boundary interfaces.