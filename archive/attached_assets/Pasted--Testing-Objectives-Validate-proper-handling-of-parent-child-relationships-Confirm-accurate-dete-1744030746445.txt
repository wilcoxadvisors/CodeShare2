‚úÖ Testing Objectives:
Validate proper handling of parent-child relationships.

Confirm accurate detection of circular and self-referencing accounts.

Verify correct handling of updates, deletions, and deactivations.

Ensure robustness and accuracy of error messages.

üìå Testing Scenarios:
1. Circular Reference Detection
Purpose: Confirm the system detects circular account relationships clearly.

Steps:

Prepare a test Excel import file with:

yaml
Copy
Edit
| AccountCode | Name      | Type   | ParentCode |
|-------------|-----------|--------|------------|
| 1000        | Assets    | ASSET  | 1100       |
| 1100        | Cash      | ASSET  | 1000       |
Upload and attempt to import this file.

Expected Outcome:

Import fails clearly, with a detailed error message:

"Circular reference detected: Account 1000 ‚Üî Account 1100."

2. Self-Referencing Account Validation
Purpose: Ensure self-referencing accounts are caught.

Steps:

Prepare an Excel file with:

pgsql
Copy
Edit
| AccountCode | Name      | Type   | ParentCode |
|-------------|-----------|--------|------------|
| 1200        | Inventory | ASSET  | 1200       |
Upload and attempt import.

Expected Outcome:

Import fails with explicit message:

"Self-referencing detected: Account 1200 references itself as a parent."

3. Parent Account Existence Validation
Purpose: Validate that all parent accounts exist.

Steps:

Prepare an Excel file:

pgsql
Copy
Edit
| AccountCode | Name      | Type   | ParentCode |
|-------------|-----------|--------|------------|
| 1300        | Receivable| ASSET  | 9999       |
Attempt to import.

Expected Outcome:

Import fails with explicit message:

"Parent account 9999 does not exist for account 1300."

4. Bulk Import Performance
Purpose: Test stability and performance with large imports.

Steps:

Prepare an Excel file containing 150 accounts, structured hierarchically with proper parent-child relationships.

Upload and import this file.

Expected Outcome:

Successful import within reasonable time (under 60 seconds).

All 150 accounts correctly displayed in the Chart of Accounts.

5. Update and Deactivation Handling
Purpose: Ensure accounts are properly updated or marked inactive when missing.

Steps:

Import an Excel file with:

yaml
Copy
Edit
| AccountCode | Name          | Type   | ParentCode |
|-------------|---------------|--------|------------|
| 2000        | Liabilities   | LIABILITY |          |
| 2100        | Payables      | LIABILITY | 2000     |
Prepare a second Excel file to test updates and removals:

Change the name "Payables" to "Accounts Payable"

Remove account "2000" from the import to test missing account handling.

Select options on import:

Update existing accounts: ‚úÖ Checked

Handle missing accounts: üîò Deactivate

Upload and import the second file.

Expected Outcome:

Account "2100" name updated to "Accounts Payable."

Account "2000" marked inactive, clearly shown in UI as inactive.

6. Delete Missing Accounts (Edge Case)
Purpose: Confirm deletion only occurs if no transactions exist.

Steps:

Create and import account "3000."

Add a test transaction linked to account "3000."

Prepare a second import file without account "3000."

Select import option:

Handle missing accounts: üîò Delete

Upload and import.

Expected Outcome:

Import fails for deletion of account "3000" with message:

"Cannot delete account 3000: Account has existing transactions."

7. Error Messaging Accuracy
Purpose: Ensure all error messages clearly communicate issues and how to fix them.

Steps:

Prepare Excel file with multiple validation errors:

Self-referencing account

Missing parent account

Invalid account type (e.g., "ASST" instead of "ASSET")

Upload and import.

Expected Outcome:

Multiple errors displayed clearly:

"Self-referencing detected for AccountCode X."

"Parent account Y does not exist for AccountCode Z."

"Invalid account type 'ASST' for AccountCode A."

üß™ Recording Test Results:
Clearly document your tests by filling out a simple log:

Scenario	Test Data Used	Expected Result	Actual Result	Pass/Fail	Notes
1	Circular reference.xlsx	Error detected	(Your result)	‚úÖ/‚ùå	
2	Self-reference.xlsx	Error detected	(Your result)	‚úÖ/‚ùå	
3	Missing parent.xlsx	Error detected	(Your result)	‚úÖ/‚ùå	
4	Bulk accounts.xlsx	Success	(Your result)	‚úÖ/‚ùå	
5	Update deactivate.xlsx	Success	(Your result)	‚úÖ/‚ùå	
6	Delete transaction.xlsx	Error detected	(Your result)	‚úÖ/‚ùå	
7	Multiple errors.xlsx	Errors detected	(Your result)	‚úÖ/‚ùå	
‚úÖ Post-Testing Verification:
After tests:

Verify the Chart of Accounts UI displays results accurately.

Confirm backend database reflects changes properly.

Ensure robust error logging for troubleshooting.

